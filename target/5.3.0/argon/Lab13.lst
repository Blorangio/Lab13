
/Users/admin/Documents/CTD_2023/Labs/Lab13/target/5.3.0/argon/Lab13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000075d8  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bb5f8  000bb5f8  0000b5f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         000001dc  2003e384  000bb61c  0000e384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000290  2003e560  2003e560  0001e560  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000bb7f8  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000bb7fc  000bb7fc  0001b7fc  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000bb802  000bb802  0001b802  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000bb826  000bb826  0001b826  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   0014ec92  00000000  00000000  0001b82a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00016fbe  00000000  00000000  0016a4bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00049bda  00000000  00000000  0018147a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003580  00000000  00000000  001cb054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000bdb8  00000000  00000000  001ce5d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0004192f  00000000  00000000  001da38c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00051b82  00000000  00000000  0021bcbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001451d1  00000000  00000000  0026d83d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000a674  00000000  00000000  003b2a10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_d2uiz>:
   b48cc:	004a      	lsls	r2, r1, #1
   b48ce:	d211      	bcs.n	b48f4 <__aeabi_d2uiz+0x28>
   b48d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b48d4:	d211      	bcs.n	b48fa <__aeabi_d2uiz+0x2e>
   b48d6:	d50d      	bpl.n	b48f4 <__aeabi_d2uiz+0x28>
   b48d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b48dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b48e0:	d40e      	bmi.n	b4900 <__aeabi_d2uiz+0x34>
   b48e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b48e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b48ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b48ee:	fa23 f002 	lsr.w	r0, r3, r2
   b48f2:	4770      	bx	lr
   b48f4:	f04f 0000 	mov.w	r0, #0
   b48f8:	4770      	bx	lr
   b48fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b48fe:	d102      	bne.n	b4906 <__aeabi_d2uiz+0x3a>
   b4900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b4904:	4770      	bx	lr
   b4906:	f04f 0000 	mov.w	r0, #0
   b490a:	4770      	bx	lr

000b490c <__aeabi_d2f>:
   b490c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b4910:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b4914:	bf24      	itt	cs
   b4916:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b491a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b491e:	d90d      	bls.n	b493c <__aeabi_d2f+0x30>
   b4920:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b4924:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b4928:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b492c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b4930:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b4934:	bf08      	it	eq
   b4936:	f020 0001 	biceq.w	r0, r0, #1
   b493a:	4770      	bx	lr
   b493c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b4940:	d121      	bne.n	b4986 <__aeabi_d2f+0x7a>
   b4942:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b4946:	bfbc      	itt	lt
   b4948:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b494c:	4770      	bxlt	lr
   b494e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4952:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b4956:	f1c2 0218 	rsb	r2, r2, #24
   b495a:	f1c2 0c20 	rsb	ip, r2, #32
   b495e:	fa10 f30c 	lsls.w	r3, r0, ip
   b4962:	fa20 f002 	lsr.w	r0, r0, r2
   b4966:	bf18      	it	ne
   b4968:	f040 0001 	orrne.w	r0, r0, #1
   b496c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4970:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b4974:	fa03 fc0c 	lsl.w	ip, r3, ip
   b4978:	ea40 000c 	orr.w	r0, r0, ip
   b497c:	fa23 f302 	lsr.w	r3, r3, r2
   b4980:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b4984:	e7cc      	b.n	b4920 <__aeabi_d2f+0x14>
   b4986:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b498a:	d107      	bne.n	b499c <__aeabi_d2f+0x90>
   b498c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b4990:	bf1e      	ittt	ne
   b4992:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b4996:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b499a:	4770      	bxne	lr
   b499c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b49a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b49a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b49a8:	4770      	bx	lr
   b49aa:	bf00      	nop

000b49ac <__aeabi_d2ulz>:
   b49ac:	b5d0      	push	{r4, r6, r7, lr}
   b49ae:	4b0c      	ldr	r3, [pc, #48]	; (b49e0 <__aeabi_d2ulz+0x34>)
   b49b0:	2200      	movs	r2, #0
   b49b2:	4606      	mov	r6, r0
   b49b4:	460f      	mov	r7, r1
   b49b6:	f7ff fcef 	bl	b4398 <__aeabi_dmul>
   b49ba:	f7ff ff87 	bl	b48cc <__aeabi_d2uiz>
   b49be:	4604      	mov	r4, r0
   b49c0:	f7ff fc70 	bl	b42a4 <__aeabi_ui2d>
   b49c4:	4b07      	ldr	r3, [pc, #28]	; (b49e4 <__aeabi_d2ulz+0x38>)
   b49c6:	2200      	movs	r2, #0
   b49c8:	f7ff fce6 	bl	b4398 <__aeabi_dmul>
   b49cc:	4602      	mov	r2, r0
   b49ce:	460b      	mov	r3, r1
   b49d0:	4630      	mov	r0, r6
   b49d2:	4639      	mov	r1, r7
   b49d4:	f7ff fb28 	bl	b4028 <__aeabi_dsub>
   b49d8:	f7ff ff78 	bl	b48cc <__aeabi_d2uiz>
   b49dc:	4621      	mov	r1, r4
   b49de:	bdd0      	pop	{r4, r6, r7, pc}
   b49e0:	3df00000 	.word	0x3df00000
   b49e4:	41f00000 	.word	0x41f00000

000b49e8 <strcmp>:
   b49e8:	f810 2b01 	ldrb.w	r2, [r0], #1
   b49ec:	f811 3b01 	ldrb.w	r3, [r1], #1
   b49f0:	2a01      	cmp	r2, #1
   b49f2:	bf28      	it	cs
   b49f4:	429a      	cmpcs	r2, r3
   b49f6:	d0f7      	beq.n	b49e8 <strcmp>
   b49f8:	1ad0      	subs	r0, r2, r3
   b49fa:	4770      	bx	lr

000b49fc <strlen>:
   b49fc:	4603      	mov	r3, r0
   b49fe:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4a02:	2a00      	cmp	r2, #0
   b4a04:	d1fb      	bne.n	b49fe <strlen+0x2>
   b4a06:	1a18      	subs	r0, r3, r0
   b4a08:	3801      	subs	r0, #1
   b4a0a:	4770      	bx	lr

000b4a0c <__aeabi_d2lz>:
   b4a0c:	b538      	push	{r3, r4, r5, lr}
   b4a0e:	2200      	movs	r2, #0
   b4a10:	2300      	movs	r3, #0
   b4a12:	4604      	mov	r4, r0
   b4a14:	460d      	mov	r5, r1
   b4a16:	f7ff ff31 	bl	b487c <__aeabi_dcmplt>
   b4a1a:	b928      	cbnz	r0, b4a28 <__aeabi_d2lz+0x1c>
   b4a1c:	4620      	mov	r0, r4
   b4a1e:	4629      	mov	r1, r5
   b4a20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4a24:	f7ff bfc2 	b.w	b49ac <__aeabi_d2ulz>
   b4a28:	4620      	mov	r0, r4
   b4a2a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   b4a2e:	f7ff ffbd 	bl	b49ac <__aeabi_d2ulz>
   b4a32:	4240      	negs	r0, r0
   b4a34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4a38:	bd38      	pop	{r3, r4, r5, pc}
   b4a3a:	bf00      	nop

000b4a3c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4a3c:	4809      	ldr	r0, [pc, #36]	; (b4a64 <module_user_pre_init+0x28>)
   b4a3e:	490a      	ldr	r1, [pc, #40]	; (b4a68 <module_user_pre_init+0x2c>)
   b4a40:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4a42:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4a44:	d005      	beq.n	b4a52 <module_user_pre_init+0x16>
   b4a46:	4a09      	ldr	r2, [pc, #36]	; (b4a6c <module_user_pre_init+0x30>)
   b4a48:	4282      	cmp	r2, r0
   b4a4a:	d002      	beq.n	b4a52 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4a4c:	1a12      	subs	r2, r2, r0
   b4a4e:	f003 fd34 	bl	b84ba <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4a52:	4807      	ldr	r0, [pc, #28]	; (b4a70 <module_user_pre_init+0x34>)
   b4a54:	4a07      	ldr	r2, [pc, #28]	; (b4a74 <module_user_pre_init+0x38>)
   b4a56:	2100      	movs	r1, #0
   b4a58:	1a12      	subs	r2, r2, r0
   b4a5a:	f003 fd3c 	bl	b84d6 <memset>
    return &link_global_data_start;
}
   b4a5e:	4801      	ldr	r0, [pc, #4]	; (b4a64 <module_user_pre_init+0x28>)
   b4a60:	bd08      	pop	{r3, pc}
   b4a62:	bf00      	nop
   b4a64:	2003e384 	.word	0x2003e384
   b4a68:	000bb61c 	.word	0x000bb61c
   b4a6c:	2003e560 	.word	0x2003e560
   b4a70:	2003e560 	.word	0x2003e560
   b4a74:	2003e7f0 	.word	0x2003e7f0

000b4a78 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4a78:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a7a:	4e07      	ldr	r6, [pc, #28]	; (b4a98 <module_user_init+0x20>)
   b4a7c:	4c07      	ldr	r4, [pc, #28]	; (b4a9c <module_user_init+0x24>)
    module_user_init_hook();
   b4a7e:	f003 fad3 	bl	b8028 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a82:	1ba4      	subs	r4, r4, r6
   b4a84:	08a4      	lsrs	r4, r4, #2
   b4a86:	2500      	movs	r5, #0
   b4a88:	42ac      	cmp	r4, r5
   b4a8a:	d100      	bne.n	b4a8e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4a8c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4a8e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4a92:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a94:	3501      	adds	r5, #1
   b4a96:	e7f7      	b.n	b4a88 <module_user_init+0x10>
   b4a98:	000bb5d4 	.word	0x000bb5d4
   b4a9c:	000bb5f8 	.word	0x000bb5f8

000b4aa0 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4aa0:	f000 b8ea 	b.w	b4c78 <setup>

000b4aa4 <module_user_loop>:
}

void module_user_loop() {
   b4aa4:	b508      	push	{r3, lr}
    loop();
   b4aa6:	f000 f923 	bl	b4cf0 <loop>
    _post_loop();
}
   b4aaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4aae:	f003 ba73 	b.w	b7f98 <_post_loop>

000b4ab2 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4ab2:	f002 ba47 	b.w	b6f44 <malloc>

000b4ab6 <_Znaj>:
   b4ab6:	f002 ba45 	b.w	b6f44 <malloc>

000b4aba <_ZdaPv>:
   b4aba:	f002 ba4b 	b.w	b6f54 <free>

000b4abe <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4abe:	f002 ba49 	b.w	b6f54 <free>
	...

000b4ac4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b4ac4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b4ac6:	4a03      	ldr	r2, [pc, #12]	; (b4ad4 <__cxa_pure_virtual+0x10>)
   b4ac8:	4903      	ldr	r1, [pc, #12]	; (b4ad8 <__cxa_pure_virtual+0x14>)
   b4aca:	200c      	movs	r0, #12
   b4acc:	f002 f98e 	bl	b6dec <panic_>
  while (1);
   b4ad0:	e7fe      	b.n	b4ad0 <__cxa_pure_virtual+0xc>
   b4ad2:	bf00      	nop
   b4ad4:	000b6aad 	.word	0x000b6aad
   b4ad8:	000ba390 	.word	0x000ba390

000b4adc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4adc:	7800      	ldrb	r0, [r0, #0]
   b4ade:	fab0 f080 	clz	r0, r0
   b4ae2:	0940      	lsrs	r0, r0, #5
   b4ae4:	4770      	bx	lr

000b4ae6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4ae6:	2301      	movs	r3, #1
   b4ae8:	7003      	strb	r3, [r0, #0]
   b4aea:	4770      	bx	lr

000b4aec <_Z18updatePositionFuncv>:
  //   client.publish("Iot2023", "0");
  // } else {
  //   client.publish("Iot2023", "1");
  // }
  //client.publish("Iot2023", "0");
  once = true;
   b4aec:	4b01      	ldr	r3, [pc, #4]	; (b4af4 <_Z18updatePositionFuncv+0x8>)
   b4aee:	2201      	movs	r2, #1
   b4af0:	701a      	strb	r2, [r3, #0]
}
   b4af2:	4770      	bx	lr
   b4af4:	2003e68c 	.word	0x2003e68c

000b4af8 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b4af8:	6943      	ldr	r3, [r0, #20]
   b4afa:	b113      	cbz	r3, b4b02 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4afc:	6983      	ldr	r3, [r0, #24]
   b4afe:	300c      	adds	r0, #12
   b4b00:	4718      	bx	r3
            callback();
        }
    }
   b4b02:	4770      	bx	lr

000b4b04 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b4b04:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b4b06:	2100      	movs	r1, #0
   b4b08:	4604      	mov	r4, r0
   b4b0a:	4608      	mov	r0, r1
   b4b0c:	f001 ff6e 	bl	b69ec <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b4b10:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b4b12:	4620      	mov	r0, r4
   b4b14:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b4b16:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b4b18:	f001 ff80 	bl	b6a1c <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b4b1c:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b4b1e:	b10c      	cbz	r4, b4b24 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b4b20:	2301      	movs	r3, #1
   b4b22:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b4b24:	2100      	movs	r1, #0
   b4b26:	2001      	movs	r0, #1
   b4b28:	f001 ff60 	bl	b69ec <os_thread_scheduling>
            }
        }
        if (t) {
   b4b2c:	b12c      	cbz	r4, b4b3a <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b4b2e:	6823      	ldr	r3, [r4, #0]
   b4b30:	4620      	mov	r0, r4
   b4b32:	689b      	ldr	r3, [r3, #8]
   b4b34:	4798      	blx	r3
            t->running = false;
   b4b36:	2300      	movs	r3, #0
   b4b38:	7123      	strb	r3, [r4, #4]
        }
    }
   b4b3a:	b002      	add	sp, #8
   b4b3c:	bd10      	pop	{r4, pc}

000b4b3e <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b4b3e:	2a01      	cmp	r2, #1
   b4b40:	d102      	bne.n	b4b48 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4b42:	6001      	str	r1, [r0, #0]
      }
   b4b44:	2000      	movs	r0, #0
   b4b46:	4770      	bx	lr
	  switch (__op)
   b4b48:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b4b4a:	bf04      	itt	eq
   b4b4c:	680b      	ldreq	r3, [r1, #0]
   b4b4e:	6003      	streq	r3, [r0, #0]
	      break;
   b4b50:	e7f8      	b.n	b4b44 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b4b52 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4b52:	6803      	ldr	r3, [r0, #0]
   b4b54:	4718      	bx	r3

000b4b56 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4b56:	b40e      	push	{r1, r2, r3}
   b4b58:	b503      	push	{r0, r1, lr}
   b4b5a:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b4b5c:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4b5e:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4b62:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4b64:	f002 fc7b 	bl	b745e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4b68:	b002      	add	sp, #8
   b4b6a:	f85d eb04 	ldr.w	lr, [sp], #4
   b4b6e:	b003      	add	sp, #12
   b4b70:	4770      	bx	lr
	...

000b4b74 <_Z8callbackPcPhj>:

void callback(char *topic, byte *payload, unsigned int length)
{
   b4b74:	b598      	push	{r3, r4, r7, lr}
  char p[length + 1];
   b4b76:	f102 0308 	add.w	r3, r2, #8
   b4b7a:	f023 0307 	bic.w	r3, r3, #7
{
   b4b7e:	af00      	add	r7, sp, #0
  char p[length + 1];
   b4b80:	ebad 0d03 	sub.w	sp, sp, r3
{
   b4b84:	4614      	mov	r4, r2
  memcpy(p, payload, length);
   b4b86:	4668      	mov	r0, sp
   b4b88:	f003 fc97 	bl	b84ba <memcpy>
  p[length] = NULL;
   b4b8c:	2300      	movs	r3, #0
   b4b8e:	f80d 3004 	strb.w	r3, [sp, r4]
  Serial.printf("%s", p);
   b4b92:	f003 f97b 	bl	b7e8c <_Z16_fetch_usbserialv>
   b4b96:	4916      	ldr	r1, [pc, #88]	; (b4bf0 <_Z8callbackPcPhj+0x7c>)
   b4b98:	466a      	mov	r2, sp
   b4b9a:	f7ff ffdc 	bl	b4b56 <_ZN5Print6printfEPKcz>
  Serial.println();
   b4b9e:	f003 f975 	bl	b7e8c <_Z16_fetch_usbserialv>
   b4ba2:	f002 fc32 	bl	b740a <_ZN5Print7printlnEv>

  // To parse an int
  float receivedFloat = atof(p);
   b4ba6:	4668      	mov	r0, sp
   b4ba8:	f003 fc84 	bl	b84b4 <atof>
   b4bac:	ec51 0b10 	vmov	r0, r1, d0
   b4bb0:	f7ff feac 	bl	b490c <__aeabi_d2f>
   b4bb4:	ee07 0a90 	vmov	s15, r0
  if(receivedFloat!=0.0&&receivedFloat!=1.0) {
   b4bb8:	eef5 7a40 	vcmp.f32	s15, #0.0
   b4bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4bc0:	d014      	beq.n	b4bec <_Z8callbackPcPhj+0x78>
   b4bc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   b4bc6:	eef4 7a47 	vcmp.f32	s15, s14
   b4bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4bce:	d00d      	beq.n	b4bec <_Z8callbackPcPhj+0x78>
    positions[recieving % 2] = receivedFloat;
   b4bd0:	4a08      	ldr	r2, [pc, #32]	; (b4bf4 <_Z8callbackPcPhj+0x80>)
   b4bd2:	4909      	ldr	r1, [pc, #36]	; (b4bf8 <_Z8callbackPcPhj+0x84>)
   b4bd4:	6813      	ldr	r3, [r2, #0]
   b4bd6:	2b00      	cmp	r3, #0
   b4bd8:	f003 0301 	and.w	r3, r3, #1
   b4bdc:	bfb8      	it	lt
   b4bde:	425b      	neglt	r3, r3
   b4be0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   b4be4:	6018      	str	r0, [r3, #0]
    recieving++;
   b4be6:	6813      	ldr	r3, [r2, #0]
   b4be8:	3301      	adds	r3, #1
   b4bea:	6013      	str	r3, [r2, #0]
  }
   b4bec:	46bd      	mov	sp, r7
   b4bee:	bd98      	pop	{r3, r4, r7, pc}
   b4bf0:	000ba3a5 	.word	0x000ba3a5
   b4bf4:	2003e698 	.word	0x2003e698
   b4bf8:	2003e690 	.word	0x2003e690

000b4bfc <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4bfc:	b510      	push	{r4, lr}
      if (_M_manager)
   b4bfe:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4c00:	4604      	mov	r4, r0
      if (_M_manager)
   b4c02:	b113      	cbz	r3, b4c0a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4c04:	2203      	movs	r2, #3
   b4c06:	4601      	mov	r1, r0
   b4c08:	4798      	blx	r3
    }
   b4c0a:	4620      	mov	r0, r4
   b4c0c:	bd10      	pop	{r4, pc}
	...

000b4c10 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b4c10:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4c12:	4b13      	ldr	r3, [pc, #76]	; (b4c60 <_ZN5TimerD1Ev+0x50>)
   b4c14:	6003      	str	r3, [r0, #0]
   b4c16:	4604      	mov	r4, r0
        if (handle) {
   b4c18:	6880      	ldr	r0, [r0, #8]
   b4c1a:	b1c8      	cbz	r0, b4c50 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4c1c:	2500      	movs	r5, #0
   b4c1e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b4c22:	e9cd 3500 	strd	r3, r5, [sp]
   b4c26:	2102      	movs	r1, #2
   b4c28:	462b      	mov	r3, r5
   b4c2a:	462a      	mov	r2, r5
   b4c2c:	f001 fefe 	bl	b6a2c <os_timer_change>
            os_timer_set_id(handle, nullptr);
   b4c30:	68a0      	ldr	r0, [r4, #8]
   b4c32:	4629      	mov	r1, r5
   b4c34:	f001 ff2a 	bl	b6a8c <os_timer_set_id>
            while (running) {
   b4c38:	7923      	ldrb	r3, [r4, #4]
   b4c3a:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b4c3e:	b113      	cbz	r3, b4c46 <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   b4c40:	f001 fecc 	bl	b69dc <os_thread_yield>
            while (running) {
   b4c44:	e7f8      	b.n	b4c38 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   b4c46:	68a0      	ldr	r0, [r4, #8]
   b4c48:	4629      	mov	r1, r5
   b4c4a:	f001 fedf 	bl	b6a0c <os_timer_destroy>
            handle = nullptr;
   b4c4e:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b4c50:	f104 000c 	add.w	r0, r4, #12
   b4c54:	f7ff ffd2 	bl	b4bfc <_ZNSt14_Function_baseD1Ev>
    }
   b4c58:	4620      	mov	r0, r4
   b4c5a:	b003      	add	sp, #12
   b4c5c:	bd30      	pop	{r4, r5, pc}
   b4c5e:	bf00      	nop
   b4c60:	000ba3ec 	.word	0x000ba3ec

000b4c64 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b4c64:	b510      	push	{r4, lr}
   b4c66:	4604      	mov	r4, r0
    }
   b4c68:	f7ff ffd2 	bl	b4c10 <_ZN5TimerD1Ev>
   b4c6c:	4620      	mov	r0, r4
   b4c6e:	211c      	movs	r1, #28
   b4c70:	f7ff ff25 	bl	b4abe <_ZdlPvj>
   b4c74:	4620      	mov	r0, r4
   b4c76:	bd10      	pop	{r4, pc}

000b4c78 <setup>:
{
   b4c78:	b513      	push	{r0, r1, r4, lr}
  display.setup();
   b4c7a:	4c19      	ldr	r4, [pc, #100]	; (b4ce0 <setup+0x68>)
  Serial.begin(9600);
   b4c7c:	f003 f906 	bl	b7e8c <_Z16_fetch_usbserialv>
   b4c80:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4c84:	f003 f8f6 	bl	b7e74 <_ZN9USBSerial5beginEl>
  display.setup();
   b4c88:	4620      	mov	r0, r4
   b4c8a:	f001 fe65 	bl	b6958 <_ZN16OledWingAdafruit5setupEv>
  display.clearDisplay();
   b4c8e:	4620      	mov	r0, r4
   b4c90:	f000 fe7e 	bl	b5990 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   b4c94:	4620      	mov	r0, r4
   b4c96:	f001 f8e9 	bl	b5e6c <_ZN16Adafruit_SSD13067displayEv>
  display.setTextSize(1);
   b4c9a:	4620      	mov	r0, r4
   b4c9c:	2101      	movs	r1, #1
   b4c9e:	f000 fccc 	bl	b563a <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b4ca2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b4ca6:	6163      	str	r3, [r4, #20]
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4ca8:	4c0e      	ldr	r4, [pc, #56]	; (b4ce4 <setup+0x6c>)
  client.subscribe("Iot2023");
   b4caa:	490f      	ldr	r1, [pc, #60]	; (b4ce8 <setup+0x70>)
   b4cac:	480f      	ldr	r0, [pc, #60]	; (b4cec <setup+0x74>)
   b4cae:	f001 fe08 	bl	b68c2 <_ZN4MQTT9subscribeEPKc>
   b4cb2:	68a0      	ldr	r0, [r4, #8]
   b4cb4:	b130      	cbz	r0, b4cc4 <setup+0x4c>
   b4cb6:	2300      	movs	r3, #0
   b4cb8:	e9cd 3300 	strd	r3, r3, [sp]
   b4cbc:	461a      	mov	r2, r3
   b4cbe:	2102      	movs	r1, #2
   b4cc0:	f001 feb4 	bl	b6a2c <os_timer_change>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b4cc4:	68a0      	ldr	r0, [r4, #8]
   b4cc6:	b140      	cbz	r0, b4cda <setup+0x62>
   b4cc8:	2300      	movs	r3, #0
   b4cca:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   b4cce:	e9cd 2300 	strd	r2, r3, [sp]
   b4cd2:	4619      	mov	r1, r3
   b4cd4:	461a      	mov	r2, r3
   b4cd6:	f001 fea9 	bl	b6a2c <os_timer_change>
}
   b4cda:	b002      	add	sp, #8
   b4cdc:	bd10      	pop	{r4, pc}
   b4cde:	bf00      	nop
   b4ce0:	2003e61c 	.word	0x2003e61c
   b4ce4:	2003e69c 	.word	0x2003e69c
   b4ce8:	000ba3a8 	.word	0x000ba3a8
   b4cec:	2003e5bc 	.word	0x2003e5bc

000b4cf0 <loop>:
{
   b4cf0:	b510      	push	{r4, lr}
  display.loop();
   b4cf2:	4c25      	ldr	r4, [pc, #148]	; (b4d88 <loop+0x98>)
{
   b4cf4:	b088      	sub	sp, #32
  display.loop();
   b4cf6:	4620      	mov	r0, r4
   b4cf8:	f001 fe57 	bl	b69aa <_ZN16OledWingAdafruit4loopEv>
  display.clearDisplay();
   b4cfc:	4620      	mov	r0, r4
   b4cfe:	f000 fe47 	bl	b5990 <_ZN16Adafruit_SSD130612clearDisplayEv>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b4d02:	2300      	movs	r3, #0
  if (client.isConnected())
   b4d04:	4821      	ldr	r0, [pc, #132]	; (b4d8c <loop+0x9c>)
   b4d06:	6123      	str	r3, [r4, #16]
   b4d08:	f001 fabc 	bl	b6284 <_ZN4MQTT11isConnectedEv>
   b4d0c:	2800      	cmp	r0, #0
   b4d0e:	d02b      	beq.n	b4d68 <loop+0x78>
    client.loop();
   b4d10:	481e      	ldr	r0, [pc, #120]	; (b4d8c <loop+0x9c>)
   b4d12:	f001 fc8e 	bl	b6632 <_ZN4MQTT4loopEv>
  display.printf("Latitude: %.4f\nLongitude: %.4f", positions[0], positions[1]);
   b4d16:	4b1e      	ldr	r3, [pc, #120]	; (b4d90 <loop+0xa0>)
   b4d18:	6818      	ldr	r0, [r3, #0]
   b4d1a:	685c      	ldr	r4, [r3, #4]
   b4d1c:	f7ff fae4 	bl	b42e8 <__aeabi_f2d>
   b4d20:	4602      	mov	r2, r0
   b4d22:	460b      	mov	r3, r1
   b4d24:	4620      	mov	r0, r4
   b4d26:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b4d2a:	f7ff fadd 	bl	b42e8 <__aeabi_f2d>
  if(once) {
   b4d2e:	4c19      	ldr	r4, [pc, #100]	; (b4d94 <loop+0xa4>)
  display.printf("Latitude: %.4f\nLongitude: %.4f", positions[0], positions[1]);
   b4d30:	e9cd 0100 	strd	r0, r1, [sp]
   b4d34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b4d38:	4917      	ldr	r1, [pc, #92]	; (b4d98 <loop+0xa8>)
   b4d3a:	4813      	ldr	r0, [pc, #76]	; (b4d88 <loop+0x98>)
   b4d3c:	f7ff ff0b 	bl	b4b56 <_ZN5Print6printfEPKcz>
  if(once) {
   b4d40:	7823      	ldrb	r3, [r4, #0]
   b4d42:	b15b      	cbz	r3, b4d5c <loop+0x6c>
    if(recieving%2==0) {
   b4d44:	4b15      	ldr	r3, [pc, #84]	; (b4d9c <loop+0xac>)
      client.publish("Iot2023", "1");
   b4d46:	4916      	ldr	r1, [pc, #88]	; (b4da0 <loop+0xb0>)
    if(recieving%2==0) {
   b4d48:	681b      	ldr	r3, [r3, #0]
      client.publish("Iot2023", "1");
   b4d4a:	4810      	ldr	r0, [pc, #64]	; (b4d8c <loop+0x9c>)
    if(recieving%2==0) {
   b4d4c:	07db      	lsls	r3, r3, #31
      client.publish("Iot2023", "0");
   b4d4e:	bf54      	ite	pl
   b4d50:	4a14      	ldrpl	r2, [pc, #80]	; (b4da4 <loop+0xb4>)
      client.publish("Iot2023", "1");
   b4d52:	4a15      	ldrmi	r2, [pc, #84]	; (b4da8 <loop+0xb8>)
   b4d54:	f001 fc11 	bl	b657a <_ZN4MQTT7publishEPKcS1_>
    once = false;
   b4d58:	2300      	movs	r3, #0
   b4d5a:	7023      	strb	r3, [r4, #0]
  display.display();
   b4d5c:	480a      	ldr	r0, [pc, #40]	; (b4d88 <loop+0x98>)
}
   b4d5e:	b008      	add	sp, #32
   b4d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  display.display();
   b4d64:	f001 b882 	b.w	b5e6c <_ZN16Adafruit_SSD13067displayEv>
    inline static SleepResult sleep(const hal_pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b4d68:	a804      	add	r0, sp, #16
   b4d6a:	f002 f87b 	bl	b6e64 <spark_deviceID>
    client.connect(System.deviceID());
   b4d6e:	9904      	ldr	r1, [sp, #16]
   b4d70:	4806      	ldr	r0, [pc, #24]	; (b4d8c <loop+0x9c>)
   b4d72:	f001 fb77 	bl	b6464 <_ZN4MQTT7connectEPKc>
   b4d76:	a804      	add	r0, sp, #16
   b4d78:	f002 fc5a 	bl	b7630 <_ZN6StringD1Ev>
    client.subscribe("Iot2023");
   b4d7c:	4908      	ldr	r1, [pc, #32]	; (b4da0 <loop+0xb0>)
   b4d7e:	4803      	ldr	r0, [pc, #12]	; (b4d8c <loop+0x9c>)
   b4d80:	f001 fd9f 	bl	b68c2 <_ZN4MQTT9subscribeEPKc>
   b4d84:	e7c7      	b.n	b4d16 <loop+0x26>
   b4d86:	bf00      	nop
   b4d88:	2003e61c 	.word	0x2003e61c
   b4d8c:	2003e5bc 	.word	0x2003e5bc
   b4d90:	2003e690 	.word	0x2003e690
   b4d94:	2003e68c 	.word	0x2003e68c
   b4d98:	000ba3b0 	.word	0x000ba3b0
   b4d9c:	2003e698 	.word	0x2003e698
   b4da0:	000ba3a8 	.word	0x000ba3a8
   b4da4:	000ba3cf 	.word	0x000ba3cf
   b4da8:	000ba3d1 	.word	0x000ba3d1

000b4dac <_GLOBAL__sub_I_Blynk>:
   b4dac:	b570      	push	{r4, r5, r6, lr}

class BlynkTransportParticle
{
public:
    BlynkTransportParticle()
        : domain(NULL), port(0)
   b4dae:	4d28      	ldr	r5, [pc, #160]	; (b4e50 <_GLOBAL__sub_I_Blynk+0xa4>)
   b4db0:	b088      	sub	sp, #32
   b4db2:	4628      	mov	r0, r5
   b4db4:	f002 ff9c 	bl	b7cf0 <_ZN9TCPClientC1Ev>
   b4db8:	f105 001c 	add.w	r0, r5, #28
   b4dbc:	f002 f9e8 	bl	b7190 <_ZN9IPAddressC1Ev>
        , lastActivityOut(0)
        , lastHeartbeat(0)
        , msgIdOut(0)
        , msgIdOutOverride(0)
        , nesting(0)
        , state(CONNECTING)
   b4dc0:	4b24      	ldr	r3, [pc, #144]	; (b4e54 <_GLOBAL__sub_I_Blynk+0xa8>)
OledWingAdafruit display;
   b4dc2:	4825      	ldr	r0, [pc, #148]	; (b4e58 <_GLOBAL__sub_I_Blynk+0xac>)
   b4dc4:	2400      	movs	r4, #0
   b4dc6:	e9c3 5400 	strd	r5, r4, [r3]
   b4dca:	e9c3 4402 	strd	r4, r4, [r3, #8]
   b4dce:	e9c3 4404 	strd	r4, r4, [r3, #16]
   b4dd2:	619c      	str	r4, [r3, #24]
   b4dd4:	839c      	strh	r4, [r3, #28]
   b4dd6:	636c      	str	r4, [r5, #52]	; 0x34
   b4dd8:	872c      	strh	r4, [r5, #56]	; 0x38
   b4dda:	2107      	movs	r1, #7
   b4ddc:	f001 fd8e 	bl	b68fc <_ZN16OledWingAdafruitC1Ei>
SYSTEM_THREAD(ENABLED);
   b4de0:	4621      	mov	r1, r4
   b4de2:	2001      	movs	r0, #1
   b4de4:	f002 f822 	bl	b6e2c <system_thread_set_state>
MQTT client("lab.thewcl.com", 1883, callback);
   b4de8:	4b1c      	ldr	r3, [pc, #112]	; (b4e5c <_GLOBAL__sub_I_Blynk+0xb0>)
   b4dea:	491d      	ldr	r1, [pc, #116]	; (b4e60 <_GLOBAL__sub_I_Blynk+0xb4>)
   b4dec:	9400      	str	r4, [sp, #0]
   b4dee:	f240 725b 	movw	r2, #1883	; 0x75b
   b4df2:	481c      	ldr	r0, [pc, #112]	; (b4e64 <_GLOBAL__sub_I_Blynk+0xb8>)
   b4df4:	f001 f96a 	bl	b60cc <_ZN4MQTTC1EPKctPFvPcPhjEb>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b4df8:	4b1b      	ldr	r3, [pc, #108]	; (b4e68 <_GLOBAL__sub_I_Blynk+0xbc>)
   b4dfa:	9304      	str	r3, [sp, #16]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4dfc:	ad04      	add	r5, sp, #16
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b4dfe:	4b1b      	ldr	r3, [pc, #108]	; (b4e6c <_GLOBAL__sub_I_Blynk+0xc0>)
   b4e00:	4a1b      	ldr	r2, [pc, #108]	; (b4e70 <_GLOBAL__sub_I_Blynk+0xc4>)
   b4e02:	601a      	str	r2, [r3, #0]
   b4e04:	e895 0003 	ldmia.w	r5, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4e08:	f103 020c 	add.w	r2, r3, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4e0c:	ae02      	add	r6, sp, #8
   b4e0e:	e886 0003 	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4e12:	e892 0003 	ldmia.w	r2, {r0, r1}
   b4e16:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4e1a:	e896 0003 	ldmia.w	r6, {r0, r1}
   b4e1e:	e882 0003 	stmia.w	r2, {r0, r1}
   b4e22:	4a14      	ldr	r2, [pc, #80]	; (b4e74 <_GLOBAL__sub_I_Blynk+0xc8>)
   b4e24:	615a      	str	r2, [r3, #20]
      __a = _GLIBCXX_MOVE(__b);
   b4e26:	699a      	ldr	r2, [r3, #24]
   b4e28:	9207      	str	r2, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
   b4e2a:	4a13      	ldr	r2, [pc, #76]	; (b4e78 <_GLOBAL__sub_I_Blynk+0xcc>)
   b4e2c:	619a      	str	r2, [r3, #24]
   b4e2e:	711c      	strb	r4, [r3, #4]
   b4e30:	609c      	str	r4, [r3, #8]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b4e32:	4a12      	ldr	r2, [pc, #72]	; (b4e7c <_GLOBAL__sub_I_Blynk+0xd0>)
      __a = _GLIBCXX_MOVE(__b);
   b4e34:	9406      	str	r4, [sp, #24]
   b4e36:	f242 7110 	movw	r1, #10000	; 0x2710
   b4e3a:	f103 0008 	add.w	r0, r3, #8
   b4e3e:	e9cd 4400 	strd	r4, r4, [sp]
   b4e42:	f001 fddb 	bl	b69fc <os_timer_create>
    class function<_Res(_ArgTypes...)>
   b4e46:	4628      	mov	r0, r5
   b4e48:	f7ff fed8 	bl	b4bfc <_ZNSt14_Function_baseD1Ev>
   b4e4c:	b008      	add	sp, #32
   b4e4e:	bd70      	pop	{r4, r5, r6, pc}
   b4e50:	2003e580 	.word	0x2003e580
   b4e54:	2003e560 	.word	0x2003e560
   b4e58:	2003e61c 	.word	0x2003e61c
   b4e5c:	000b4b75 	.word	0x000b4b75
   b4e60:	000ba3d3 	.word	0x000ba3d3
   b4e64:	2003e5bc 	.word	0x2003e5bc
   b4e68:	000b4aed 	.word	0x000b4aed
   b4e6c:	2003e69c 	.word	0x2003e69c
   b4e70:	000ba3ec 	.word	0x000ba3ec
   b4e74:	000b4b3f 	.word	0x000b4b3f
   b4e78:	000b4b53 	.word	0x000b4b53
   b4e7c:	000b4b05 	.word	0x000b4b05

000b4e80 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b4e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4e84:	b085      	sub	sp, #20
   b4e86:	461f      	mov	r7, r3
   b4e88:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b4e8c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b4e90:	eba8 0902 	sub.w	r9, r8, r2
   b4e94:	eba7 0a01 	sub.w	sl, r7, r1
   b4e98:	f1b9 0f00 	cmp.w	r9, #0
   b4e9c:	bfb8      	it	lt
   b4e9e:	f1c9 0900 	rsblt	r9, r9, #0
   b4ea2:	f1ba 0f00 	cmp.w	sl, #0
   b4ea6:	bfb8      	it	lt
   b4ea8:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b4eac:	45d1      	cmp	r9, sl
        uint16_t color) {
   b4eae:	4683      	mov	fp, r0
   b4eb0:	460c      	mov	r4, r1
   b4eb2:	4615      	mov	r5, r2
    if (steep) {
   b4eb4:	dd04      	ble.n	b4ec0 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b4eb6:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b4eb8:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b4eba:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b4ebc:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b4ebe:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b4ec0:	42bc      	cmp	r4, r7
   b4ec2:	dd05      	ble.n	b4ed0 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b4ec4:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b4ec6:	4645      	mov	r5, r8
   b4ec8:	4690      	mov	r8, r2
    if (x0 > x1) {
   b4eca:	4622      	mov	r2, r4
   b4ecc:	463c      	mov	r4, r7
   b4ece:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b4ed0:	1b3e      	subs	r6, r7, r4
   b4ed2:	b2b2      	uxth	r2, r6
   b4ed4:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b4ed6:	eba8 0205 	sub.w	r2, r8, r5
   b4eda:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b4ede:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b4ee2:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b4ee6:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b4eea:	4545      	cmp	r5, r8
   b4eec:	bfb4      	ite	lt
   b4eee:	2201      	movlt	r2, #1
   b4ef0:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
   b4ef4:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b4ef6:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b4ef8:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b4efa:	42bc      	cmp	r4, r7
   b4efc:	dc1c      	bgt.n	b4f38 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b4efe:	f8db 2000 	ldr.w	r2, [fp]
   b4f02:	9303      	str	r3, [sp, #12]
        if (steep) {
   b4f04:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b4f06:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b4f0a:	bfc7      	ittee	gt
   b4f0c:	4629      	movgt	r1, r5
   b4f0e:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b4f10:	462a      	movle	r2, r5
   b4f12:	4621      	movle	r1, r4
   b4f14:	4658      	mov	r0, fp
   b4f16:	47c0      	blx	r8
        }
        err -= dy;
   b4f18:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b4f1a:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b4f1c:	1ab6      	subs	r6, r6, r2
   b4f1e:	b2b1      	uxth	r1, r6
   b4f20:	b236      	sxth	r6, r6
        if (err < 0) {
   b4f22:	2e00      	cmp	r6, #0
   b4f24:	da05      	bge.n	b4f32 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b4f26:	9a02      	ldr	r2, [sp, #8]
   b4f28:	4415      	add	r5, r2
            err += dx;
   b4f2a:	9a00      	ldr	r2, [sp, #0]
   b4f2c:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b4f2e:	b22d      	sxth	r5, r5
            err += dx;
   b4f30:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b4f32:	3401      	adds	r4, #1
   b4f34:	b224      	sxth	r4, r4
   b4f36:	e7e0      	b.n	b4efa <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b4f38:	b005      	add	sp, #20
   b4f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b4f3e <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b4f3e:	4770      	bx	lr

000b4f40 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b4f40:	b410      	push	{r4}
    drawPixel(x, y, color);
   b4f42:	6804      	ldr	r4, [r0, #0]
   b4f44:	6924      	ldr	r4, [r4, #16]
   b4f46:	46a4      	mov	ip, r4
}
   b4f48:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b4f4c:	4760      	bx	ip

000b4f4e <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b4f4e:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b4f50:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b4f52:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b4f56:	9502      	str	r5, [sp, #8]
   b4f58:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b4f5a:	46a4      	mov	ip, r4
}
   b4f5c:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b4f5e:	4760      	bx	ip

000b4f60 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b4f60:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b4f62:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b4f64:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b4f68:	9502      	str	r5, [sp, #8]
   b4f6a:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b4f6c:	46a4      	mov	ip, r4
}
   b4f6e:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b4f70:	4760      	bx	ip

000b4f72 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b4f72:	b470      	push	{r4, r5, r6}
   b4f74:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b4f78:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b4f7c:	6804      	ldr	r4, [r0, #0]
   b4f7e:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b4f82:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b4f84:	46a4      	mov	ip, r4
}
   b4f86:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b4f88:	4760      	bx	ip

000b4f8a <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b4f8a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4f8e:	461c      	mov	r4, r3
    startWrite();
   b4f90:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b4f92:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b4f96:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b4f98:	4605      	mov	r5, r0
   b4f9a:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b4f9c:	3c01      	subs	r4, #1
   b4f9e:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b4fa0:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b4fa2:	b224      	sxth	r4, r4
    startWrite();
   b4fa4:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b4fa6:	682b      	ldr	r3, [r5, #0]
   b4fa8:	f8cd 8004 	str.w	r8, [sp, #4]
   b4fac:	9400      	str	r4, [sp, #0]
   b4fae:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b4fb0:	4628      	mov	r0, r5
   b4fb2:	463b      	mov	r3, r7
   b4fb4:	4632      	mov	r2, r6
   b4fb6:	4639      	mov	r1, r7
   b4fb8:	47a0      	blx	r4
    endWrite();
   b4fba:	682b      	ldr	r3, [r5, #0]
   b4fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4fbe:	4628      	mov	r0, r5
}
   b4fc0:	b002      	add	sp, #8
   b4fc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b4fc6:	4718      	bx	r3

000b4fc8 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b4fc8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4fcc:	461d      	mov	r5, r3
    startWrite();
   b4fce:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b4fd0:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b4fd4:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b4fd6:	4604      	mov	r4, r0
   b4fd8:	4617      	mov	r7, r2
   b4fda:	460e      	mov	r6, r1
    startWrite();
   b4fdc:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b4fde:	e9cd 7800 	strd	r7, r8, [sp]
   b4fe2:	6822      	ldr	r2, [r4, #0]
   b4fe4:	1e6b      	subs	r3, r5, #1
   b4fe6:	4433      	add	r3, r6
   b4fe8:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b4fea:	4620      	mov	r0, r4
   b4fec:	b21b      	sxth	r3, r3
   b4fee:	463a      	mov	r2, r7
   b4ff0:	4631      	mov	r1, r6
   b4ff2:	47a8      	blx	r5
    endWrite();
   b4ff4:	6823      	ldr	r3, [r4, #0]
   b4ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4ff8:	4620      	mov	r0, r4
}
   b4ffa:	b002      	add	sp, #8
   b4ffc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b5000:	4718      	bx	r3

000b5002 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5002:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5006:	461e      	mov	r6, r3
    startWrite();
   b5008:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b500a:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b500e:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b5010:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b5014:	460c      	mov	r4, r1
   b5016:	4605      	mov	r5, r0
   b5018:	4617      	mov	r7, r2
    startWrite();
   b501a:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b501c:	4426      	add	r6, r4
   b501e:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b5020:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b5022:	da0b      	bge.n	b503c <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b5024:	f8cd 8000 	str.w	r8, [sp]
   b5028:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b502c:	4621      	mov	r1, r4
   b502e:	464b      	mov	r3, r9
   b5030:	463a      	mov	r2, r7
   b5032:	4628      	mov	r0, r5
   b5034:	3401      	adds	r4, #1
   b5036:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b5038:	b224      	sxth	r4, r4
   b503a:	e7f0      	b.n	b501e <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b503c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b503e:	4628      	mov	r0, r5
}
   b5040:	b002      	add	sp, #8
   b5042:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b5046:	4718      	bx	r3

000b5048 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b5048:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b504a:	6802      	ldr	r2, [r0, #0]
   b504c:	9101      	str	r1, [sp, #4]
   b504e:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b5052:	9100      	str	r1, [sp, #0]
   b5054:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b5056:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b505a:	2200      	movs	r2, #0
   b505c:	4611      	mov	r1, r2
   b505e:	47a0      	blx	r4
}
   b5060:	b002      	add	sp, #8
   b5062:	bd10      	pop	{r4, pc}

000b5064 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b5064:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b5068:	4299      	cmp	r1, r3
        uint16_t color) {
   b506a:	4616      	mov	r6, r2
   b506c:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b5070:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5074:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b5076:	4680      	mov	r8, r0
   b5078:	460d      	mov	r5, r1
   b507a:	461c      	mov	r4, r3
    if(x0 == x1){
   b507c:	d113      	bne.n	b50a6 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b507e:	42be      	cmp	r6, r7
   b5080:	bfc8      	it	gt
   b5082:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5084:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b5088:	bfc4      	itt	gt
   b508a:	463e      	movgt	r6, r7
   b508c:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b508e:	1c7b      	adds	r3, r7, #1
   b5090:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b5092:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5094:	b21b      	sxth	r3, r3
   b5096:	4632      	mov	r2, r6
   b5098:	4629      	mov	r1, r5
   b509a:	4640      	mov	r0, r8
   b509c:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b509e:	b003      	add	sp, #12
   b50a0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b50a4:	4760      	bx	ip
    } else if(y0 == y1){
   b50a6:	42be      	cmp	r6, r7
   b50a8:	d10a      	bne.n	b50c0 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b50aa:	4299      	cmp	r1, r3
   b50ac:	bfc2      	ittt	gt
   b50ae:	460b      	movgt	r3, r1
   b50b0:	4625      	movgt	r5, r4
   b50b2:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b50b4:	1c63      	adds	r3, r4, #1
   b50b6:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b50ba:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b50bc:	1b5b      	subs	r3, r3, r5
   b50be:	e7e9      	b.n	b5094 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b50c0:	6953      	ldr	r3, [r2, #20]
   b50c2:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b50c4:	e9cd 7900 	strd	r7, r9, [sp]
   b50c8:	f8d8 3000 	ldr.w	r3, [r8]
   b50cc:	4640      	mov	r0, r8
   b50ce:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b50d0:	4632      	mov	r2, r6
   b50d2:	4623      	mov	r3, r4
   b50d4:	4629      	mov	r1, r5
   b50d6:	47b8      	blx	r7
        endWrite();
   b50d8:	f8d8 3000 	ldr.w	r3, [r8]
   b50dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b50de:	4640      	mov	r0, r8
}
   b50e0:	b003      	add	sp, #12
   b50e2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b50e6:	4718      	bx	r3

000b50e8 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b50e8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b50ec:	461d      	mov	r5, r3
    startWrite();
   b50ee:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b50f0:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b50f4:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b50f6:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b50fa:	4604      	mov	r4, r0
   b50fc:	460f      	mov	r7, r1
   b50fe:	4616      	mov	r6, r2
    startWrite();
   b5100:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b5102:	6823      	ldr	r3, [r4, #0]
   b5104:	f8cd 8000 	str.w	r8, [sp]
   b5108:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b510c:	4632      	mov	r2, r6
   b510e:	462b      	mov	r3, r5
   b5110:	4639      	mov	r1, r7
   b5112:	4620      	mov	r0, r4
   b5114:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b5116:	6823      	ldr	r3, [r4, #0]
   b5118:	f8cd 8000 	str.w	r8, [sp]
   b511c:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b5120:	4432      	add	r2, r6
   b5122:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b5126:	4639      	mov	r1, r7
   b5128:	462b      	mov	r3, r5
   b512a:	4620      	mov	r0, r4
   b512c:	b212      	sxth	r2, r2
   b512e:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b5130:	6823      	ldr	r3, [r4, #0]
   b5132:	f8cd 8000 	str.w	r8, [sp]
   b5136:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b513a:	4632      	mov	r2, r6
   b513c:	464b      	mov	r3, r9
   b513e:	4639      	mov	r1, r7
   b5140:	4620      	mov	r0, r4
   b5142:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b5144:	1e6b      	subs	r3, r5, #1
   b5146:	19d9      	adds	r1, r3, r7
   b5148:	6823      	ldr	r3, [r4, #0]
   b514a:	f8cd 8000 	str.w	r8, [sp]
   b514e:	6a1d      	ldr	r5, [r3, #32]
   b5150:	4620      	mov	r0, r4
   b5152:	464b      	mov	r3, r9
   b5154:	4632      	mov	r2, r6
   b5156:	b209      	sxth	r1, r1
   b5158:	47a8      	blx	r5
    endWrite();
   b515a:	6823      	ldr	r3, [r4, #0]
   b515c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b515e:	4620      	mov	r0, r4
}
   b5160:	b002      	add	sp, #8
   b5162:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b5166:	4718      	bx	r3

000b5168 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b5168:	4770      	bx	lr

000b516a <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b516a:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b516e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b5172:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b5174:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b5176:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b517a:	bf59      	ittee	pl
   b517c:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b517e:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b5180:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b5182:	81c3      	strhmi	r3, [r0, #14]
}
   b5184:	4770      	bx	lr
	...

000b5188 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b5188:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b518a:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b518c:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b518e:	4a07      	ldr	r2, [pc, #28]	; (b51ac <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b5190:	4d07      	ldr	r5, [pc, #28]	; (b51b0 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b5192:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b5194:	2400      	movs	r4, #0
    _width    = WIDTH;
   b5196:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b5198:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b519c:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b51a0:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b51a2:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b51a4:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b51a6:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b51a8:	6204      	str	r4, [r0, #32]
}
   b51aa:	bd30      	pop	{r4, r5, pc}
   b51ac:	01000101 	.word	0x01000101
   b51b0:	000ba900 	.word	0x000ba900

000b51b4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b51b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b51b8:	b089      	sub	sp, #36	; 0x24
   b51ba:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b51be:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b51c0:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b51c4:	9304      	str	r3, [sp, #16]
   b51c6:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b51ca:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b51cc:	9305      	str	r3, [sp, #20]
   b51ce:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b51d2:	4604      	mov	r4, r0
    startWrite();
   b51d4:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b51d6:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b51da:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b51de:	bf48      	it	mi
   b51e0:	f108 020e 	addmi.w	r2, r8, #14
   b51e4:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b51e8:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b51ea:	4635      	mov	r5, r6
   b51ec:	9b03      	ldr	r3, [sp, #12]
   b51ee:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b51f0:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b51f4:	189a      	adds	r2, r3, r2
   b51f6:	9b05      	ldr	r3, [sp, #20]
   b51f8:	428b      	cmp	r3, r1
   b51fa:	b212      	sxth	r2, r2
   b51fc:	dd27      	ble.n	b524e <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b51fe:	9b04      	ldr	r3, [sp, #16]
   b5200:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b5202:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5206:	9306      	str	r3, [sp, #24]
   b5208:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b520c:	4580      	cmp	r8, r0
   b520e:	fa1f f189 	uxth.w	r1, r9
   b5212:	dd17      	ble.n	b5244 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b5214:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5216:	bf05      	ittet	eq
   b5218:	9b06      	ldreq	r3, [sp, #24]
   b521a:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b521c:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b521e:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b5220:	bf18      	it	ne
   b5222:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b5224:	062b      	lsls	r3, r5, #24
   b5226:	d50a      	bpl.n	b523e <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b5228:	9b02      	ldr	r3, [sp, #8]
   b522a:	6820      	ldr	r0, [r4, #0]
   b522c:	9207      	str	r2, [sp, #28]
   b522e:	4419      	add	r1, r3
   b5230:	6983      	ldr	r3, [r0, #24]
   b5232:	b209      	sxth	r1, r1
   b5234:	461f      	mov	r7, r3
   b5236:	4620      	mov	r0, r4
   b5238:	4653      	mov	r3, sl
   b523a:	47b8      	blx	r7
   b523c:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b523e:	f109 0901 	add.w	r9, r9, #1
   b5242:	e7e1      	b.n	b5208 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b5244:	9b01      	ldr	r3, [sp, #4]
   b5246:	3301      	adds	r3, #1
   b5248:	9301      	str	r3, [sp, #4]
   b524a:	445e      	add	r6, fp
   b524c:	e7ce      	b.n	b51ec <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b524e:	6823      	ldr	r3, [r4, #0]
   b5250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5252:	4620      	mov	r0, r4
}
   b5254:	b009      	add	sp, #36	; 0x24
   b5256:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b525a:	4718      	bx	r3

000b525c <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b525c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5260:	ed2d 8b02 	vpush	{d8}
   b5264:	b091      	sub	sp, #68	; 0x44
   b5266:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b5268:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b526a:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b526e:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b5272:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b5276:	9103      	str	r1, [sp, #12]
   b5278:	461f      	mov	r7, r3
   b527a:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b527e:	9304      	str	r3, [sp, #16]
   b5280:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b5282:	2a00      	cmp	r2, #0
   b5284:	f040 80c5 	bne.w	b5412 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b5288:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b528c:	428b      	cmp	r3, r1
   b528e:	f340 814c 	ble.w	b552a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b5292:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b5296:	42b3      	cmp	r3, r6
   b5298:	f340 8147 	ble.w	b552a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b529c:	2306      	movs	r3, #6
   b529e:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b52a2:	2b00      	cmp	r3, #0
   b52a4:	f340 8141 	ble.w	b552a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b52a8:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b52ac:	2b00      	cmp	r3, #0
   b52ae:	f340 813c 	ble.w	b552a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b52b2:	7f03      	ldrb	r3, [r0, #28]
   b52b4:	b91b      	cbnz	r3, b52be <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b52b6:	2faf      	cmp	r7, #175	; 0xaf
   b52b8:	bf84      	itt	hi
   b52ba:	3701      	addhi	r7, #1
   b52bc:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b52be:	f8db 3000 	ldr.w	r3, [fp]
   b52c2:	4658      	mov	r0, fp
   b52c4:	695b      	ldr	r3, [r3, #20]
   b52c6:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b52c8:	2205      	movs	r2, #5
   b52ca:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b52cc:	2200      	movs	r2, #0
   b52ce:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b52d0:	4a98      	ldr	r2, [pc, #608]	; (b5534 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b52d2:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b52d6:	18d3      	adds	r3, r2, r3
   b52d8:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b52da:	b2b3      	uxth	r3, r6
   b52dc:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b52de:	9a05      	ldr	r2, [sp, #20]
   b52e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b52e2:	5c9b      	ldrb	r3, [r3, r2]
   b52e4:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b52e6:	b2ab      	uxth	r3, r5
   b52e8:	930b      	str	r3, [sp, #44]	; 0x2c
   b52ea:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b52ee:	9308      	str	r3, [sp, #32]
   b52f0:	9b03      	ldr	r3, [sp, #12]
   b52f2:	fb02 f905 	mul.w	r9, r2, r5
   b52f6:	fa19 f983 	uxtah	r9, r9, r3
   b52fa:	fa0f f389 	sxth.w	r3, r9
   b52fe:	ee08 3a10 	vmov	s16, r3
   b5302:	2308      	movs	r3, #8
   b5304:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b5306:	9b03      	ldr	r3, [sp, #12]
   b5308:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b530c:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b5310:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b5314:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b5316:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b531a:	07d2      	lsls	r2, r2, #31
   b531c:	d552      	bpl.n	b53c4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b531e:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b5320:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b5324:	d13e      	bne.n	b53a4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b5326:	2c01      	cmp	r4, #1
   b5328:	d13c      	bne.n	b53a4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b532a:	699b      	ldr	r3, [r3, #24]
   b532c:	9906      	ldr	r1, [sp, #24]
   b532e:	461f      	mov	r7, r3
   b5330:	9b04      	ldr	r3, [sp, #16]
   b5332:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b5334:	b212      	sxth	r2, r2
   b5336:	4651      	mov	r1, sl
   b5338:	4658      	mov	r0, fp
   b533a:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b533c:	f109 0301 	add.w	r3, r9, #1
   b5340:	fa4f f983 	sxtb.w	r9, r3
   b5344:	9b07      	ldr	r3, [sp, #28]
   b5346:	085b      	lsrs	r3, r3, #1
   b5348:	9307      	str	r3, [sp, #28]
   b534a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b534c:	3b01      	subs	r3, #1
   b534e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5352:	930a      	str	r3, [sp, #40]	; 0x28
   b5354:	d1de      	bne.n	b5314 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b5356:	9f05      	ldr	r7, [sp, #20]
   b5358:	3701      	adds	r7, #1
   b535a:	b27b      	sxtb	r3, r7
   b535c:	9305      	str	r3, [sp, #20]
   b535e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5360:	3b01      	subs	r3, #1
   b5362:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5366:	9309      	str	r3, [sp, #36]	; 0x24
   b5368:	d1b9      	bne.n	b52de <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b536a:	9b04      	ldr	r3, [sp, #16]
   b536c:	4543      	cmp	r3, r8
   b536e:	d00f      	beq.n	b5390 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b5370:	2d01      	cmp	r5, #1
   b5372:	f8db 3000 	ldr.w	r3, [fp]
   b5376:	d13b      	bne.n	b53f0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b5378:	2c01      	cmp	r4, #1
   b537a:	d139      	bne.n	b53f0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b537c:	9908      	ldr	r1, [sp, #32]
   b537e:	f8cd 8000 	str.w	r8, [sp]
   b5382:	3105      	adds	r1, #5
   b5384:	6a1c      	ldr	r4, [r3, #32]
   b5386:	4632      	mov	r2, r6
   b5388:	2308      	movs	r3, #8
   b538a:	b209      	sxth	r1, r1
   b538c:	4658      	mov	r0, fp
   b538e:	47a0      	blx	r4
        endWrite();
   b5390:	f8db 3000 	ldr.w	r3, [fp]
   b5394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5396:	4658      	mov	r0, fp
}
   b5398:	b011      	add	sp, #68	; 0x44
   b539a:	ecbd 8b02 	vpop	{d8}
   b539e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b53a2:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b53a4:	9906      	ldr	r1, [sp, #24]
   b53a6:	fb14 f202 	smulbb	r2, r4, r2
   b53aa:	440a      	add	r2, r1
   b53ac:	9904      	ldr	r1, [sp, #16]
   b53ae:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b53b0:	9400      	str	r4, [sp, #0]
   b53b2:	69db      	ldr	r3, [r3, #28]
   b53b4:	ee18 1a10 	vmov	r1, s16
   b53b8:	461f      	mov	r7, r3
   b53ba:	b212      	sxth	r2, r2
   b53bc:	462b      	mov	r3, r5
   b53be:	4658      	mov	r0, fp
   b53c0:	47b8      	blx	r7
   b53c2:	e7bb      	b.n	b533c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b53c4:	9a04      	ldr	r2, [sp, #16]
   b53c6:	4542      	cmp	r2, r8
   b53c8:	d0b8      	beq.n	b533c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b53ca:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b53cc:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b53d0:	d107      	bne.n	b53e2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b53d2:	2c01      	cmp	r4, #1
   b53d4:	d105      	bne.n	b53e2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b53d6:	699b      	ldr	r3, [r3, #24]
   b53d8:	9906      	ldr	r1, [sp, #24]
   b53da:	461f      	mov	r7, r3
   b53dc:	440a      	add	r2, r1
   b53de:	4643      	mov	r3, r8
   b53e0:	e7a8      	b.n	b5334 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b53e2:	9906      	ldr	r1, [sp, #24]
   b53e4:	f8cd 8004 	str.w	r8, [sp, #4]
   b53e8:	fb14 f202 	smulbb	r2, r4, r2
   b53ec:	440a      	add	r2, r1
   b53ee:	e7df      	b.n	b53b0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b53f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b53f2:	f8cd 8004 	str.w	r8, [sp, #4]
   b53f6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b53fa:	9a08      	ldr	r2, [sp, #32]
   b53fc:	00e4      	lsls	r4, r4, #3
   b53fe:	440a      	add	r2, r1
   b5400:	4611      	mov	r1, r2
   b5402:	9400      	str	r4, [sp, #0]
   b5404:	69dc      	ldr	r4, [r3, #28]
   b5406:	4632      	mov	r2, r6
   b5408:	462b      	mov	r3, r5
   b540a:	b209      	sxth	r1, r1
   b540c:	4658      	mov	r0, fp
   b540e:	47a0      	blx	r4
        endWrite();
   b5410:	e7be      	b.n	b5390 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b5412:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b5414:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b5416:	6812      	ldr	r2, [r2, #0]
   b5418:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b541a:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b541c:	b2ff      	uxtb	r7, r7
   b541e:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b5422:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b5426:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b5428:	789a      	ldrb	r2, [r3, #2]
   b542a:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b542c:	78da      	ldrb	r2, [r3, #3]
   b542e:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b5430:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b5432:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b5436:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b543a:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b543c:	d801      	bhi.n	b5442 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b543e:	2c01      	cmp	r4, #1
   b5440:	d957      	bls.n	b54f2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b5442:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b5446:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b5448:	fa0f f38a 	sxth.w	r3, sl
   b544c:	9307      	str	r3, [sp, #28]
        startWrite();
   b544e:	f8db 3000 	ldr.w	r3, [fp]
   b5452:	4658      	mov	r0, fp
   b5454:	695b      	ldr	r3, [r3, #20]
   b5456:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5458:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b545a:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b545e:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5460:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b5464:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b5466:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5468:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b546a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b546c:	429f      	cmp	r7, r3
   b546e:	d28f      	bcs.n	b5390 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5470:	9b07      	ldr	r3, [sp, #28]
   b5472:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b5474:	443b      	add	r3, r7
   b5476:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b547a:	2200      	movs	r2, #0
   b547c:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b547e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5480:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5482:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5486:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b548a:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b548e:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b5490:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b5492:	9905      	ldr	r1, [sp, #20]
   b5494:	4291      	cmp	r1, r2
   b5496:	d241      	bcs.n	b551c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b5498:	1c5a      	adds	r2, r3, #1
   b549a:	b2d2      	uxtb	r2, r2
   b549c:	075b      	lsls	r3, r3, #29
   b549e:	920d      	str	r2, [sp, #52]	; 0x34
   b54a0:	d107      	bne.n	b54b2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b54a2:	9b06      	ldr	r3, [sp, #24]
   b54a4:	9906      	ldr	r1, [sp, #24]
   b54a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b54a8:	3301      	adds	r3, #1
   b54aa:	b29b      	uxth	r3, r3
   b54ac:	f812 9001 	ldrb.w	r9, [r2, r1]
   b54b0:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b54b2:	f019 0f80 	tst.w	r9, #128	; 0x80
   b54b6:	d012      	beq.n	b54de <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b54b8:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b54ba:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b54be:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b54c2:	d11a      	bne.n	b54fa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b54c4:	2c01      	cmp	r4, #1
   b54c6:	d118      	bne.n	b54fa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b54c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b54ca:	699b      	ldr	r3, [r3, #24]
   b54cc:	4411      	add	r1, r2
   b54ce:	9a05      	ldr	r2, [sp, #20]
   b54d0:	4411      	add	r1, r2
   b54d2:	461e      	mov	r6, r3
   b54d4:	4652      	mov	r2, sl
   b54d6:	9b04      	ldr	r3, [sp, #16]
   b54d8:	b209      	sxth	r1, r1
   b54da:	4658      	mov	r0, fp
   b54dc:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b54de:	9e05      	ldr	r6, [sp, #20]
   b54e0:	3601      	adds	r6, #1
   b54e2:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b54e4:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b54e8:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b54ea:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b54ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b54f0:	e7ce      	b.n	b5490 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b54f2:	2300      	movs	r3, #0
   b54f4:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b54f8:	e7a9      	b.n	b544e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b54fa:	9805      	ldr	r0, [sp, #20]
   b54fc:	9a08      	ldr	r2, [sp, #32]
   b54fe:	4402      	add	r2, r0
   b5500:	fb02 1105 	mla	r1, r2, r5, r1
   b5504:	9a04      	ldr	r2, [sp, #16]
   b5506:	e9cd 4200 	strd	r4, r2, [sp]
   b550a:	69db      	ldr	r3, [r3, #28]
   b550c:	ee18 2a10 	vmov	r2, s16
   b5510:	461e      	mov	r6, r3
   b5512:	b209      	sxth	r1, r1
   b5514:	462b      	mov	r3, r5
   b5516:	4658      	mov	r0, fp
   b5518:	47b0      	blx	r6
   b551a:	e7e0      	b.n	b54de <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b551c:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b551e:	3701      	adds	r7, #1
   b5520:	4498      	add	r8, r3
   b5522:	fa5f f888 	uxtb.w	r8, r8
   b5526:	b2ff      	uxtb	r7, r7
   b5528:	e79f      	b.n	b546a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b552a:	b011      	add	sp, #68	; 0x44
   b552c:	ecbd 8b02 	vpop	{d8}
   b5530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5534:	000ba3f8 	.word	0x000ba3f8

000b5538 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b5538:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b553a:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b553c:	b085      	sub	sp, #20
   b553e:	4604      	mov	r4, r0
   b5540:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b5542:	2a00      	cmp	r2, #0
   b5544:	d134      	bne.n	b55b0 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b5546:	290a      	cmp	r1, #10
   b5548:	d108      	bne.n	b555c <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b554a:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b554c:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b554e:	7e42      	ldrb	r2, [r0, #25]
   b5550:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b5554:	8263      	strh	r3, [r4, #18]
}
   b5556:	2001      	movs	r0, #1
   b5558:	b005      	add	sp, #20
   b555a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b555c:	290d      	cmp	r1, #13
   b555e:	d0fa      	beq.n	b5556 <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b5560:	7ee1      	ldrb	r1, [r4, #27]
   b5562:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b5564:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b5566:	b171      	cbz	r1, b5586 <_ZN12Adafruit_GFX5writeEh+0x4e>
   b5568:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b556c:	2106      	movs	r1, #6
   b556e:	fb11 6100 	smlabb	r1, r1, r0, r6
   b5572:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b5576:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b5578:	bfc1      	itttt	gt
   b557a:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b557e:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b5580:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b5584:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b5586:	8ae2      	ldrh	r2, [r4, #22]
   b5588:	9201      	str	r2, [sp, #4]
   b558a:	8aa2      	ldrh	r2, [r4, #20]
   b558c:	9200      	str	r2, [sp, #0]
   b558e:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b5592:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b5596:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b559a:	4620      	mov	r0, r4
   b559c:	f7ff fe5e 	bl	b525c <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b55a0:	7e23      	ldrb	r3, [r4, #24]
   b55a2:	8a22      	ldrh	r2, [r4, #16]
   b55a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b55a8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b55ac:	8223      	strh	r3, [r4, #16]
   b55ae:	e7d2      	b.n	b5556 <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b55b0:	290a      	cmp	r1, #10
   b55b2:	d107      	bne.n	b55c4 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b55b4:	2300      	movs	r3, #0
   b55b6:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b55b8:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b55ba:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b55bc:	8a43      	ldrh	r3, [r0, #18]
   b55be:	fb01 3302 	mla	r3, r1, r2, r3
   b55c2:	e7c7      	b.n	b5554 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b55c4:	290d      	cmp	r1, #13
   b55c6:	d0c6      	beq.n	b5556 <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b55c8:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b55ca:	42a9      	cmp	r1, r5
   b55cc:	d3c3      	bcc.n	b5556 <_ZN12Adafruit_GFX5writeEh+0x1e>
   b55ce:	7a51      	ldrb	r1, [r2, #9]
   b55d0:	4299      	cmp	r1, r3
   b55d2:	d3c0      	bcc.n	b5556 <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b55d4:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b55d6:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b55d8:	b2ed      	uxtb	r5, r5
   b55da:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b55de:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b55e0:	b328      	cbz	r0, b562e <_ZN12Adafruit_GFX5writeEh+0xf6>
   b55e2:	78e9      	ldrb	r1, [r5, #3]
   b55e4:	b319      	cbz	r1, b562e <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b55e6:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b55e8:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b55ea:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b55ec:	b191      	cbz	r1, b5614 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b55ee:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b55f2:	4408      	add	r0, r1
   b55f4:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b55f8:	fb06 1100 	mla	r1, r6, r0, r1
   b55fc:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b5600:	4281      	cmp	r1, r0
   b5602:	dd07      	ble.n	b5614 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b5604:	2000      	movs	r0, #0
   b5606:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b5608:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b560c:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b560e:	fb02 1207 	mla	r2, r2, r7, r1
   b5612:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b5614:	8ae2      	ldrh	r2, [r4, #22]
   b5616:	9201      	str	r2, [sp, #4]
   b5618:	8aa2      	ldrh	r2, [r4, #20]
   b561a:	9200      	str	r2, [sp, #0]
   b561c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b5620:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b5624:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b5628:	4620      	mov	r0, r4
   b562a:	f7ff fe17 	bl	b525c <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b562e:	7929      	ldrb	r1, [r5, #4]
   b5630:	7e22      	ldrb	r2, [r4, #24]
   b5632:	8a23      	ldrh	r3, [r4, #16]
   b5634:	fb01 3302 	mla	r3, r1, r2, r3
   b5638:	e7b8      	b.n	b55ac <_ZN12Adafruit_GFX5writeEh+0x74>

000b563a <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b563a:	2901      	cmp	r1, #1
   b563c:	bf38      	it	cc
   b563e:	2101      	movcc	r1, #1
   b5640:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b5642:	7641      	strb	r1, [r0, #25]
}
   b5644:	4770      	bx	lr

000b5646 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b5646:	4770      	bx	lr

000b5648 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b5648:	b510      	push	{r4, lr}
  }
   b564a:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b564c:	4604      	mov	r4, r0
  }
   b564e:	f7ff fa36 	bl	b4abe <_ZdlPvj>
   b5652:	4620      	mov	r0, r4
   b5654:	bd10      	pop	{r4, pc}
	...

000b5658 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b5658:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b565a:	4604      	mov	r4, r0
   b565c:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b565e:	7922      	ldrb	r2, [r4, #4]
   b5660:	68a3      	ldr	r3, [r4, #8]
   b5662:	b132      	cbz	r2, b5672 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b5664:	b9a3      	cbnz	r3, b5690 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b5666:	490b      	ldr	r1, [pc, #44]	; (b5694 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b5668:	b002      	add	sp, #8
   b566a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b566e:	f001 bec5 	b.w	b73fc <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b5672:	4a09      	ldr	r2, [pc, #36]	; (b5698 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b5674:	7b26      	ldrb	r6, [r4, #12]
   b5676:	4d09      	ldr	r5, [pc, #36]	; (b569c <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b5678:	4909      	ldr	r1, [pc, #36]	; (b56a0 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b567a:	7b64      	ldrb	r4, [r4, #13]
   b567c:	2e01      	cmp	r6, #1
   b567e:	bf18      	it	ne
   b5680:	4629      	movne	r1, r5
   b5682:	e9cd 1400 	strd	r1, r4, [sp]
   b5686:	4907      	ldr	r1, [pc, #28]	; (b56a4 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b5688:	f7ff fa65 	bl	b4b56 <_ZN5Print6printfEPKcz>
  }
   b568c:	b002      	add	sp, #8
   b568e:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b5690:	4a05      	ldr	r2, [pc, #20]	; (b56a8 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b5692:	e7ef      	b.n	b5674 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b5694:	000ba961 	.word	0x000ba961
   b5698:	000ba958 	.word	0x000ba958
   b569c:	000ba95d 	.word	0x000ba95d
   b56a0:	000ba959 	.word	0x000ba959
   b56a4:	000ba977 	.word	0x000ba977
   b56a8:	000ba950 	.word	0x000ba950

000b56ac <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b56ac:	b510      	push	{r4, lr}
   b56ae:	4b04      	ldr	r3, [pc, #16]	; (b56c0 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b56b0:	6003      	str	r3, [r0, #0]
   b56b2:	4604      	mov	r4, r0
  if(buffer) {
   b56b4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b56b6:	b108      	cbz	r0, b56bc <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b56b8:	f001 fc4c 	bl	b6f54 <free>
    buffer = NULL;
  }
}
   b56bc:	4620      	mov	r0, r4
   b56be:	bd10      	pop	{r4, pc}
   b56c0:	000bae50 	.word	0x000bae50

000b56c4 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b56c4:	b510      	push	{r4, lr}
   b56c6:	4604      	mov	r4, r0
}
   b56c8:	f7ff fff0 	bl	b56ac <_ZN16Adafruit_SSD1306D1Ev>
   b56cc:	4620      	mov	r0, r4
   b56ce:	2150      	movs	r1, #80	; 0x50
   b56d0:	f7ff f9f5 	bl	b4abe <_ZdlPvj>
   b56d4:	4620      	mov	r0, r4
   b56d6:	bd10      	pop	{r4, pc}

000b56d8 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b56d8:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b56da:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b56dc:	db4b      	blt.n	b5776 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b56de:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b56e2:	428c      	cmp	r4, r1
   b56e4:	dd47      	ble.n	b5776 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b56e6:	2a00      	cmp	r2, #0
   b56e8:	db45      	blt.n	b5776 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b56ea:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b56ee:	4294      	cmp	r4, r2
   b56f0:	dd41      	ble.n	b5776 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b56f2:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b56f4:	2c02      	cmp	r4, #2
   b56f6:	d01f      	beq.n	b5738 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b56f8:	2c03      	cmp	r4, #3
   b56fa:	d026      	beq.n	b574a <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b56fc:	2c01      	cmp	r4, #1
   b56fe:	d104      	bne.n	b570a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b5700:	8904      	ldrh	r4, [r0, #8]
   b5702:	43d2      	mvns	r2, r2
   b5704:	4414      	add	r4, r2
      break;
   b5706:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b5708:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b570a:	2b01      	cmp	r3, #1
   b570c:	d023      	beq.n	b5756 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b570e:	2b02      	cmp	r3, #2
   b5710:	d032      	beq.n	b5778 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b5712:	bb83      	cbnz	r3, b5776 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b5714:	2a00      	cmp	r2, #0
   b5716:	4613      	mov	r3, r2
   b5718:	8904      	ldrh	r4, [r0, #8]
   b571a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b571c:	bfb8      	it	lt
   b571e:	1dd3      	addlt	r3, r2, #7
   b5720:	10db      	asrs	r3, r3, #3
   b5722:	fb13 1104 	smlabb	r1, r3, r4, r1
   b5726:	f002 0207 	and.w	r2, r2, #7
   b572a:	2301      	movs	r3, #1
   b572c:	4093      	lsls	r3, r2
   b572e:	5c42      	ldrb	r2, [r0, r1]
   b5730:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b5734:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b5736:	e01e      	b.n	b5776 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b5738:	8904      	ldrh	r4, [r0, #8]
   b573a:	3c01      	subs	r4, #1
   b573c:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b573e:	8944      	ldrh	r4, [r0, #10]
   b5740:	43d2      	mvns	r2, r2
   b5742:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b5744:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b5746:	b212      	sxth	r2, r2
      break;
   b5748:	e7df      	b.n	b570a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b574a:	8944      	ldrh	r4, [r0, #10]
   b574c:	3c01      	subs	r4, #1
   b574e:	1a64      	subs	r4, r4, r1
      break;
   b5750:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b5752:	b222      	sxth	r2, r4
      break;
   b5754:	e7d9      	b.n	b570a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b5756:	2a00      	cmp	r2, #0
   b5758:	8904      	ldrh	r4, [r0, #8]
   b575a:	4613      	mov	r3, r2
   b575c:	bfb8      	it	lt
   b575e:	1dd3      	addlt	r3, r2, #7
   b5760:	10db      	asrs	r3, r3, #3
   b5762:	fb13 1104 	smlabb	r1, r3, r4, r1
   b5766:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b5768:	f002 0007 	and.w	r0, r2, #7
   b576c:	2201      	movs	r2, #1
   b576e:	4082      	lsls	r2, r0
   b5770:	5c58      	ldrb	r0, [r3, r1]
   b5772:	4302      	orrs	r2, r0
   b5774:	545a      	strb	r2, [r3, r1]
}
   b5776:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b5778:	2a00      	cmp	r2, #0
   b577a:	4613      	mov	r3, r2
   b577c:	8904      	ldrh	r4, [r0, #8]
   b577e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5780:	bfb8      	it	lt
   b5782:	1dd3      	addlt	r3, r2, #7
   b5784:	10db      	asrs	r3, r3, #3
   b5786:	fb13 1104 	smlabb	r1, r3, r4, r1
   b578a:	f002 0207 	and.w	r2, r2, #7
   b578e:	2301      	movs	r3, #1
   b5790:	fa03 f202 	lsl.w	r2, r3, r2
   b5794:	5c43      	ldrb	r3, [r0, r1]
   b5796:	405a      	eors	r2, r3
   b5798:	e7cc      	b.n	b5734 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b579c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   b579c:	b570      	push	{r4, r5, r6, lr}
   b579e:	4604      	mov	r4, r0
   b57a0:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   b57a2:	2600      	movs	r6, #0
   b57a4:	f7ff fcf0 	bl	b5188 <_ZN12Adafruit_GFXC1Ess>
   b57a8:	4b11      	ldr	r3, [pc, #68]	; (b57f0 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   b57aa:	6023      	str	r3, [r4, #0]
   b57ac:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   b57ae:	b915      	cbnz	r5, b57b6 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   b57b0:	f002 fd02 	bl	b81b8 <_Z19__fetch_global_Wirev>
   b57b4:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   b57b6:	23ff      	movs	r3, #255	; 0xff
   b57b8:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b57bc:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   b57c0:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   b57c4:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   b57c8:	4b0a      	ldr	r3, [pc, #40]	; (b57f4 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   b57ca:	63a3      	str	r3, [r4, #56]	; 0x38
   b57cc:	2301      	movs	r3, #1
   b57ce:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b57d2:	9b05      	ldr	r3, [sp, #20]
   b57d4:	64a3      	str	r3, [r4, #72]	; 0x48
   b57d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b57da:	9b06      	ldr	r3, [sp, #24]
   b57dc:	86a2      	strh	r2, [r4, #52]	; 0x34
   b57de:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   b57e2:	6426      	str	r6, [r4, #64]	; 0x40
   b57e4:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   b57e8:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   b57ea:	4620      	mov	r0, r4
   b57ec:	bd70      	pop	{r4, r5, r6, pc}
   b57ee:	bf00      	nop
   b57f0:	000bae50 	.word	0x000bae50
   b57f4:	000ba99c 	.word	0x000ba99c

000b57f8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b57f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b57fa:	4604      	mov	r4, r0
  if(wire) { // I2C
   b57fc:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b57fe:	460d      	mov	r5, r1
  if(wire) { // I2C
   b5800:	b190      	cbz	r0, b5828 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b5802:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5806:	f001 fc7f 	bl	b7108 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b580a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b580c:	6803      	ldr	r3, [r0, #0]
   b580e:	2100      	movs	r1, #0
   b5810:	689b      	ldr	r3, [r3, #8]
   b5812:	4798      	blx	r3
    WIRE_WRITE(c);
   b5814:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5816:	6803      	ldr	r3, [r0, #0]
   b5818:	4629      	mov	r1, r5
   b581a:	689b      	ldr	r3, [r3, #8]
   b581c:	4798      	blx	r3
    wire->endTransmission();
   b581e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b5820:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b5824:	f001 bc77 	b.w	b7116 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b5828:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b582c:	4601      	mov	r1, r0
   b582e:	b298      	uxth	r0, r3
   b5830:	f002 fc7b 	bl	b812a <digitalWrite>
  if(spi) {
   b5834:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5836:	b120      	cbz	r0, b5842 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b5838:	4629      	mov	r1, r5
}
   b583a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b583e:	f001 bef1 	b.w	b7624 <_ZN8SPIClass8transferEh>
   b5842:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5844:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b5846:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b584a:	ea05 0107 	and.w	r1, r5, r7
   b584e:	b280      	uxth	r0, r0
   b5850:	f002 fc6b 	bl	b812a <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b5854:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5858:	2101      	movs	r1, #1
   b585a:	b280      	uxth	r0, r0
   b585c:	f002 fc65 	bl	b812a <digitalWrite>
      digitalWrite(clkPin , LOW);
   b5860:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5864:	2100      	movs	r1, #0
   b5866:	b280      	uxth	r0, r0
   b5868:	f002 fc5f 	bl	b812a <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b586c:	3e01      	subs	r6, #1
   b586e:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b5872:	d1e8      	bne.n	b5846 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b5874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5876 <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b5876:	b538      	push	{r3, r4, r5, lr}
   b5878:	4604      	mov	r4, r0
  TRANSACTION_START
   b587a:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b587c:	460d      	mov	r5, r1
  TRANSACTION_START
   b587e:	b180      	cbz	r0, b58a2 <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b5880:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b5882:	f001 fc33 	bl	b70ec <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b5886:	2d00      	cmp	r5, #0
   b5888:	4620      	mov	r0, r4
   b588a:	bf14      	ite	ne
   b588c:	21a7      	movne	r1, #167	; 0xa7
   b588e:	21a6      	moveq	r1, #166	; 0xa6
   b5890:	f7ff ffb2 	bl	b57f8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b5894:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5896:	b188      	cbz	r0, b58bc <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b5898:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b589a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b589e:	f001 bc25 	b.w	b70ec <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b58a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b58a4:	b118      	cbz	r0, b58ae <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b58a6:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b58aa:	f001 fe4d 	bl	b7548 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b58ae:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b58b2:	2100      	movs	r1, #0
   b58b4:	b280      	uxth	r0, r0
   b58b6:	f002 fc38 	bl	b812a <digitalWrite>
   b58ba:	e7e4      	b.n	b5886 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b58bc:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b58c0:	2101      	movs	r1, #1
   b58c2:	b280      	uxth	r0, r0
   b58c4:	f002 fc31 	bl	b812a <digitalWrite>
   b58c8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b58ca:	b118      	cbz	r0, b58d4 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b58cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b58d0:	f001 be20 	b.w	b7514 <_ZN8SPIClass14endTransactionEv>
}
   b58d4:	bd38      	pop	{r3, r4, r5, pc}

000b58d6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b58d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b58da:	4604      	mov	r4, r0
  if(wire) { // I2C
   b58dc:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b58de:	460d      	mov	r5, r1
  if(wire) { // I2C
   b58e0:	188f      	adds	r7, r1, r2
   b58e2:	b340      	cbz	r0, b5936 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b58e4:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b58e8:	f001 fc0e 	bl	b7108 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b58ec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b58ee:	6803      	ldr	r3, [r0, #0]
   b58f0:	2100      	movs	r1, #0
   b58f2:	689b      	ldr	r3, [r3, #8]
   b58f4:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b58f6:	2601      	movs	r6, #1
    while(n--) {
   b58f8:	42af      	cmp	r7, r5
        wire->endTransmission();
   b58fa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b58fc:	d017      	beq.n	b592e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b58fe:	2e1f      	cmp	r6, #31
   b5900:	d90c      	bls.n	b591c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b5902:	f001 fc08 	bl	b7116 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b5906:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b590a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b590c:	f001 fbfc 	bl	b7108 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b5910:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5912:	6803      	ldr	r3, [r0, #0]
   b5914:	2100      	movs	r1, #0
   b5916:	689b      	ldr	r3, [r3, #8]
   b5918:	4798      	blx	r3
        bytesOut = 1;
   b591a:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b591c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b591e:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5922:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b5924:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b5926:	689b      	ldr	r3, [r3, #8]
   b5928:	4798      	blx	r3
      bytesOut++;
   b592a:	b2f6      	uxtb	r6, r6
    while(n--) {
   b592c:	e7e4      	b.n	b58f8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b592e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b5932:	f001 bbf0 	b.w	b7116 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b5936:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b593a:	4601      	mov	r1, r0
   b593c:	b298      	uxth	r0, r3
   b593e:	f002 fbf4 	bl	b812a <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b5942:	42bd      	cmp	r5, r7
   b5944:	d022      	beq.n	b598c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b5946:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b5948:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b594c:	b118      	cbz	r0, b5956 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b594e:	4649      	mov	r1, r9
   b5950:	f001 fe68 	bl	b7624 <_ZN8SPIClass8transferEh>
   b5954:	e7f5      	b.n	b5942 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b5956:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5958:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b595c:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5960:	ea09 0108 	and.w	r1, r9, r8
   b5964:	b280      	uxth	r0, r0
   b5966:	f002 fbe0 	bl	b812a <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b596a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b596e:	2101      	movs	r1, #1
   b5970:	b280      	uxth	r0, r0
   b5972:	f002 fbda 	bl	b812a <digitalWrite>
      digitalWrite(clkPin , LOW);
   b5976:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b597a:	2100      	movs	r1, #0
   b597c:	b280      	uxth	r0, r0
   b597e:	f002 fbd4 	bl	b812a <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5982:	3e01      	subs	r6, #1
   b5984:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b5988:	d1e8      	bne.n	b595c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b598a:	e7da      	b.n	b5942 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b598c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b5990 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b5990:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b5994:	1dda      	adds	r2, r3, #7
   b5996:	bf48      	it	mi
   b5998:	f103 020e 	addmi.w	r2, r3, #14
   b599c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b59a0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b59a2:	10d2      	asrs	r2, r2, #3
   b59a4:	435a      	muls	r2, r3
   b59a6:	2100      	movs	r1, #0
   b59a8:	f002 bd95 	b.w	b84d6 <memset>

000b59ac <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b59ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b59b0:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b59b2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b59b4:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b59b8:	4604      	mov	r4, r0
   b59ba:	460f      	mov	r7, r1
   b59bc:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b59be:	b1c3      	cbz	r3, b59f2 <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
   b59c0:	4620      	mov	r0, r4
   b59c2:	f7ff ffe5 	bl	b5990 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b59c6:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   b59ca:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b59ce:	2820      	cmp	r0, #32
   b59d0:	dc21      	bgt.n	b5a16 <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b59d2:	2320      	movs	r3, #32
   b59d4:	2201      	movs	r2, #1
   b59d6:	3820      	subs	r0, #32
   b59d8:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b59dc:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   b59e0:	2373      	movs	r3, #115	; 0x73
   b59e2:	3973      	subs	r1, #115	; 0x73
   b59e4:	9300      	str	r3, [sp, #0]
   b59e6:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b59ea:	4b89      	ldr	r3, [pc, #548]	; (b5c10 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b59ec:	f340 024f 	sbfx	r2, r0, #1, #16
   b59f0:	e021      	b.n	b5a36 <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b59f2:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b59f6:	1dd8      	adds	r0, r3, #7
   b59f8:	bf48      	it	mi
   b59fa:	f103 000e 	addmi.w	r0, r3, #14
   b59fe:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b5a02:	10c0      	asrs	r0, r0, #3
   b5a04:	4358      	muls	r0, r3
   b5a06:	f001 fa9d 	bl	b6f44 <malloc>
   b5a0a:	62e0      	str	r0, [r4, #44]	; 0x2c
   b5a0c:	2800      	cmp	r0, #0
   b5a0e:	d1d7      	bne.n	b59c0 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b5a10:	b004      	add	sp, #16
   b5a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   b5a16:	3840      	subs	r0, #64	; 0x40
   b5a18:	f3c0 32c0 	ubfx	r2, r0, #15, #1
   b5a1c:	fa02 f280 	sxtah	r2, r2, r0
   b5a20:	2340      	movs	r3, #64	; 0x40
   b5a22:	2001      	movs	r0, #1
   b5a24:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b5a28:	2352      	movs	r3, #82	; 0x52
   b5a2a:	3952      	subs	r1, #82	; 0x52
   b5a2c:	9300      	str	r3, [sp, #0]
   b5a2e:	4b79      	ldr	r3, [pc, #484]	; (b5c14 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b5a30:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b5a34:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b5a36:	4620      	mov	r0, r4
   b5a38:	f341 014f 	sbfx	r1, r1, #1, #16
   b5a3c:	f7ff fbba 	bl	b51b4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b5a40:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b5a42:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b5a46:	2800      	cmp	r0, #0
   b5a48:	d078      	beq.n	b5b3c <_ZN16Adafruit_SSD13065beginEhhbb+0x190>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b5a4a:	2d00      	cmp	r5, #0
   b5a4c:	d174      	bne.n	b5b38 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
   b5a4e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b5a52:	2b20      	cmp	r3, #32
   b5a54:	bf0c      	ite	eq
   b5a56:	253c      	moveq	r5, #60	; 0x3c
   b5a58:	253d      	movne	r5, #61	; 0x3d
   b5a5a:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b5a5e:	f1b8 0f00 	cmp.w	r8, #0
   b5a62:	d001      	beq.n	b5a68 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b5a64:	f001 fb46 	bl	b70f4 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b5a68:	b1fe      	cbz	r6, b5aaa <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
   b5a6a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5a6e:	2800      	cmp	r0, #0
   b5a70:	db1b      	blt.n	b5aaa <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
    pinMode(     rstPin, OUTPUT);
   b5a72:	2101      	movs	r1, #1
   b5a74:	b280      	uxth	r0, r0
   b5a76:	f002 fb47 	bl	b8108 <pinMode>
    digitalWrite(rstPin, HIGH);
   b5a7a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5a7e:	2101      	movs	r1, #1
   b5a80:	b280      	uxth	r0, r0
   b5a82:	f002 fb52 	bl	b812a <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b5a86:	2001      	movs	r0, #1
   b5a88:	f001 fa9c 	bl	b6fc4 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b5a8c:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5a90:	2100      	movs	r1, #0
   b5a92:	b280      	uxth	r0, r0
   b5a94:	f002 fb49 	bl	b812a <digitalWrite>
    delay(10);                  // Wait 10 ms
   b5a98:	200a      	movs	r0, #10
   b5a9a:	f001 fa93 	bl	b6fc4 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b5a9e:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5aa2:	2101      	movs	r1, #1
   b5aa4:	b280      	uxth	r0, r0
   b5aa6:	f002 fb40 	bl	b812a <digitalWrite>
  TRANSACTION_START
   b5aaa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5aac:	2800      	cmp	r0, #0
   b5aae:	d074      	beq.n	b5b9a <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b5ab0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b5ab2:	f001 fb1b 	bl	b70ec <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b5ab6:	2204      	movs	r2, #4
   b5ab8:	4957      	ldr	r1, [pc, #348]	; (b5c18 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b5aba:	4620      	mov	r0, r4
   b5abc:	f7ff ff0b 	bl	b58d6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b5ac0:	8961      	ldrh	r1, [r4, #10]
   b5ac2:	3901      	subs	r1, #1
   b5ac4:	b2c9      	uxtb	r1, r1
   b5ac6:	4620      	mov	r0, r4
   b5ac8:	f7ff fe96 	bl	b57f8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b5acc:	4953      	ldr	r1, [pc, #332]	; (b5c1c <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b5ace:	2204      	movs	r2, #4
   b5ad0:	4620      	mov	r0, r4
   b5ad2:	f7ff ff00 	bl	b58d6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b5ad6:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5ada:	2b01      	cmp	r3, #1
   b5adc:	bf0c      	ite	eq
   b5ade:	2110      	moveq	r1, #16
   b5ae0:	2114      	movne	r1, #20
   b5ae2:	4620      	mov	r0, r4
   b5ae4:	f7ff fe88 	bl	b57f8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b5ae8:	2204      	movs	r2, #4
   b5aea:	494d      	ldr	r1, [pc, #308]	; (b5c20 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b5aec:	4620      	mov	r0, r4
   b5aee:	f7ff fef2 	bl	b58d6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b5af2:	68a3      	ldr	r3, [r4, #8]
   b5af4:	4a4b      	ldr	r2, [pc, #300]	; (b5c24 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b5af6:	4293      	cmp	r3, r2
   b5af8:	d15c      	bne.n	b5bb4 <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    ssd1306_commandList(init4a, sizeof(init4a));
   b5afa:	494b      	ldr	r1, [pc, #300]	; (b5c28 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b5afc:	2204      	movs	r2, #4
   b5afe:	4620      	mov	r0, r4
   b5b00:	f7ff fee9 	bl	b58d6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b5b04:	21d9      	movs	r1, #217	; 0xd9
   b5b06:	4620      	mov	r0, r4
   b5b08:	f7ff fe76 	bl	b57f8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b5b0c:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5b10:	2b01      	cmp	r3, #1
   b5b12:	bf0c      	ite	eq
   b5b14:	2122      	moveq	r1, #34	; 0x22
   b5b16:	21f1      	movne	r1, #241	; 0xf1
   b5b18:	4620      	mov	r0, r4
   b5b1a:	f7ff fe6d 	bl	b57f8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b5b1e:	4620      	mov	r0, r4
   b5b20:	4942      	ldr	r1, [pc, #264]	; (b5c2c <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b5b22:	2206      	movs	r2, #6
   b5b24:	f7ff fed7 	bl	b58d6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b5b28:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5b2a:	2800      	cmp	r0, #0
   b5b2c:	d063      	beq.n	b5bf6 <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
   b5b2e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b5b30:	f001 fadc 	bl	b70ec <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b5b34:	2001      	movs	r0, #1
   b5b36:	e76b      	b.n	b5a10 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b5b38:	b26d      	sxtb	r5, r5
   b5b3a:	e78e      	b.n	b5a5a <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b5b3c:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b5b40:	2101      	movs	r1, #1
   b5b42:	b280      	uxth	r0, r0
   b5b44:	f002 fae0 	bl	b8108 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b5b48:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5b4c:	2101      	movs	r1, #1
   b5b4e:	b280      	uxth	r0, r0
   b5b50:	f002 fada 	bl	b8108 <pinMode>
    SSD1306_DESELECT
   b5b54:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5b58:	2101      	movs	r1, #1
   b5b5a:	b280      	uxth	r0, r0
   b5b5c:	f002 fae5 	bl	b812a <digitalWrite>
    if(spi) { // Hardware SPI
   b5b60:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b5b62:	b13d      	cbz	r5, b5b74 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c8>
      if(periphBegin) spi->begin();
   b5b64:	f1b8 0f00 	cmp.w	r8, #0
   b5b68:	f43f af7e 	beq.w	b5a68 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b5b6c:	4628      	mov	r0, r5
   b5b6e:	f001 fcbd 	bl	b74ec <_ZN8SPIClass5beginEv>
   b5b72:	e779      	b.n	b5a68 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b5b74:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5b78:	2101      	movs	r1, #1
   b5b7a:	b280      	uxth	r0, r0
   b5b7c:	f002 fac4 	bl	b8108 <pinMode>
      pinMode(clkPin , OUTPUT);
   b5b80:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5b84:	2101      	movs	r1, #1
   b5b86:	b280      	uxth	r0, r0
   b5b88:	f002 fabe 	bl	b8108 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b5b8c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5b90:	4629      	mov	r1, r5
   b5b92:	b280      	uxth	r0, r0
   b5b94:	f002 fac9 	bl	b812a <digitalWrite>
   b5b98:	e766      	b.n	b5a68 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
  TRANSACTION_START
   b5b9a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5b9c:	b118      	cbz	r0, b5ba6 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fa>
   b5b9e:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b5ba2:	f001 fcd1 	bl	b7548 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b5ba6:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5baa:	2100      	movs	r1, #0
   b5bac:	b280      	uxth	r0, r0
   b5bae:	f002 fabc 	bl	b812a <digitalWrite>
   b5bb2:	e780      	b.n	b5ab6 <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b5bb4:	4a1e      	ldr	r2, [pc, #120]	; (b5c30 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b5bb6:	4293      	cmp	r3, r2
   b5bb8:	d10e      	bne.n	b5bd8 <_ZN16Adafruit_SSD13065beginEhhbb+0x22c>
    ssd1306_commandList(init4b, sizeof(init4b));
   b5bba:	491e      	ldr	r1, [pc, #120]	; (b5c34 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   b5bbc:	2203      	movs	r2, #3
   b5bbe:	4620      	mov	r0, r4
   b5bc0:	f7ff fe89 	bl	b58d6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b5bc4:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5bc8:	2b01      	cmp	r3, #1
   b5bca:	bf0c      	ite	eq
   b5bcc:	219f      	moveq	r1, #159	; 0x9f
   b5bce:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b5bd0:	4620      	mov	r0, r4
   b5bd2:	f7ff fe11 	bl	b57f8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b5bd6:	e795      	b.n	b5b04 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b5bd8:	4a17      	ldr	r2, [pc, #92]	; (b5c38 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   b5bda:	4293      	cmp	r3, r2
   b5bdc:	d192      	bne.n	b5b04 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
    ssd1306_commandList(init4c, sizeof(init4c));
   b5bde:	4917      	ldr	r1, [pc, #92]	; (b5c3c <_ZN16Adafruit_SSD13065beginEhhbb+0x290>)
   b5be0:	2203      	movs	r2, #3
   b5be2:	4620      	mov	r0, r4
   b5be4:	f7ff fe77 	bl	b58d6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b5be8:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5bec:	2b01      	cmp	r3, #1
   b5bee:	bf0c      	ite	eq
   b5bf0:	2110      	moveq	r1, #16
   b5bf2:	21af      	movne	r1, #175	; 0xaf
   b5bf4:	e7ec      	b.n	b5bd0 <_ZN16Adafruit_SSD13065beginEhhbb+0x224>
  TRANSACTION_END
   b5bf6:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5bfa:	2101      	movs	r1, #1
   b5bfc:	b280      	uxth	r0, r0
   b5bfe:	f002 fa94 	bl	b812a <digitalWrite>
   b5c02:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5c04:	2800      	cmp	r0, #0
   b5c06:	d095      	beq.n	b5b34 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b5c08:	f001 fc84 	bl	b7514 <_ZN8SPIClass14endTransactionEv>
   b5c0c:	e792      	b.n	b5b34 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b5c0e:	bf00      	nop
   b5c10:	000bac68 	.word	0x000bac68
   b5c14:	000ba9a8 	.word	0x000ba9a8
   b5c18:	000baeb0 	.word	0x000baeb0
   b5c1c:	000baeb4 	.word	0x000baeb4
   b5c20:	000baeb8 	.word	0x000baeb8
   b5c24:	00200080 	.word	0x00200080
   b5c28:	000baec2 	.word	0x000baec2
   b5c2c:	000baebc 	.word	0x000baebc
   b5c30:	00400080 	.word	0x00400080
   b5c34:	000baec6 	.word	0x000baec6
   b5c38:	00100060 	.word	0x00100060
   b5c3c:	000baec9 	.word	0x000baec9

000b5c40 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5c40:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b5c42:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5c44:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b5c48:	db3d      	blt.n	b5cc6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5c4a:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b5c4e:	4294      	cmp	r4, r2
   b5c50:	dd39      	ble.n	b5cc6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b5c52:	2900      	cmp	r1, #0
      w += x;
   b5c54:	bfbe      	ittt	lt
   b5c56:	185b      	addlt	r3, r3, r1
   b5c58:	b21b      	sxthlt	r3, r3
      x  = 0;
   b5c5a:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b5c5c:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b5c60:	18ce      	adds	r6, r1, r3
   b5c62:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b5c64:	bfc4      	itt	gt
   b5c66:	1a63      	subgt	r3, r4, r1
   b5c68:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b5c6a:	2b00      	cmp	r3, #0
   b5c6c:	dd2b      	ble.n	b5cc6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b5c6e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5c70:	10d6      	asrs	r6, r2, #3
   b5c72:	fb14 1106 	smlabb	r1, r4, r6, r1
   b5c76:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b5c78:	f002 0007 	and.w	r0, r2, #7
   b5c7c:	2201      	movs	r2, #1
   b5c7e:	4082      	lsls	r2, r0
      switch(color) {
   b5c80:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b5c82:	b2d2      	uxtb	r2, r2
      switch(color) {
   b5c84:	d016      	beq.n	b5cb4 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b5c86:	2d02      	cmp	r5, #2
   b5c88:	d00b      	beq.n	b5ca2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b5c8a:	b9e5      	cbnz	r5, b5cc6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b5c8c:	43d2      	mvns	r2, r2
   b5c8e:	b2d2      	uxtb	r2, r2
   b5c90:	440b      	add	r3, r1
   b5c92:	4299      	cmp	r1, r3
   b5c94:	d017      	beq.n	b5cc6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5c96:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5c9a:	4010      	ands	r0, r2
   b5c9c:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5ca0:	e7f7      	b.n	b5c92 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b5ca2:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b5ca4:	4299      	cmp	r1, r3
   b5ca6:	d00e      	beq.n	b5cc6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5ca8:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5cac:	4050      	eors	r0, r2
   b5cae:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5cb2:	e7f7      	b.n	b5ca4 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b5cb4:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b5cb6:	4299      	cmp	r1, r3
   b5cb8:	d005      	beq.n	b5cc6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5cba:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5cbe:	4310      	orrs	r0, r2
   b5cc0:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5cc4:	e7f7      	b.n	b5cb6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b5cc6:	bd70      	pop	{r4, r5, r6, pc}

000b5cc8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b5cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b5cca:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b5ccc:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b5cd0:	db76      	blt.n	b5dc0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b5cd2:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b5cd6:	42b1      	cmp	r1, r6
   b5cd8:	da72      	bge.n	b5dc0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b5cda:	2a00      	cmp	r2, #0
      __h += __y;
   b5cdc:	bfbe      	ittt	lt
   b5cde:	189b      	addlt	r3, r3, r2
   b5ce0:	b21b      	sxthlt	r3, r3
      __y = 0;
   b5ce2:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b5ce4:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b5ce8:	18d7      	adds	r7, r2, r3
   b5cea:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b5cec:	bfc4      	itt	gt
   b5cee:	1aa3      	subgt	r3, r4, r2
   b5cf0:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b5cf2:	2b00      	cmp	r3, #0
   b5cf4:	dd64      	ble.n	b5dc0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b5cf6:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b5cfa:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b5cfc:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b5d00:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b5d04:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b5d06:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b5d0a:	d023      	beq.n	b5d54 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b5d0c:	f1c2 0208 	rsb	r2, r2, #8
   b5d10:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b5d12:	492d      	ldr	r1, [pc, #180]	; (b5dc8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b5d14:	4293      	cmp	r3, r2
   b5d16:	bf3c      	itt	cc
   b5d18:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b5d1c:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b5d20:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b5d22:	bf3c      	itt	cc
   b5d24:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b5d28:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b5d2c:	2d01      	cmp	r5, #1
   b5d2e:	d007      	beq.n	b5d40 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b5d30:	2d02      	cmp	r5, #2
   b5d32:	d02e      	beq.n	b5d92 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b5d34:	b94d      	cbnz	r5, b5d4a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b5d36:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5d3a:	ea2c 0101 	bic.w	r1, ip, r1
   b5d3e:	e003      	b.n	b5d48 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b5d40:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5d44:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b5d48:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b5d4a:	4293      	cmp	r3, r2
   b5d4c:	d338      	bcc.n	b5dc0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b5d4e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b5d52:	440c      	add	r4, r1
        h -= mod;
   b5d54:	1a9a      	subs	r2, r3, r2
   b5d56:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b5d58:	2a07      	cmp	r2, #7
   b5d5a:	d90e      	bls.n	b5d7a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b5d5c:	2d02      	cmp	r5, #2
   b5d5e:	d11d      	bne.n	b5d9c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b5d60:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b5d62:	7821      	ldrb	r1, [r4, #0]
   b5d64:	43c9      	mvns	r1, r1
   b5d66:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b5d68:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b5d6a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b5d6e:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b5d70:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b5d72:	440c      	add	r4, r1
            } while(h >= 8);
   b5d74:	d8f5      	bhi.n	b5d62 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b5d76:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b5d7a:	b30a      	cbz	r2, b5dc0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b5d7c:	4b13      	ldr	r3, [pc, #76]	; (b5dcc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b5d7e:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b5d80:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b5d82:	d01a      	beq.n	b5dba <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b5d84:	2d02      	cmp	r5, #2
   b5d86:	d01c      	beq.n	b5dc2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b5d88:	b9d5      	cbnz	r5, b5dc0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b5d8a:	7822      	ldrb	r2, [r4, #0]
   b5d8c:	ea22 0303 	bic.w	r3, r2, r3
   b5d90:	e015      	b.n	b5dbe <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b5d92:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5d96:	ea81 010c 	eor.w	r1, r1, ip
   b5d9a:	e7d5      	b.n	b5d48 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b5d9c:	1e29      	subs	r1, r5, #0
   b5d9e:	bf18      	it	ne
   b5da0:	2101      	movne	r1, #1
   b5da2:	4249      	negs	r1, r1
   b5da4:	b2c9      	uxtb	r1, r1
   b5da6:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b5da8:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b5daa:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b5dac:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b5db0:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b5db2:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b5db4:	4434      	add	r4, r6
            } while(h >= 8);
   b5db6:	d8f7      	bhi.n	b5da8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b5db8:	e7dd      	b.n	b5d76 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b5dba:	7822      	ldrb	r2, [r4, #0]
   b5dbc:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b5dbe:	7023      	strb	r3, [r4, #0]
}
   b5dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b5dc2:	7822      	ldrb	r2, [r4, #0]
   b5dc4:	4053      	eors	r3, r2
   b5dc6:	e7fa      	b.n	b5dbe <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b5dc8:	000baea0 	.word	0x000baea0
   b5dcc:	000baea8 	.word	0x000baea8

000b5dd0 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5dd0:	b470      	push	{r4, r5, r6}
   b5dd2:	4614      	mov	r4, r2
  switch(rotation) {
   b5dd4:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5dd6:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b5dda:	2a02      	cmp	r2, #2
   b5ddc:	d00d      	beq.n	b5dfa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b5dde:	2a03      	cmp	r2, #3
   b5de0:	d018      	beq.n	b5e14 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b5de2:	2a01      	cmp	r2, #1
   b5de4:	d111      	bne.n	b5e0a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b5de6:	8902      	ldrh	r2, [r0, #8]
   b5de8:	43e4      	mvns	r4, r4
   b5dea:	4414      	add	r4, r2
   b5dec:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b5dee:	9603      	str	r6, [sp, #12]
   b5df0:	460a      	mov	r2, r1
   b5df2:	4621      	mov	r1, r4
}
   b5df4:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b5df6:	f7ff bf67 	b.w	b5cc8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b5dfa:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b5dfc:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b5dfe:	43e4      	mvns	r4, r4
    x -= (w-1);
   b5e00:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b5e02:	4414      	add	r4, r2
    x -= (w-1);
   b5e04:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b5e06:	b224      	sxth	r4, r4
    x -= (w-1);
   b5e08:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b5e0a:	9603      	str	r6, [sp, #12]
   b5e0c:	4622      	mov	r2, r4
}
   b5e0e:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b5e10:	f7ff bf16 	b.w	b5c40 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b5e14:	8945      	ldrh	r5, [r0, #10]
   b5e16:	4419      	add	r1, r3
   b5e18:	1a69      	subs	r1, r5, r1
   b5e1a:	b209      	sxth	r1, r1
    break;
   b5e1c:	e7e7      	b.n	b5dee <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b5e1e <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b5e1e:	b430      	push	{r4, r5}
   b5e20:	4614      	mov	r4, r2
  switch(rotation) {
   b5e22:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b5e24:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b5e28:	2a02      	cmp	r2, #2
   b5e2a:	d00d      	beq.n	b5e48 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b5e2c:	2a03      	cmp	r2, #3
   b5e2e:	d018      	beq.n	b5e62 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b5e30:	2a01      	cmp	r2, #1
   b5e32:	d111      	bne.n	b5e58 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b5e34:	18e2      	adds	r2, r4, r3
   b5e36:	8904      	ldrh	r4, [r0, #8]
   b5e38:	1aa4      	subs	r4, r4, r2
   b5e3a:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b5e3c:	9502      	str	r5, [sp, #8]
   b5e3e:	460a      	mov	r2, r1
   b5e40:	4621      	mov	r1, r4
}
   b5e42:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b5e44:	f7ff befc 	b.w	b5c40 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b5e48:	8902      	ldrh	r2, [r0, #8]
   b5e4a:	43c9      	mvns	r1, r1
   b5e4c:	4411      	add	r1, r2
    y -= (h-1);
   b5e4e:	18e2      	adds	r2, r4, r3
   b5e50:	8944      	ldrh	r4, [r0, #10]
   b5e52:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b5e54:	b209      	sxth	r1, r1
    y -= (h-1);
   b5e56:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b5e58:	9502      	str	r5, [sp, #8]
   b5e5a:	4622      	mov	r2, r4
}
   b5e5c:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b5e5e:	f7ff bf33 	b.w	b5cc8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b5e62:	8942      	ldrh	r2, [r0, #10]
   b5e64:	43c9      	mvns	r1, r1
   b5e66:	4411      	add	r1, r2
   b5e68:	b209      	sxth	r1, r1
    break;
   b5e6a:	e7e7      	b.n	b5e3c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b5e6c <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b5e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5e70:	4604      	mov	r4, r0
  TRANSACTION_START
   b5e72:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b5e74:	2800      	cmp	r0, #0
   b5e76:	d042      	beq.n	b5efe <_ZN16Adafruit_SSD13067displayEv+0x92>
   b5e78:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b5e7a:	f001 f937 	bl	b70ec <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b5e7e:	4947      	ldr	r1, [pc, #284]	; (b5f9c <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b5e80:	2205      	movs	r2, #5
   b5e82:	4620      	mov	r0, r4
   b5e84:	f7ff fd27 	bl	b58d6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b5e88:	8921      	ldrh	r1, [r4, #8]
   b5e8a:	3901      	subs	r1, #1
   b5e8c:	4620      	mov	r0, r4
   b5e8e:	b2c9      	uxtb	r1, r1
   b5e90:	f7ff fcb2 	bl	b57f8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b5e94:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b5e98:	1dde      	adds	r6, r3, #7
   b5e9a:	bf48      	it	mi
   b5e9c:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b5ea0:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b5ea4:	8923      	ldrh	r3, [r4, #8]
   b5ea6:	10f6      	asrs	r6, r6, #3
   b5ea8:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b5eac:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b5eb0:	2800      	cmp	r0, #0
   b5eb2:	d03a      	beq.n	b5f2a <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b5eb4:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5eb8:	f001 f926 	bl	b7108 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b5ebc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5ebe:	6803      	ldr	r3, [r0, #0]
   b5ec0:	2140      	movs	r1, #64	; 0x40
   b5ec2:	689b      	ldr	r3, [r3, #8]
   b5ec4:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b5ec6:	2701      	movs	r7, #1
    while(count--) {
   b5ec8:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b5eca:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b5ecc:	d024      	beq.n	b5f18 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b5ece:	2f1f      	cmp	r7, #31
   b5ed0:	d90c      	bls.n	b5eec <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b5ed2:	f001 f920 	bl	b7116 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b5ed6:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5eda:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5edc:	f001 f914 	bl	b7108 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b5ee0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5ee2:	6803      	ldr	r3, [r0, #0]
   b5ee4:	2140      	movs	r1, #64	; 0x40
   b5ee6:	689b      	ldr	r3, [r3, #8]
   b5ee8:	4798      	blx	r3
        bytesOut = 1;
   b5eea:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b5eec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5eee:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5ef2:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b5ef4:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b5ef6:	689b      	ldr	r3, [r3, #8]
   b5ef8:	4798      	blx	r3
      bytesOut++;
   b5efa:	b2ff      	uxtb	r7, r7
    while(count--) {
   b5efc:	e7e4      	b.n	b5ec8 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b5efe:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5f00:	b118      	cbz	r0, b5f0a <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b5f02:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b5f06:	f001 fb1f 	bl	b7548 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b5f0a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5f0e:	2100      	movs	r1, #0
   b5f10:	b280      	uxth	r0, r0
   b5f12:	f002 f90a 	bl	b812a <digitalWrite>
   b5f16:	e7b2      	b.n	b5e7e <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b5f18:	f001 f8fd 	bl	b7116 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b5f1c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5f1e:	b378      	cbz	r0, b5f80 <_ZN16Adafruit_SSD13067displayEv+0x114>
   b5f20:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b5f22:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5f26:	f001 b8e1 	b.w	b70ec <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b5f2a:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b5f2e:	2101      	movs	r1, #1
   b5f30:	b280      	uxth	r0, r0
   b5f32:	f002 f8fa 	bl	b812a <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b5f36:	42ae      	cmp	r6, r5
   b5f38:	d0f0      	beq.n	b5f1c <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b5f3a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b5f3c:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b5f40:	b118      	cbz	r0, b5f4a <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b5f42:	4649      	mov	r1, r9
   b5f44:	f001 fb6e 	bl	b7624 <_ZN8SPIClass8transferEh>
   b5f48:	e7f5      	b.n	b5f36 <_ZN16Adafruit_SSD13067displayEv+0xca>
   b5f4a:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5f4c:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b5f50:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5f54:	ea09 0108 	and.w	r1, r9, r8
   b5f58:	b280      	uxth	r0, r0
   b5f5a:	f002 f8e6 	bl	b812a <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b5f5e:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5f62:	2101      	movs	r1, #1
   b5f64:	b280      	uxth	r0, r0
   b5f66:	f002 f8e0 	bl	b812a <digitalWrite>
      digitalWrite(clkPin , LOW);
   b5f6a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5f6e:	2100      	movs	r1, #0
   b5f70:	b280      	uxth	r0, r0
   b5f72:	f002 f8da 	bl	b812a <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5f76:	3f01      	subs	r7, #1
   b5f78:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b5f7c:	d1e8      	bne.n	b5f50 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b5f7e:	e7da      	b.n	b5f36 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b5f80:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5f84:	2101      	movs	r1, #1
   b5f86:	b280      	uxth	r0, r0
   b5f88:	f002 f8cf 	bl	b812a <digitalWrite>
   b5f8c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5f8e:	b118      	cbz	r0, b5f98 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b5f90:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b5f94:	f001 babe 	b.w	b7514 <_ZN8SPIClass14endTransactionEv>
}
   b5f98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b5f9c:	000baecc 	.word	0x000baecc

000b5fa0 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   b5fa0:	2100      	movs	r1, #0
   b5fa2:	220a      	movs	r2, #10
   b5fa4:	e9c0 1200 	strd	r1, r2, [r0]
{}
   b5fa8:	4770      	bx	lr

000b5faa <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   b5faa:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   b5fac:	b510      	push	{r4, lr}
   b5fae:	4604      	mov	r4, r0
    this->pin = pin;
   b5fb0:	71c1      	strb	r1, [r0, #7]
    state = 0;
   b5fb2:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   b5fb4:	b288      	uxth	r0, r1
   b5fb6:	f002 f8d1 	bl	b815c <digitalRead>
   b5fba:	b108      	cbz	r0, b5fc0 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   b5fbc:	2303      	movs	r3, #3
   b5fbe:	71a3      	strb	r3, [r4, #6]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5fc0:	f000 fd7c 	bl	b6abc <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   b5fc4:	6020      	str	r0, [r4, #0]
#endif
}
   b5fc6:	bd10      	pop	{r4, pc}

000b5fc8 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   b5fc8:	b538      	push	{r3, r4, r5, lr}
   b5fca:	460c      	mov	r4, r1
   b5fcc:	4605      	mov	r5, r0
  pinMode(pin, mode);
   b5fce:	4611      	mov	r1, r2
   b5fd0:	b2a0      	uxth	r0, r4
   b5fd2:	f002 f899 	bl	b8108 <pinMode>
  
  this->attach(pin);
   b5fd6:	4621      	mov	r1, r4
   b5fd8:	4628      	mov	r0, r5
}
   b5fda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   b5fde:	f7ff bfe4 	b.w	b5faa <_ZN8Debounce6attachEi>

000b5fe2 <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   b5fe2:	b538      	push	{r3, r4, r5, lr}
   b5fe4:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   b5fe6:	79c0      	ldrb	r0, [r0, #7]
   b5fe8:	f002 f8b8 	bl	b815c <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   b5fec:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   b5fee:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   b5ff0:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   b5ff4:	bf18      	it	ne
   b5ff6:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b5ff8:	f3c5 0540 	ubfx	r5, r5, #1, #1
   b5ffc:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   b5ffe:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b6000:	d00a      	beq.n	b6018 <_ZN8Debounce6updateEv+0x36>
   b6002:	f000 fd5b 	bl	b6abc <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   b6006:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   b6008:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   b600a:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   b600e:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   b6010:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   b6012:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b6016:	bd38      	pop	{r3, r4, r5, pc}
   b6018:	f000 fd50 	bl	b6abc <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   b601c:	6823      	ldr	r3, [r4, #0]
   b601e:	1ac0      	subs	r0, r0, r3
   b6020:	88a3      	ldrh	r3, [r4, #4]
   b6022:	4298      	cmp	r0, r3
   b6024:	d3f4      	bcc.n	b6010 <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   b6026:	79a3      	ldrb	r3, [r4, #6]
   b6028:	f003 0301 	and.w	r3, r3, #1
   b602c:	42ab      	cmp	r3, r5
   b602e:	d0ef      	beq.n	b6010 <_ZN8Debounce6updateEv+0x2e>
   b6030:	f000 fd44 	bl	b6abc <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   b6034:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   b6036:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   b6038:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   b603c:	f043 0308 	orr.w	r3, r3, #8
   b6040:	e7e5      	b.n	b600e <_ZN8Debounce6updateEv+0x2c>

000b6042 <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b6042:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b6046:	b510      	push	{r4, lr}
   b6048:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b604a:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b604c:	b113      	cbz	r3, b6054 <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b604e:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b6050:	f000 fd04 	bl	b6a5c <os_mutex_lock>
#endif
#endif
#endif
        }
   b6054:	4620      	mov	r0, r4
   b6056:	bd10      	pop	{r4, pc}

000b6058 <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b6058:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b605a:	6803      	ldr	r3, [r0, #0]
   b605c:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b6060:	4604      	mov	r4, r0
            if (mqtt->thread)
   b6062:	b112      	cbz	r2, b606a <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b6064:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b6066:	f000 fd01 	bl	b6a6c <os_mutex_unlock>
#endif
#endif
#endif
        }
   b606a:	4620      	mov	r0, r4
   b606c:	bd10      	pop	{r4, pc}

000b606e <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b606e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6070:	461f      	mov	r7, r3
   b6072:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b6076:	4604      	mov	r4, r0
   b6078:	460d      	mov	r5, r1
   b607a:	4616      	mov	r6, r2
    if (thread) {
   b607c:	b12b      	cbz	r3, b608a <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b607e:	2301      	movs	r3, #1
   b6080:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b6084:	3058      	adds	r0, #88	; 0x58
   b6086:	f000 fcd9 	bl	b6a3c <os_mutex_create>
    }
    this->callback = callback;
   b608a:	9b08      	ldr	r3, [sp, #32]
   b608c:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b608e:	2300      	movs	r3, #0
   b6090:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b6092:	b106      	cbz	r6, b6096 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b6094:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b6096:	b125      	cbz	r5, b60a2 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b6098:	4629      	mov	r1, r5
   b609a:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b609e:	f001 fb26 	bl	b76ee <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b60a2:	9b06      	ldr	r3, [sp, #24]
   b60a4:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b60a6:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b60a8:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b60aa:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b60ae:	2bff      	cmp	r3, #255	; 0xff
   b60b0:	bfb8      	it	lt
   b60b2:	23ff      	movlt	r3, #255	; 0xff
   b60b4:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b60b8:	b108      	cbz	r0, b60be <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b60ba:	f7fe fcfe 	bl	b4aba <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b60be:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b60c2:	f7fe fcf8 	bl	b4ab6 <_Znaj>
   b60c6:	61e0      	str	r0, [r4, #28]
}
   b60c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000b60cc <_ZN4MQTTC1EPKctPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b60cc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b60d0:	4604      	mov	r4, r0
            bool thread) {
   b60d2:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b60d4:	4617      	mov	r7, r2
   b60d6:	4698      	mov	r8, r3
   b60d8:	460e      	mov	r6, r1
            bool thread) {
   b60da:	f001 fe09 	bl	b7cf0 <_ZN9TCPClientC1Ev>
   b60de:	490d      	ldr	r1, [pc, #52]	; (b6114 <_ZN4MQTTC1EPKctPFvPcPhjEb+0x48>)
   b60e0:	61e5      	str	r5, [r4, #28]
   b60e2:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b60e6:	f001 faee 	bl	b76c6 <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b60ea:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
            bool thread) {
   b60ee:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b60f0:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b60f4:	22ff      	movs	r2, #255	; 0xff
   b60f6:	230f      	movs	r3, #15
   b60f8:	e9cd 3200 	strd	r3, r2, [sp]
   b60fc:	4620      	mov	r0, r4
            bool thread) {
   b60fe:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b6102:	463b      	mov	r3, r7
   b6104:	462a      	mov	r2, r5
   b6106:	4631      	mov	r1, r6
   b6108:	f7ff ffb1 	bl	b606e <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b610c:	4620      	mov	r0, r4
   b610e:	b004      	add	sp, #16
   b6110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6114:	000ba958 	.word	0x000ba958

000b6118 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b6118:	b510      	push	{r4, lr}
   b611a:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b611c:	4620      	mov	r0, r4
   b611e:	f001 fd43 	bl	b7ba8 <_ZN9TCPClient9availableEv>
   b6122:	2800      	cmp	r0, #0
   b6124:	d0fa      	beq.n	b611c <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b6126:	4620      	mov	r0, r4
   b6128:	f001 fb28 	bl	b777c <_ZN9TCPClient4readEv>
}
   b612c:	b2c0      	uxtb	r0, r0
   b612e:	bd10      	pop	{r4, pc}

000b6130 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b6130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6134:	4605      	mov	r5, r0
   b6136:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b6138:	f7ff ffee 	bl	b6118 <_ZN4MQTT8readByteEv>
   b613c:	69eb      	ldr	r3, [r5, #28]
   b613e:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b6140:	69eb      	ldr	r3, [r5, #28]
   b6142:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b6146:	f04f 0901 	mov.w	r9, #1
   b614a:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b614e:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b6150:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b6152:	4628      	mov	r0, r5
   b6154:	f7ff ffe0 	bl	b6118 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b6158:	4626      	mov	r6, r4
   b615a:	69eb      	ldr	r3, [r5, #28]
   b615c:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b615e:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b6162:	fb13 f309 	smulbb	r3, r3, r9
   b6166:	441f      	add	r7, r3
        buffer[len++] = digit;
   b6168:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b616a:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b616c:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b616e:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b6170:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b6174:	d4ed      	bmi.n	b6152 <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b6176:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b6178:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b617c:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b6180:	d11e      	bne.n	b61c0 <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b6182:	4628      	mov	r0, r5
   b6184:	f7ff ffc8 	bl	b6118 <_ZN4MQTT8readByteEv>
   b6188:	69eb      	ldr	r3, [r5, #28]
   b618a:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b618c:	4628      	mov	r0, r5
   b618e:	f7ff ffc3 	bl	b6118 <_ZN4MQTT8readByteEv>
   b6192:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b6194:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b6196:	b2b6      	uxth	r6, r6
   b6198:	69eb      	ldr	r3, [r5, #28]
   b619a:	b2a4      	uxth	r4, r4
   b619c:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b619e:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b61a0:	b2b6      	uxth	r6, r6
   b61a2:	42be      	cmp	r6, r7
   b61a4:	d20e      	bcs.n	b61c4 <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b61a6:	4628      	mov	r0, r5
   b61a8:	f7ff ffb6 	bl	b6118 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b61ac:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b61b0:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b61b2:	bf84      	itt	hi
   b61b4:	69eb      	ldrhi	r3, [r5, #28]
   b61b6:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b61b8:	3401      	adds	r4, #1
   b61ba:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b61bc:	3601      	adds	r6, #1
   b61be:	e7ef      	b.n	b61a0 <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b61c0:	2600      	movs	r6, #0
   b61c2:	e7ed      	b.n	b61a0 <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b61c4:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b61c8:	42a3      	cmp	r3, r4
   b61ca:	bf2c      	ite	cs
   b61cc:	4620      	movcs	r0, r4
   b61ce:	2000      	movcc	r0, #0
   b61d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b61d4 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b61d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b61d8:	4615      	mov	r5, r2
   b61da:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b61dc:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b61de:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b61e0:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b61e2:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b61e4:	a802      	add	r0, sp, #8
        digit = len % 128;
   b61e6:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b61ea:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b61ee:	f103 0401 	add.w	r4, r3, #1
   b61f2:	4403      	add	r3, r0
            digit |= 0x80;
   b61f4:	bf88      	it	hi
   b61f6:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b61fa:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b61fe:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b6202:	b2e4      	uxtb	r4, r4
   b6204:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b6208:	d81e      	bhi.n	b6248 <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b620a:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b620e:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b6212:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b6214:	4622      	mov	r2, r4
   b6216:	a901      	add	r1, sp, #4
   b6218:	4428      	add	r0, r5
    buf[4-llen] = header;
   b621a:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b621e:	f002 f94c 	bl	b84ba <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b6222:	1c72      	adds	r2, r6, #1
   b6224:	4422      	add	r2, r4
   b6226:	4641      	mov	r1, r8
   b6228:	4638      	mov	r0, r7
   b622a:	f001 fa92 	bl	b7752 <_ZN9TCPClient5writeEPKhj>
   b622e:	4605      	mov	r5, r0
   b6230:	f000 fc44 	bl	b6abc <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b6234:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b6236:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b6238:	4432      	add	r2, r6
   b623a:	b2a8      	uxth	r0, r5
}
   b623c:	1a13      	subs	r3, r2, r0
   b623e:	4258      	negs	r0, r3
   b6240:	4158      	adcs	r0, r3
   b6242:	b002      	add	sp, #8
   b6244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b6248:	4623      	mov	r3, r4
   b624a:	e7ca      	b.n	b61e2 <_ZN4MQTT5writeEhPht+0xe>

000b624c <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b624c:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b624e:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6250:	4605      	mov	r5, r0
    pos += 2;
   b6252:	b298      	uxth	r0, r3
   b6254:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b6256:	5cce      	ldrb	r6, [r1, r3]
   b6258:	b29c      	uxth	r4, r3
   b625a:	b156      	cbz	r6, b6272 <_ZN4MQTT11writeStringEPKcPht+0x26>
   b625c:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b6260:	4584      	cmp	ip, r0
   b6262:	f103 0701 	add.w	r7, r3, #1
   b6266:	d904      	bls.n	b6272 <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b6268:	1c44      	adds	r4, r0, #1
   b626a:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b626c:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b626e:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b6270:	e7f1      	b.n	b6256 <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b6272:	b299      	uxth	r1, r3
   b6274:	1a41      	subs	r1, r0, r1
   b6276:	440a      	add	r2, r1
   b6278:	0a21      	lsrs	r1, r4, #8
   b627a:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b627e:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b6282:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6284 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b6284:	b538      	push	{r3, r4, r5, lr}
   b6286:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b6288:	f001 fbb0 	bl	b79ec <_ZN9TCPClient9connectedEv>
   b628c:	2800      	cmp	r0, #0
   b628e:	bf14      	ite	ne
   b6290:	2501      	movne	r5, #1
   b6292:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b6294:	d102      	bne.n	b629c <_ZN4MQTT11isConnectedEv+0x18>
   b6296:	4620      	mov	r0, r4
   b6298:	f001 fce0 	bl	b7c5c <_ZN9TCPClient4stopEv>
    return rc;
}
   b629c:	4628      	mov	r0, r5
   b629e:	bd38      	pop	{r3, r4, r5, pc}

000b62a0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b62a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b62a4:	b088      	sub	sp, #32
   b62a6:	4604      	mov	r4, r0
   b62a8:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b62ac:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b62b0:	4689      	mov	r9, r1
   b62b2:	4617      	mov	r7, r2
   b62b4:	461e      	mov	r6, r3
    if (!isConnected()) {
   b62b6:	f7ff ffe5 	bl	b6284 <_ZN4MQTT11isConnectedEv>
   b62ba:	4605      	mov	r5, r0
   b62bc:	2800      	cmp	r0, #0
   b62be:	f040 80cd 	bne.w	b645c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b62c2:	4621      	mov	r1, r4
   b62c4:	a801      	add	r0, sp, #4
   b62c6:	f7ff febc 	bl	b6042 <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b62ca:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b62cc:	2900      	cmp	r1, #0
   b62ce:	f040 8088 	bne.w	b63e2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b62d2:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b62d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b62d8:	462b      	mov	r3, r5
   b62da:	4620      	mov	r0, r4
   b62dc:	f001 fb08 	bl	b78f0 <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b62e0:	2800      	cmp	r0, #0
   b62e2:	d07a      	beq.n	b63da <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b62e4:	2301      	movs	r3, #1
   b62e6:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b62e8:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b62ec:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b62ee:	2b04      	cmp	r3, #4
   b62f0:	4b5b      	ldr	r3, [pc, #364]	; (b6460 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b62f2:	f040 8081 	bne.w	b63f8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b62f6:	6818      	ldr	r0, [r3, #0]
   b62f8:	8899      	ldrh	r1, [r3, #4]
   b62fa:	799b      	ldrb	r3, [r3, #6]
   b62fc:	f8ad 100c 	strh.w	r1, [sp, #12]
   b6300:	f88d 300e 	strb.w	r3, [sp, #14]
   b6304:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b6306:	f8c2 0005 	str.w	r0, [r2, #5]
   b630a:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b630e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b6312:	f8a2 1009 	strh.w	r1, [r2, #9]
   b6316:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b6318:	230c      	movs	r3, #12
            if (willTopic) {
   b631a:	f1b8 0f00 	cmp.w	r8, #0
   b631e:	f000 8081 	beq.w	b6424 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b6322:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b6326:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b632a:	0140      	lsls	r0, r0, #5
   b632c:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b6330:	f040 0006 	orr.w	r0, r0, #6
   b6334:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b6336:	f1ba 0f00 	cmp.w	sl, #0
   b633a:	d101      	bne.n	b6340 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b633c:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b6340:	b11f      	cbz	r7, b634a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b6342:	2e00      	cmp	r6, #0
   b6344:	d170      	bne.n	b6428 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b6346:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b634a:	69e2      	ldr	r2, [r4, #28]
   b634c:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b634e:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b6350:	69e1      	ldr	r1, [r4, #28]
   b6352:	1c58      	adds	r0, r3, #1
   b6354:	1212      	asrs	r2, r2, #8
   b6356:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b6358:	1c9a      	adds	r2, r3, #2
   b635a:	69e1      	ldr	r1, [r4, #28]
   b635c:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b635e:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b6360:	3303      	adds	r3, #3
   b6362:	69e2      	ldr	r2, [r4, #28]
   b6364:	4649      	mov	r1, r9
   b6366:	4620      	mov	r0, r4
   b6368:	f7ff ff70 	bl	b624c <_ZN4MQTT11writeStringEPKcPht>
   b636c:	4603      	mov	r3, r0
            if (willTopic) {
   b636e:	f1b8 0f00 	cmp.w	r8, #0
   b6372:	d00b      	beq.n	b638c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b6374:	69e2      	ldr	r2, [r4, #28]
   b6376:	4641      	mov	r1, r8
   b6378:	4620      	mov	r0, r4
   b637a:	f7ff ff67 	bl	b624c <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b637e:	69e2      	ldr	r2, [r4, #28]
   b6380:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b6382:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b6384:	4620      	mov	r0, r4
   b6386:	f7ff ff61 	bl	b624c <_ZN4MQTT11writeStringEPKcPht>
   b638a:	4603      	mov	r3, r0
            if(user != NULL) {
   b638c:	b167      	cbz	r7, b63a8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b638e:	69e2      	ldr	r2, [r4, #28]
   b6390:	4639      	mov	r1, r7
   b6392:	4620      	mov	r0, r4
   b6394:	f7ff ff5a 	bl	b624c <_ZN4MQTT11writeStringEPKcPht>
   b6398:	4603      	mov	r3, r0
                if(pass != NULL) {
   b639a:	b12e      	cbz	r6, b63a8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b639c:	69e2      	ldr	r2, [r4, #28]
   b639e:	4631      	mov	r1, r6
   b63a0:	4620      	mov	r0, r4
   b63a2:	f7ff ff53 	bl	b624c <_ZN4MQTT11writeStringEPKcPht>
   b63a6:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b63a8:	3b05      	subs	r3, #5
   b63aa:	69e2      	ldr	r2, [r4, #28]
   b63ac:	b29b      	uxth	r3, r3
   b63ae:	2110      	movs	r1, #16
   b63b0:	4620      	mov	r0, r4
   b63b2:	f7ff ff0f 	bl	b61d4 <_ZN4MQTT5writeEhPht>
   b63b6:	f000 fb81 	bl	b6abc <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b63ba:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b63be:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b63c2:	4620      	mov	r0, r4
   b63c4:	f001 fbf0 	bl	b7ba8 <_ZN9TCPClient9availableEv>
   b63c8:	bb88      	cbnz	r0, b642e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b63ca:	f000 fb77 	bl	b6abc <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b63ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b63d0:	1ac0      	subs	r0, r0, r3
   b63d2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b63d4:	4373      	muls	r3, r6
   b63d6:	4298      	cmp	r0, r3
   b63d8:	d9f3      	bls.n	b63c2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b63da:	4620      	mov	r0, r4
   b63dc:	f001 fc3e 	bl	b7c5c <_ZN9TCPClient4stopEv>
   b63e0:	e035      	b.n	b644e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b63e2:	a802      	add	r0, sp, #8
   b63e4:	f000 ff18 	bl	b7218 <_ZN9IPAddressC1EPKh>
   b63e8:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b63ec:	462b      	mov	r3, r5
   b63ee:	a902      	add	r1, sp, #8
   b63f0:	4620      	mov	r0, r4
   b63f2:	f001 fb5d 	bl	b7ab0 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b63f6:	e773      	b.n	b62e0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b63f8:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b63fc:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b6400:	7bdb      	ldrb	r3, [r3, #15]
   b6402:	f10d 0c08 	add.w	ip, sp, #8
   b6406:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b640a:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b640e:	ab02      	add	r3, sp, #8
   b6410:	cb03      	ldmia	r3!, {r0, r1}
   b6412:	f8c2 0005 	str.w	r0, [r2, #5]
   b6416:	f8c2 1009 	str.w	r1, [r2, #9]
   b641a:	f89c 3000 	ldrb.w	r3, [ip]
   b641e:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b6420:	230e      	movs	r3, #14
   b6422:	e77a      	b.n	b631a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b6424:	2002      	movs	r0, #2
   b6426:	e786      	b.n	b6336 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b6428:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b642c:	e78d      	b.n	b634a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b642e:	a902      	add	r1, sp, #8
   b6430:	4620      	mov	r0, r4
   b6432:	f7ff fe7d 	bl	b6130 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b6436:	2804      	cmp	r0, #4
   b6438:	d1cf      	bne.n	b63da <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b643a:	69e3      	ldr	r3, [r4, #28]
   b643c:	78de      	ldrb	r6, [r3, #3]
   b643e:	2e00      	cmp	r6, #0
   b6440:	d1cb      	bne.n	b63da <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b6442:	f000 fb3b 	bl	b6abc <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b6446:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b6448:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b644a:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b644e:	a801      	add	r0, sp, #4
   b6450:	f7ff fe02 	bl	b6058 <_ZN4MQTT11MutexLockerD1Ev>
}
   b6454:	4628      	mov	r0, r5
   b6456:	b008      	add	sp, #32
   b6458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b645c:	2500      	movs	r5, #0
   b645e:	e7f9      	b.n	b6454 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b6460:	000ba36c 	.word	0x000ba36c

000b6464 <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
   b6464:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   b6466:	2301      	movs	r3, #1
   b6468:	2204      	movs	r2, #4
   b646a:	e9cd 3204 	strd	r3, r2, [sp, #16]
   b646e:	2300      	movs	r3, #0
   b6470:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b6474:	e9cd 3300 	strd	r3, r3, [sp]
   b6478:	461a      	mov	r2, r3
   b647a:	f7ff ff11 	bl	b62a0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b647e:	b007      	add	sp, #28
   b6480:	f85d fb04 	ldr.w	pc, [sp], #4

000b6484 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b6484:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6488:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   b648c:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   b6490:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   b6494:	4604      	mov	r4, r0
   b6496:	468b      	mov	fp, r1
   b6498:	4616      	mov	r6, r2
   b649a:	461f      	mov	r7, r3
    if (isConnected()) {
   b649c:	f7ff fef2 	bl	b6284 <_ZN4MQTT11isConnectedEv>
   b64a0:	4682      	mov	sl, r0
   b64a2:	2800      	cmp	r0, #0
   b64a4:	d051      	beq.n	b654a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   b64a6:	4621      	mov	r1, r4
   b64a8:	a801      	add	r0, sp, #4
   b64aa:	f7ff fdca 	bl	b6042 <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   b64ae:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   b64b2:	69e0      	ldr	r0, [r4, #28]
   b64b4:	2100      	movs	r1, #0
   b64b6:	f002 f80e 	bl	b84d6 <memset>
        length = writeString(topic, buffer, length);
   b64ba:	2305      	movs	r3, #5
   b64bc:	69e2      	ldr	r2, [r4, #28]
   b64be:	4659      	mov	r1, fp
   b64c0:	4620      	mov	r0, r4
   b64c2:	f7ff fec3 	bl	b624c <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   b64c6:	1e6b      	subs	r3, r5, #1
   b64c8:	2b01      	cmp	r3, #1
   b64ca:	d815      	bhi.n	b64f8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   b64cc:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b64ce:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   b64d0:	3101      	adds	r1, #1
   b64d2:	b289      	uxth	r1, r1
   b64d4:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b64d6:	0a09      	lsrs	r1, r1, #8
   b64d8:	5419      	strb	r1, [r3, r0]
   b64da:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   b64dc:	69e3      	ldr	r3, [r4, #28]
   b64de:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b64e0:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   b64e2:	3002      	adds	r0, #2
   b64e4:	5499      	strb	r1, [r3, r2]
   b64e6:	b280      	uxth	r0, r0
            if (messageid != NULL)
   b64e8:	f1b8 0f00 	cmp.w	r8, #0
   b64ec:	d004      	beq.n	b64f8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   b64ee:	8c23      	ldrh	r3, [r4, #32]
   b64f0:	1c5a      	adds	r2, r3, #1
   b64f2:	8422      	strh	r2, [r4, #32]
   b64f4:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b64f8:	2100      	movs	r1, #0
   b64fa:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b64fc:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
   b64fe:	69e2      	ldr	r2, [r4, #28]
   b6500:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b6502:	d90a      	bls.n	b651a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   b6504:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   b6508:	459c      	cmp	ip, r3
   b650a:	d906      	bls.n	b651a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   b650c:	f816 c001 	ldrb.w	ip, [r6, r1]
   b6510:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b6514:	3101      	adds	r1, #1
   b6516:	b289      	uxth	r1, r1
   b6518:	e7ef      	b.n	b64fa <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   b651a:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   b651e:	2900      	cmp	r1, #0
   b6520:	bf0c      	ite	eq
   b6522:	2130      	moveq	r1, #48	; 0x30
   b6524:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   b6526:	f1b9 0f00 	cmp.w	r9, #0
   b652a:	d001      	beq.n	b6530 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   b652c:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   b6530:	2d02      	cmp	r5, #2
   b6532:	d10e      	bne.n	b6552 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   b6534:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   b6538:	3b05      	subs	r3, #5
   b653a:	b29b      	uxth	r3, r3
   b653c:	4620      	mov	r0, r4
   b653e:	f7ff fe49 	bl	b61d4 <_ZN4MQTT5writeEhPht>
   b6542:	4682      	mov	sl, r0
        MutexLocker lock(this);
   b6544:	a801      	add	r0, sp, #4
   b6546:	f7ff fd87 	bl	b6058 <_ZN4MQTT11MutexLockerD1Ev>
}
   b654a:	4650      	mov	r0, sl
   b654c:	b003      	add	sp, #12
   b654e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   b6552:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   b6554:	bf08      	it	eq
   b6556:	f041 0102 	orreq.w	r1, r1, #2
   b655a:	e7ed      	b.n	b6538 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000b655c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   b655c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   b655e:	9c08      	ldr	r4, [sp, #32]
   b6560:	9403      	str	r4, [sp, #12]
   b6562:	2400      	movs	r4, #0
   b6564:	9402      	str	r4, [sp, #8]
   b6566:	f89d 401c 	ldrb.w	r4, [sp, #28]
   b656a:	9401      	str	r4, [sp, #4]
   b656c:	f89d 4018 	ldrb.w	r4, [sp, #24]
   b6570:	9400      	str	r4, [sp, #0]
   b6572:	f7ff ff87 	bl	b6484 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   b6576:	b004      	add	sp, #16
   b6578:	bd10      	pop	{r4, pc}

000b657a <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   b657a:	b530      	push	{r4, r5, lr}
   b657c:	b087      	sub	sp, #28
   b657e:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b6580:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   b6582:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b6584:	9204      	str	r2, [sp, #16]
   b6586:	f7fe fa39 	bl	b49fc <strlen>
   b658a:	2500      	movs	r5, #0
   b658c:	4603      	mov	r3, r0
   b658e:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b6592:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b6596:	9500      	str	r5, [sp, #0]
   b6598:	4620      	mov	r0, r4
   b659a:	f7ff ffdf 	bl	b655c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   b659e:	b007      	add	sp, #28
   b65a0:	bd30      	pop	{r4, r5, pc}

000b65a2 <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   b65a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b65a4:	4604      	mov	r4, r0
   b65a6:	460e      	mov	r6, r1
    if (isConnected()) {
   b65a8:	f7ff fe6c 	bl	b6284 <_ZN4MQTT11isConnectedEv>
   b65ac:	4605      	mov	r5, r0
   b65ae:	b1c8      	cbz	r0, b65e4 <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   b65b0:	4621      	mov	r1, r4
   b65b2:	a801      	add	r0, sp, #4
   b65b4:	f7ff fd45 	bl	b6042 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   b65b8:	69e3      	ldr	r3, [r4, #28]
   b65ba:	2262      	movs	r2, #98	; 0x62
   b65bc:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b65be:	69e3      	ldr	r3, [r4, #28]
   b65c0:	2202      	movs	r2, #2
   b65c2:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b65c4:	69e3      	ldr	r3, [r4, #28]
   b65c6:	0a32      	lsrs	r2, r6, #8
   b65c8:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b65ca:	69e3      	ldr	r3, [r4, #28]
   b65cc:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b65ce:	69e1      	ldr	r1, [r4, #28]
   b65d0:	2204      	movs	r2, #4
   b65d2:	4620      	mov	r0, r4
   b65d4:	f001 f8bd 	bl	b7752 <_ZN9TCPClient5writeEPKhj>
   b65d8:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b65da:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b65dc:	bf18      	it	ne
   b65de:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b65e0:	f7ff fd3a 	bl	b6058 <_ZN4MQTT11MutexLockerD1Ev>
}
   b65e4:	4628      	mov	r0, r5
   b65e6:	b002      	add	sp, #8
   b65e8:	bd70      	pop	{r4, r5, r6, pc}

000b65ea <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   b65ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b65ec:	4604      	mov	r4, r0
   b65ee:	460e      	mov	r6, r1
    if (isConnected()) {
   b65f0:	f7ff fe48 	bl	b6284 <_ZN4MQTT11isConnectedEv>
   b65f4:	4605      	mov	r5, r0
   b65f6:	b1c8      	cbz	r0, b662c <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   b65f8:	4621      	mov	r1, r4
   b65fa:	a801      	add	r0, sp, #4
   b65fc:	f7ff fd21 	bl	b6042 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   b6600:	69e3      	ldr	r3, [r4, #28]
   b6602:	2272      	movs	r2, #114	; 0x72
   b6604:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b6606:	69e3      	ldr	r3, [r4, #28]
   b6608:	2202      	movs	r2, #2
   b660a:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b660c:	69e3      	ldr	r3, [r4, #28]
   b660e:	0a32      	lsrs	r2, r6, #8
   b6610:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b6612:	69e3      	ldr	r3, [r4, #28]
   b6614:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b6616:	69e1      	ldr	r1, [r4, #28]
   b6618:	2204      	movs	r2, #4
   b661a:	4620      	mov	r0, r4
   b661c:	f001 f899 	bl	b7752 <_ZN9TCPClient5writeEPKhj>
   b6620:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b6622:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b6624:	bf18      	it	ne
   b6626:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b6628:	f7ff fd16 	bl	b6058 <_ZN4MQTT11MutexLockerD1Ev>
}
   b662c:	4628      	mov	r0, r5
   b662e:	b002      	add	sp, #8
   b6630:	bd70      	pop	{r4, r5, r6, pc}

000b6632 <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   b6632:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6636:	ed2d 8b02 	vpush	{d8}
   b663a:	b087      	sub	sp, #28
   b663c:	af00      	add	r7, sp, #0
   b663e:	4604      	mov	r4, r0
    if (isConnected()) {
   b6640:	f7ff fe20 	bl	b6284 <_ZN4MQTT11isConnectedEv>
   b6644:	4681      	mov	r9, r0
   b6646:	b1f8      	cbz	r0, b6688 <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   b6648:	4621      	mov	r1, r4
   b664a:	f107 0014 	add.w	r0, r7, #20
   b664e:	f7ff fcf8 	bl	b6042 <_ZN4MQTT11MutexLockerC1EPS_>
   b6652:	f000 fa33 	bl	b6abc <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   b6656:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b6658:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b665c:	4353      	muls	r3, r2
   b665e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   b6660:	1a82      	subs	r2, r0, r2
   b6662:	429a      	cmp	r2, r3
   b6664:	4606      	mov	r6, r0
   b6666:	d803      	bhi.n	b6670 <_ZN4MQTT4loopEv+0x3e>
   b6668:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b666a:	1a82      	subs	r2, r0, r2
   b666c:	4293      	cmp	r3, r2
   b666e:	d221      	bcs.n	b66b4 <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   b6670:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b6674:	b17b      	cbz	r3, b6696 <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   b6676:	4620      	mov	r0, r4
   b6678:	f001 faf0 	bl	b7c5c <_ZN9TCPClient4stopEv>
                return false;
   b667c:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   b6680:	f107 0014 	add.w	r0, r7, #20
   b6684:	f7ff fce8 	bl	b6058 <_ZN4MQTT11MutexLockerD1Ev>
}
   b6688:	4648      	mov	r0, r9
   b668a:	371c      	adds	r7, #28
   b668c:	46bd      	mov	sp, r7
   b668e:	ecbd 8b02 	vpop	{d8}
   b6692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b6696:	69e2      	ldr	r2, [r4, #28]
   b6698:	21c0      	movs	r1, #192	; 0xc0
   b669a:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   b669c:	69e2      	ldr	r2, [r4, #28]
   b669e:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   b66a0:	69e1      	ldr	r1, [r4, #28]
   b66a2:	2202      	movs	r2, #2
   b66a4:	4620      	mov	r0, r4
   b66a6:	f001 f854 	bl	b7752 <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   b66aa:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   b66ae:	2301      	movs	r3, #1
   b66b0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   b66b4:	4620      	mov	r0, r4
   b66b6:	f001 fa77 	bl	b7ba8 <_ZN9TCPClient9availableEv>
   b66ba:	2800      	cmp	r0, #0
   b66bc:	d0e0      	beq.n	b6680 <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   b66be:	f107 0113 	add.w	r1, r7, #19
   b66c2:	4620      	mov	r0, r4
   b66c4:	f7ff fd34 	bl	b6130 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   b66c8:	4683      	mov	fp, r0
   b66ca:	2800      	cmp	r0, #0
   b66cc:	d0d8      	beq.n	b6680 <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   b66ce:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   b66d0:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   b66d2:	7819      	ldrb	r1, [r3, #0]
   b66d4:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b66d8:	2a30      	cmp	r2, #48	; 0x30
   b66da:	d17f      	bne.n	b67dc <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   b66dc:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   b66e0:	f1ba 0f00 	cmp.w	sl, #0
   b66e4:	d0cc      	beq.n	b6680 <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b66e6:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   b66ea:	466a      	mov	r2, sp
   b66ec:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b66f0:	eb03 020c 	add.w	r2, r3, ip
   b66f4:	7851      	ldrb	r1, [r2, #1]
   b66f6:	7895      	ldrb	r5, [r2, #2]
   b66f8:	eb05 2501 	add.w	r5, r5, r1, lsl #8
   b66fc:	b2ad      	uxth	r5, r5
                        char topic[tl+1];
   b66fe:	f105 0208 	add.w	r2, r5, #8
   b6702:	4669      	mov	r1, sp
   b6704:	08d2      	lsrs	r2, r2, #3
   b6706:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   b670a:	4695      	mov	sp, r2
   b670c:	f10c 0203 	add.w	r2, ip, #3
   b6710:	60fa      	str	r2, [r7, #12]
   b6712:	eb03 0e02 	add.w	lr, r3, r2
   b6716:	eb0d 0205 	add.w	r2, sp, r5
   b671a:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   b671c:	f8c7 d008 	str.w	sp, [r7, #8]
   b6720:	607a      	str	r2, [r7, #4]
   b6722:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   b6726:	428a      	cmp	r2, r1
   b6728:	d006      	beq.n	b6738 <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   b672a:	460a      	mov	r2, r1
   b672c:	f81e 8b01 	ldrb.w	r8, [lr], #1
   b6730:	f802 8b01 	strb.w	r8, [r2], #1
   b6734:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   b6736:	e7f4      	b.n	b6722 <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   b6738:	2200      	movs	r2, #0
   b673a:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b673c:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6740:	68f9      	ldr	r1, [r7, #12]
   b6742:	f008 0806 	and.w	r8, r8, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b6746:	ebab 020c 	sub.w	r2, fp, ip
   b674a:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b674c:	f1b8 0f02 	cmp.w	r8, #2
                            callback(topic,payload,len-llen-3-tl-2);
   b6750:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6754:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b6756:	d125      	bne.n	b67a4 <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6758:	f813 e001 	ldrb.w	lr, [r3, r1]
   b675c:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   b675e:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6760:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   b6764:	f10c 0105 	add.w	r1, ip, #5
   b6768:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b676a:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b676c:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   b6770:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   b6772:	69e3      	ldr	r3, [r4, #28]
   b6774:	2240      	movs	r2, #64	; 0x40
   b6776:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   b6778:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b677a:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   b677e:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   b6782:	69e3      	ldr	r3, [r4, #28]
   b6784:	ea4f 221b 	mov.w	r2, fp, lsr #8
   b6788:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   b678a:	69e3      	ldr	r3, [r4, #28]
   b678c:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   b6790:	69e1      	ldr	r1, [r4, #28]
   b6792:	2204      	movs	r2, #4
   b6794:	4620      	mov	r0, r4
   b6796:	f000 ffdc 	bl	b7752 <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   b679a:	6266      	str	r6, [r4, #36]	; 0x24
   b679c:	ee18 3a10 	vmov	r3, s16
   b67a0:	469d      	mov	sp, r3
   b67a2:	e76d      	b.n	b6680 <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   b67a4:	f1b8 0f04 	cmp.w	r8, #4
   b67a8:	d115      	bne.n	b67d6 <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b67aa:	f813 e001 	ldrb.w	lr, [r3, r1]
   b67ae:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b67b0:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b67b2:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   b67b6:	f10c 0105 	add.w	r1, ip, #5
   b67ba:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b67bc:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b67be:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b67c2:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   b67c4:	69e3      	ldr	r3, [r4, #28]
   b67c6:	2250      	movs	r2, #80	; 0x50
   b67c8:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   b67ca:	69e3      	ldr	r3, [r4, #28]
   b67cc:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b67ce:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   b67d2:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   b67d4:	e7d5      	b.n	b6782 <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   b67d6:	4419      	add	r1, r3
   b67d8:	47d0      	blx	sl
   b67da:	e7df      	b.n	b679c <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   b67dc:	2a50      	cmp	r2, #80	; 0x50
   b67de:	d108      	bne.n	b67f2 <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   b67e0:	789a      	ldrb	r2, [r3, #2]
   b67e2:	78d9      	ldrb	r1, [r3, #3]
   b67e4:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   b67e8:	b289      	uxth	r1, r1
   b67ea:	4620      	mov	r0, r4
   b67ec:	f7ff fed9 	bl	b65a2 <_ZN4MQTT14publishReleaseEt>
   b67f0:	e746      	b.n	b6680 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   b67f2:	2a40      	cmp	r2, #64	; 0x40
   b67f4:	d112      	bne.n	b681c <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   b67f6:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b67f8:	2a00      	cmp	r2, #0
   b67fa:	f43f af41 	beq.w	b6680 <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   b67fe:	f1bb 0f04 	cmp.w	fp, #4
   b6802:	f47f af3d 	bne.w	b6680 <_ZN4MQTT4loopEv+0x4e>
   b6806:	f011 0f06 	tst.w	r1, #6
   b680a:	f47f af39 	bne.w	b6680 <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   b680e:	7899      	ldrb	r1, [r3, #2]
   b6810:	78d8      	ldrb	r0, [r3, #3]
   b6812:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   b6816:	b280      	uxth	r0, r0
   b6818:	4790      	blx	r2
   b681a:	e731      	b.n	b6680 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   b681c:	2a60      	cmp	r2, #96	; 0x60
   b681e:	d108      	bne.n	b6832 <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   b6820:	789a      	ldrb	r2, [r3, #2]
   b6822:	78d9      	ldrb	r1, [r3, #3]
   b6824:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   b6828:	b289      	uxth	r1, r1
   b682a:	4620      	mov	r0, r4
   b682c:	f7ff fedd 	bl	b65ea <_ZN4MQTT15publishCompleteEt>
   b6830:	e726      	b.n	b6680 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   b6832:	2a70      	cmp	r2, #112	; 0x70
   b6834:	d0df      	beq.n	b67f6 <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   b6836:	2a90      	cmp	r2, #144	; 0x90
   b6838:	f43f af22 	beq.w	b6680 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   b683c:	2ac0      	cmp	r2, #192	; 0xc0
   b683e:	d10a      	bne.n	b6856 <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   b6840:	22d0      	movs	r2, #208	; 0xd0
   b6842:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   b6844:	69e3      	ldr	r3, [r4, #28]
   b6846:	2200      	movs	r2, #0
   b6848:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   b684a:	69e1      	ldr	r1, [r4, #28]
   b684c:	2202      	movs	r2, #2
   b684e:	4620      	mov	r0, r4
   b6850:	f000 ff7f 	bl	b7752 <_ZN9TCPClient5writeEPKhj>
   b6854:	e714      	b.n	b6680 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   b6856:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   b6858:	bf04      	itt	eq
   b685a:	2300      	moveq	r3, #0
   b685c:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   b6860:	e70e      	b.n	b6680 <_ZN4MQTT4loopEv+0x4e>

000b6862 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   b6862:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6864:	4604      	mov	r4, r0
   b6866:	460f      	mov	r7, r1
   b6868:	4616      	mov	r6, r2
    if (isConnected()) {
   b686a:	f7ff fd0b 	bl	b6284 <_ZN4MQTT11isConnectedEv>
   b686e:	4605      	mov	r5, r0
   b6870:	b310      	cbz	r0, b68b8 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   b6872:	4621      	mov	r1, r4
   b6874:	a801      	add	r0, sp, #4
   b6876:	f7ff fbe4 	bl	b6042 <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   b687a:	8c23      	ldrh	r3, [r4, #32]
   b687c:	3301      	adds	r3, #1
   b687e:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   b6880:	b1eb      	cbz	r3, b68be <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   b6882:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   b6884:	8c23      	ldrh	r3, [r4, #32]
   b6886:	69e2      	ldr	r2, [r4, #28]
   b6888:	0a1b      	lsrs	r3, r3, #8
   b688a:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   b688c:	69e3      	ldr	r3, [r4, #28]
   b688e:	8c22      	ldrh	r2, [r4, #32]
   b6890:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   b6892:	69e2      	ldr	r2, [r4, #28]
   b6894:	2307      	movs	r3, #7
   b6896:	4639      	mov	r1, r7
   b6898:	4620      	mov	r0, r4
   b689a:	f7ff fcd7 	bl	b624c <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   b689e:	69e3      	ldr	r3, [r4, #28]
   b68a0:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   b68a2:	3804      	subs	r0, #4
   b68a4:	b283      	uxth	r3, r0
   b68a6:	69e2      	ldr	r2, [r4, #28]
   b68a8:	2182      	movs	r1, #130	; 0x82
   b68aa:	4620      	mov	r0, r4
   b68ac:	f7ff fc92 	bl	b61d4 <_ZN4MQTT5writeEhPht>
   b68b0:	4605      	mov	r5, r0
        MutexLocker lock(this);
   b68b2:	a801      	add	r0, sp, #4
   b68b4:	f7ff fbd0 	bl	b6058 <_ZN4MQTT11MutexLockerD1Ev>
}
   b68b8:	4628      	mov	r0, r5
   b68ba:	b003      	add	sp, #12
   b68bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   b68be:	2301      	movs	r3, #1
   b68c0:	e7df      	b.n	b6882 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000b68c2 <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   b68c2:	2200      	movs	r2, #0
   b68c4:	f7ff bfcd 	b.w	b6862 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000b68c8 <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   b68c8:	b510      	push	{r4, lr}
   b68ca:	4b06      	ldr	r3, [pc, #24]	; (b68e4 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   b68cc:	6003      	str	r3, [r0, #0]
   b68ce:	4604      	mov	r4, r0
	if (mutex) {
   b68d0:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b68d2:	b108      	cbz	r0, b68d8 <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   b68d4:	f000 f8ba 	bl	b6a4c <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   b68d8:	4620      	mov	r0, r4
   b68da:	f7fe fee7 	bl	b56ac <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   b68de:	4620      	mov	r0, r4
   b68e0:	bd10      	pop	{r4, pc}
   b68e2:	bf00      	nop
   b68e4:	000baedc 	.word	0x000baedc

000b68e8 <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   b68e8:	b510      	push	{r4, lr}
   b68ea:	4604      	mov	r4, r0
}
   b68ec:	f7ff ffec 	bl	b68c8 <_ZN16OledWingAdafruitD1Ev>
   b68f0:	4620      	mov	r0, r4
   b68f2:	2170      	movs	r1, #112	; 0x70
   b68f4:	f7fe f8e3 	bl	b4abe <_ZdlPvj>
   b68f8:	4620      	mov	r0, r4
   b68fa:	bd10      	pop	{r4, pc}

000b68fc <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   b68fc:	b530      	push	{r4, r5, lr}
   b68fe:	b085      	sub	sp, #20
   b6900:	4604      	mov	r4, r0
   b6902:	460d      	mov	r5, r1
   b6904:	f001 fc58 	bl	b81b8 <_Z19__fetch_global_Wirev>
   b6908:	4a10      	ldr	r2, [pc, #64]	; (b694c <_ZN16OledWingAdafruitC1Ei+0x50>)
   b690a:	4911      	ldr	r1, [pc, #68]	; (b6950 <_ZN16OledWingAdafruitC1Ei+0x54>)
   b690c:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b6910:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6914:	2180      	movs	r1, #128	; 0x80
   b6916:	4603      	mov	r3, r0
   b6918:	9200      	str	r2, [sp, #0]
   b691a:	4620      	mov	r0, r4
   b691c:	2220      	movs	r2, #32
   b691e:	f7fe ff3d 	bl	b579c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   b6922:	4b0c      	ldr	r3, [pc, #48]	; (b6954 <_ZN16OledWingAdafruitC1Ei+0x58>)
   b6924:	6023      	str	r3, [r4, #0]
   b6926:	2300      	movs	r3, #0
   b6928:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   b692c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b6930:	f7ff fb36 	bl	b5fa0 <_ZN8DebounceC1Ev>
   b6934:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b6938:	f7ff fb32 	bl	b5fa0 <_ZN8DebounceC1Ev>
   b693c:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b6940:	f7ff fb2e 	bl	b5fa0 <_ZN8DebounceC1Ev>
}
   b6944:	4620      	mov	r0, r4
   b6946:	b005      	add	sp, #20
   b6948:	bd30      	pop	{r4, r5, pc}
   b694a:	bf00      	nop
   b694c:	00061a80 	.word	0x00061a80
   b6950:	000186a0 	.word	0x000186a0
   b6954:	000baedc 	.word	0x000baedc

000b6958 <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   b6958:	b513      	push	{r0, r1, r4, lr}
   b695a:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   b695c:	3050      	adds	r0, #80	; 0x50
   b695e:	f000 f86d 	bl	b6a3c <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   b6962:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b6964:	07d9      	lsls	r1, r3, #31
   b6966:	d505      	bpl.n	b6974 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   b6968:	2202      	movs	r2, #2
   b696a:	2104      	movs	r1, #4
   b696c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b6970:	f7ff fb2a 	bl	b5fc8 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   b6974:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b6976:	079a      	lsls	r2, r3, #30
   b6978:	d505      	bpl.n	b6986 <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   b697a:	2200      	movs	r2, #0
   b697c:	2103      	movs	r1, #3
   b697e:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b6982:	f7ff fb21 	bl	b5fc8 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   b6986:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b6988:	075b      	lsls	r3, r3, #29
   b698a:	d505      	bpl.n	b6998 <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   b698c:	2202      	movs	r2, #2
   b698e:	4611      	mov	r1, r2
   b6990:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b6994:	f7ff fb18 	bl	b5fc8 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b6998:	2301      	movs	r3, #1
   b699a:	9300      	str	r3, [sp, #0]
   b699c:	223c      	movs	r2, #60	; 0x3c
   b699e:	2102      	movs	r1, #2
   b69a0:	4620      	mov	r0, r4
   b69a2:	f7ff f803 	bl	b59ac <_ZN16Adafruit_SSD13065beginEhhbb>
}
   b69a6:	b002      	add	sp, #8
   b69a8:	bd10      	pop	{r4, pc}

000b69aa <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   b69aa:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   b69ac:	6d43      	ldr	r3, [r0, #84]	; 0x54
   b69ae:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   b69b0:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   b69b2:	d502      	bpl.n	b69ba <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   b69b4:	3058      	adds	r0, #88	; 0x58
   b69b6:	f7ff fb14 	bl	b5fe2 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   b69ba:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b69bc:	079a      	lsls	r2, r3, #30
   b69be:	d503      	bpl.n	b69c8 <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   b69c0:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b69c4:	f7ff fb0d 	bl	b5fe2 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   b69c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b69ca:	075b      	lsls	r3, r3, #29
   b69cc:	d505      	bpl.n	b69da <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   b69ce:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   b69d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   b69d6:	f7ff bb04 	b.w	b5fe2 <_ZN8Debounce6updateEv>
}
   b69da:	bd10      	pop	{r4, pc}

000b69dc <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b69dc:	b508      	push	{r3, lr}
   b69de:	4b02      	ldr	r3, [pc, #8]	; (b69e8 <os_thread_yield+0xc>)
   b69e0:	681b      	ldr	r3, [r3, #0]
   b69e2:	68db      	ldr	r3, [r3, #12]
   b69e4:	9301      	str	r3, [sp, #4]
   b69e6:	bd08      	pop	{r3, pc}
   b69e8:	00030248 	.word	0x00030248

000b69ec <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b69ec:	b508      	push	{r3, lr}
   b69ee:	4b02      	ldr	r3, [pc, #8]	; (b69f8 <os_thread_scheduling+0xc>)
   b69f0:	681b      	ldr	r3, [r3, #0]
   b69f2:	69db      	ldr	r3, [r3, #28]
   b69f4:	9301      	str	r3, [sp, #4]
   b69f6:	bd08      	pop	{r3, pc}
   b69f8:	00030248 	.word	0x00030248

000b69fc <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   b69fc:	b508      	push	{r3, lr}
   b69fe:	4b02      	ldr	r3, [pc, #8]	; (b6a08 <os_timer_create+0xc>)
   b6a00:	681b      	ldr	r3, [r3, #0]
   b6a02:	6a1b      	ldr	r3, [r3, #32]
   b6a04:	9301      	str	r3, [sp, #4]
   b6a06:	bd08      	pop	{r3, pc}
   b6a08:	00030248 	.word	0x00030248

000b6a0c <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   b6a0c:	b508      	push	{r3, lr}
   b6a0e:	4b02      	ldr	r3, [pc, #8]	; (b6a18 <os_timer_destroy+0xc>)
   b6a10:	681b      	ldr	r3, [r3, #0]
   b6a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6a14:	9301      	str	r3, [sp, #4]
   b6a16:	bd08      	pop	{r3, pc}
   b6a18:	00030248 	.word	0x00030248

000b6a1c <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   b6a1c:	b508      	push	{r3, lr}
   b6a1e:	4b02      	ldr	r3, [pc, #8]	; (b6a28 <os_timer_get_id+0xc>)
   b6a20:	681b      	ldr	r3, [r3, #0]
   b6a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6a24:	9301      	str	r3, [sp, #4]
   b6a26:	bd08      	pop	{r3, pc}
   b6a28:	00030248 	.word	0x00030248

000b6a2c <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   b6a2c:	b508      	push	{r3, lr}
   b6a2e:	4b02      	ldr	r3, [pc, #8]	; (b6a38 <os_timer_change+0xc>)
   b6a30:	681b      	ldr	r3, [r3, #0]
   b6a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6a34:	9301      	str	r3, [sp, #4]
   b6a36:	bd08      	pop	{r3, pc}
   b6a38:	00030248 	.word	0x00030248

000b6a3c <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b6a3c:	b508      	push	{r3, lr}
   b6a3e:	4b02      	ldr	r3, [pc, #8]	; (b6a48 <os_mutex_create+0xc>)
   b6a40:	681b      	ldr	r3, [r3, #0]
   b6a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6a44:	9301      	str	r3, [sp, #4]
   b6a46:	bd08      	pop	{r3, pc}
   b6a48:	00030248 	.word	0x00030248

000b6a4c <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   b6a4c:	b508      	push	{r3, lr}
   b6a4e:	4b02      	ldr	r3, [pc, #8]	; (b6a58 <os_mutex_destroy+0xc>)
   b6a50:	681b      	ldr	r3, [r3, #0]
   b6a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6a54:	9301      	str	r3, [sp, #4]
   b6a56:	bd08      	pop	{r3, pc}
   b6a58:	00030248 	.word	0x00030248

000b6a5c <os_mutex_lock>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b6a5c:	b508      	push	{r3, lr}
   b6a5e:	4b02      	ldr	r3, [pc, #8]	; (b6a68 <os_mutex_lock+0xc>)
   b6a60:	681b      	ldr	r3, [r3, #0]
   b6a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6a64:	9301      	str	r3, [sp, #4]
   b6a66:	bd08      	pop	{r3, pc}
   b6a68:	00030248 	.word	0x00030248

000b6a6c <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b6a6c:	b508      	push	{r3, lr}
   b6a6e:	4b02      	ldr	r3, [pc, #8]	; (b6a78 <os_mutex_unlock+0xc>)
   b6a70:	681b      	ldr	r3, [r3, #0]
   b6a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6a74:	9301      	str	r3, [sp, #4]
   b6a76:	bd08      	pop	{r3, pc}
   b6a78:	00030248 	.word	0x00030248

000b6a7c <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b6a7c:	b508      	push	{r3, lr}
   b6a7e:	4b02      	ldr	r3, [pc, #8]	; (b6a88 <os_mutex_recursive_create+0xc>)
   b6a80:	681b      	ldr	r3, [r3, #0]
   b6a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6a84:	9301      	str	r3, [sp, #4]
   b6a86:	bd08      	pop	{r3, pc}
   b6a88:	00030248 	.word	0x00030248

000b6a8c <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   b6a8c:	b508      	push	{r3, lr}
   b6a8e:	4b02      	ldr	r3, [pc, #8]	; (b6a98 <os_timer_set_id+0xc>)
   b6a90:	681b      	ldr	r3, [r3, #0]
   b6a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b6a94:	9301      	str	r3, [sp, #4]
   b6a96:	bd08      	pop	{r3, pc}
   b6a98:	00030248 	.word	0x00030248

000b6a9c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b6a9c:	b508      	push	{r3, lr}
   b6a9e:	4b02      	ldr	r3, [pc, #8]	; (b6aa8 <HAL_RNG_GetRandomNumber+0xc>)
   b6aa0:	681b      	ldr	r3, [r3, #0]
   b6aa2:	685b      	ldr	r3, [r3, #4]
   b6aa4:	9301      	str	r3, [sp, #4]
   b6aa6:	bd08      	pop	{r3, pc}
   b6aa8:	00030218 	.word	0x00030218

000b6aac <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b6aac:	b508      	push	{r3, lr}
   b6aae:	4b02      	ldr	r3, [pc, #8]	; (b6ab8 <HAL_Delay_Microseconds+0xc>)
   b6ab0:	681b      	ldr	r3, [r3, #0]
   b6ab2:	68db      	ldr	r3, [r3, #12]
   b6ab4:	9301      	str	r3, [sp, #4]
   b6ab6:	bd08      	pop	{r3, pc}
   b6ab8:	00030218 	.word	0x00030218

000b6abc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6abc:	b508      	push	{r3, lr}
   b6abe:	4b02      	ldr	r3, [pc, #8]	; (b6ac8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6ac0:	681b      	ldr	r3, [r3, #0]
   b6ac2:	695b      	ldr	r3, [r3, #20]
   b6ac4:	9301      	str	r3, [sp, #4]
   b6ac6:	bd08      	pop	{r3, pc}
   b6ac8:	00030218 	.word	0x00030218

000b6acc <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b6acc:	b508      	push	{r3, lr}
   b6ace:	4b02      	ldr	r3, [pc, #8]	; (b6ad8 <hal_gpio_mode+0xc>)
   b6ad0:	681b      	ldr	r3, [r3, #0]
   b6ad2:	689b      	ldr	r3, [r3, #8]
   b6ad4:	9301      	str	r3, [sp, #4]
   b6ad6:	bd08      	pop	{r3, pc}
   b6ad8:	0003022c 	.word	0x0003022c

000b6adc <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b6adc:	b508      	push	{r3, lr}
   b6ade:	4b02      	ldr	r3, [pc, #8]	; (b6ae8 <hal_gpio_get_mode+0xc>)
   b6ae0:	681b      	ldr	r3, [r3, #0]
   b6ae2:	68db      	ldr	r3, [r3, #12]
   b6ae4:	9301      	str	r3, [sp, #4]
   b6ae6:	bd08      	pop	{r3, pc}
   b6ae8:	0003022c 	.word	0x0003022c

000b6aec <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b6aec:	b508      	push	{r3, lr}
   b6aee:	4b02      	ldr	r3, [pc, #8]	; (b6af8 <hal_gpio_write+0xc>)
   b6af0:	681b      	ldr	r3, [r3, #0]
   b6af2:	691b      	ldr	r3, [r3, #16]
   b6af4:	9301      	str	r3, [sp, #4]
   b6af6:	bd08      	pop	{r3, pc}
   b6af8:	0003022c 	.word	0x0003022c

000b6afc <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   b6afc:	b508      	push	{r3, lr}
   b6afe:	4b02      	ldr	r3, [pc, #8]	; (b6b08 <hal_gpio_read+0xc>)
   b6b00:	681b      	ldr	r3, [r3, #0]
   b6b02:	695b      	ldr	r3, [r3, #20]
   b6b04:	9301      	str	r3, [sp, #4]
   b6b06:	bd08      	pop	{r3, pc}
   b6b08:	0003022c 	.word	0x0003022c

000b6b0c <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b6b0c:	b508      	push	{r3, lr}
   b6b0e:	4b02      	ldr	r3, [pc, #8]	; (b6b18 <hal_i2c_set_speed+0xc>)
   b6b10:	681b      	ldr	r3, [r3, #0]
   b6b12:	681b      	ldr	r3, [r3, #0]
   b6b14:	9301      	str	r3, [sp, #4]
   b6b16:	bd08      	pop	{r3, pc}
   b6b18:	00030228 	.word	0x00030228

000b6b1c <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b6b1c:	b508      	push	{r3, lr}
   b6b1e:	4b02      	ldr	r3, [pc, #8]	; (b6b28 <hal_i2c_begin+0xc>)
   b6b20:	681b      	ldr	r3, [r3, #0]
   b6b22:	68db      	ldr	r3, [r3, #12]
   b6b24:	9301      	str	r3, [sp, #4]
   b6b26:	bd08      	pop	{r3, pc}
   b6b28:	00030228 	.word	0x00030228

000b6b2c <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b6b2c:	b508      	push	{r3, lr}
   b6b2e:	4b02      	ldr	r3, [pc, #8]	; (b6b38 <hal_i2c_begin_transmission+0xc>)
   b6b30:	681b      	ldr	r3, [r3, #0]
   b6b32:	699b      	ldr	r3, [r3, #24]
   b6b34:	9301      	str	r3, [sp, #4]
   b6b36:	bd08      	pop	{r3, pc}
   b6b38:	00030228 	.word	0x00030228

000b6b3c <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b6b3c:	b508      	push	{r3, lr}
   b6b3e:	4b02      	ldr	r3, [pc, #8]	; (b6b48 <hal_i2c_end_transmission+0xc>)
   b6b40:	681b      	ldr	r3, [r3, #0]
   b6b42:	69db      	ldr	r3, [r3, #28]
   b6b44:	9301      	str	r3, [sp, #4]
   b6b46:	bd08      	pop	{r3, pc}
   b6b48:	00030228 	.word	0x00030228

000b6b4c <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6b4c:	b508      	push	{r3, lr}
   b6b4e:	4b02      	ldr	r3, [pc, #8]	; (b6b58 <hal_i2c_write+0xc>)
   b6b50:	681b      	ldr	r3, [r3, #0]
   b6b52:	6a1b      	ldr	r3, [r3, #32]
   b6b54:	9301      	str	r3, [sp, #4]
   b6b56:	bd08      	pop	{r3, pc}
   b6b58:	00030228 	.word	0x00030228

000b6b5c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6b5c:	b508      	push	{r3, lr}
   b6b5e:	4b02      	ldr	r3, [pc, #8]	; (b6b68 <hal_i2c_available+0xc>)
   b6b60:	681b      	ldr	r3, [r3, #0]
   b6b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6b64:	9301      	str	r3, [sp, #4]
   b6b66:	bd08      	pop	{r3, pc}
   b6b68:	00030228 	.word	0x00030228

000b6b6c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6b6c:	b508      	push	{r3, lr}
   b6b6e:	4b02      	ldr	r3, [pc, #8]	; (b6b78 <hal_i2c_read+0xc>)
   b6b70:	681b      	ldr	r3, [r3, #0]
   b6b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6b74:	9301      	str	r3, [sp, #4]
   b6b76:	bd08      	pop	{r3, pc}
   b6b78:	00030228 	.word	0x00030228

000b6b7c <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6b7c:	b508      	push	{r3, lr}
   b6b7e:	4b02      	ldr	r3, [pc, #8]	; (b6b88 <hal_i2c_peek+0xc>)
   b6b80:	681b      	ldr	r3, [r3, #0]
   b6b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6b84:	9301      	str	r3, [sp, #4]
   b6b86:	bd08      	pop	{r3, pc}
   b6b88:	00030228 	.word	0x00030228

000b6b8c <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6b8c:	b508      	push	{r3, lr}
   b6b8e:	4b02      	ldr	r3, [pc, #8]	; (b6b98 <hal_i2c_flush+0xc>)
   b6b90:	681b      	ldr	r3, [r3, #0]
   b6b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6b94:	9301      	str	r3, [sp, #4]
   b6b96:	bd08      	pop	{r3, pc}
   b6b98:	00030228 	.word	0x00030228

000b6b9c <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b6b9c:	b508      	push	{r3, lr}
   b6b9e:	4b02      	ldr	r3, [pc, #8]	; (b6ba8 <hal_i2c_is_enabled+0xc>)
   b6ba0:	681b      	ldr	r3, [r3, #0]
   b6ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6ba4:	9301      	str	r3, [sp, #4]
   b6ba6:	bd08      	pop	{r3, pc}
   b6ba8:	00030228 	.word	0x00030228

000b6bac <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6bac:	b508      	push	{r3, lr}
   b6bae:	4b02      	ldr	r3, [pc, #8]	; (b6bb8 <hal_i2c_init+0xc>)
   b6bb0:	681b      	ldr	r3, [r3, #0]
   b6bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6bb4:	9301      	str	r3, [sp, #4]
   b6bb6:	bd08      	pop	{r3, pc}
   b6bb8:	00030228 	.word	0x00030228

000b6bbc <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b6bbc:	b508      	push	{r3, lr}
   b6bbe:	4b02      	ldr	r3, [pc, #8]	; (b6bc8 <if_index_to_name+0xc>)
   b6bc0:	681b      	ldr	r3, [r3, #0]
   b6bc2:	695b      	ldr	r3, [r3, #20]
   b6bc4:	9301      	str	r3, [sp, #4]
   b6bc6:	bd08      	pop	{r3, pc}
   b6bc8:	0003026c 	.word	0x0003026c

000b6bcc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6bcc:	b508      	push	{r3, lr}
   b6bce:	4b02      	ldr	r3, [pc, #8]	; (b6bd8 <inet_inet_ntop+0xc>)
   b6bd0:	681b      	ldr	r3, [r3, #0]
   b6bd2:	695b      	ldr	r3, [r3, #20]
   b6bd4:	9301      	str	r3, [sp, #4]
   b6bd6:	bd08      	pop	{r3, pc}
   b6bd8:	00030264 	.word	0x00030264

000b6bdc <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b6bdc:	b508      	push	{r3, lr}
   b6bde:	4b02      	ldr	r3, [pc, #8]	; (b6be8 <inet_htonl+0xc>)
   b6be0:	681b      	ldr	r3, [r3, #0]
   b6be2:	6a1b      	ldr	r3, [r3, #32]
   b6be4:	9301      	str	r3, [sp, #4]
   b6be6:	bd08      	pop	{r3, pc}
   b6be8:	00030264 	.word	0x00030264

000b6bec <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b6bec:	b508      	push	{r3, lr}
   b6bee:	4b02      	ldr	r3, [pc, #8]	; (b6bf8 <inet_htons+0xc>)
   b6bf0:	681b      	ldr	r3, [r3, #0]
   b6bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6bf4:	9301      	str	r3, [sp, #4]
   b6bf6:	bd08      	pop	{r3, pc}
   b6bf8:	00030264 	.word	0x00030264

000b6bfc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b6bfc:	b508      	push	{r3, lr}
   b6bfe:	4b02      	ldr	r3, [pc, #8]	; (b6c08 <netdb_freeaddrinfo+0xc>)
   b6c00:	681b      	ldr	r3, [r3, #0]
   b6c02:	689b      	ldr	r3, [r3, #8]
   b6c04:	9301      	str	r3, [sp, #4]
   b6c06:	bd08      	pop	{r3, pc}
   b6c08:	00030268 	.word	0x00030268

000b6c0c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b6c0c:	b508      	push	{r3, lr}
   b6c0e:	4b02      	ldr	r3, [pc, #8]	; (b6c18 <netdb_getaddrinfo+0xc>)
   b6c10:	681b      	ldr	r3, [r3, #0]
   b6c12:	68db      	ldr	r3, [r3, #12]
   b6c14:	9301      	str	r3, [sp, #4]
   b6c16:	bd08      	pop	{r3, pc}
   b6c18:	00030268 	.word	0x00030268

000b6c1c <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b6c1c:	b508      	push	{r3, lr}
   b6c1e:	4b02      	ldr	r3, [pc, #8]	; (b6c28 <sock_setsockopt+0xc>)
   b6c20:	681b      	ldr	r3, [r3, #0]
   b6c22:	699b      	ldr	r3, [r3, #24]
   b6c24:	9301      	str	r3, [sp, #4]
   b6c26:	bd08      	pop	{r3, pc}
   b6c28:	00030238 	.word	0x00030238

000b6c2c <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b6c2c:	b508      	push	{r3, lr}
   b6c2e:	4b02      	ldr	r3, [pc, #8]	; (b6c38 <sock_close+0xc>)
   b6c30:	681b      	ldr	r3, [r3, #0]
   b6c32:	69db      	ldr	r3, [r3, #28]
   b6c34:	9301      	str	r3, [sp, #4]
   b6c36:	bd08      	pop	{r3, pc}
   b6c38:	00030238 	.word	0x00030238

000b6c3c <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b6c3c:	b508      	push	{r3, lr}
   b6c3e:	4b02      	ldr	r3, [pc, #8]	; (b6c48 <sock_connect+0xc>)
   b6c40:	681b      	ldr	r3, [r3, #0]
   b6c42:	6a1b      	ldr	r3, [r3, #32]
   b6c44:	9301      	str	r3, [sp, #4]
   b6c46:	bd08      	pop	{r3, pc}
   b6c48:	00030238 	.word	0x00030238

000b6c4c <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b6c4c:	b508      	push	{r3, lr}
   b6c4e:	4b02      	ldr	r3, [pc, #8]	; (b6c58 <sock_recv+0xc>)
   b6c50:	681b      	ldr	r3, [r3, #0]
   b6c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6c54:	9301      	str	r3, [sp, #4]
   b6c56:	bd08      	pop	{r3, pc}
   b6c58:	00030238 	.word	0x00030238

000b6c5c <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b6c5c:	b508      	push	{r3, lr}
   b6c5e:	4b02      	ldr	r3, [pc, #8]	; (b6c68 <sock_send+0xc>)
   b6c60:	681b      	ldr	r3, [r3, #0]
   b6c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6c64:	9301      	str	r3, [sp, #4]
   b6c66:	bd08      	pop	{r3, pc}
   b6c68:	00030238 	.word	0x00030238

000b6c6c <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b6c6c:	b508      	push	{r3, lr}
   b6c6e:	4b02      	ldr	r3, [pc, #8]	; (b6c78 <sock_socket+0xc>)
   b6c70:	681b      	ldr	r3, [r3, #0]
   b6c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6c74:	9301      	str	r3, [sp, #4]
   b6c76:	bd08      	pop	{r3, pc}
   b6c78:	00030238 	.word	0x00030238

000b6c7c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b6c7c:	b508      	push	{r3, lr}
   b6c7e:	4b02      	ldr	r3, [pc, #8]	; (b6c88 <hal_spi_begin+0xc>)
   b6c80:	681b      	ldr	r3, [r3, #0]
   b6c82:	681b      	ldr	r3, [r3, #0]
   b6c84:	9301      	str	r3, [sp, #4]
   b6c86:	bd08      	pop	{r3, pc}
   b6c88:	00030230 	.word	0x00030230

000b6c8c <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b6c8c:	b508      	push	{r3, lr}
   b6c8e:	4b02      	ldr	r3, [pc, #8]	; (b6c98 <hal_spi_transfer+0xc>)
   b6c90:	681b      	ldr	r3, [r3, #0]
   b6c92:	695b      	ldr	r3, [r3, #20]
   b6c94:	9301      	str	r3, [sp, #4]
   b6c96:	bd08      	pop	{r3, pc}
   b6c98:	00030230 	.word	0x00030230

000b6c9c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6c9c:	b508      	push	{r3, lr}
   b6c9e:	4b02      	ldr	r3, [pc, #8]	; (b6ca8 <hal_spi_init+0xc>)
   b6ca0:	681b      	ldr	r3, [r3, #0]
   b6ca2:	69db      	ldr	r3, [r3, #28]
   b6ca4:	9301      	str	r3, [sp, #4]
   b6ca6:	bd08      	pop	{r3, pc}
   b6ca8:	00030230 	.word	0x00030230

000b6cac <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b6cac:	b508      	push	{r3, lr}
   b6cae:	4b02      	ldr	r3, [pc, #8]	; (b6cb8 <hal_spi_is_enabled+0xc>)
   b6cb0:	681b      	ldr	r3, [r3, #0]
   b6cb2:	6a1b      	ldr	r3, [r3, #32]
   b6cb4:	9301      	str	r3, [sp, #4]
   b6cb6:	bd08      	pop	{r3, pc}
   b6cb8:	00030230 	.word	0x00030230

000b6cbc <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b6cbc:	b508      	push	{r3, lr}
   b6cbe:	4b02      	ldr	r3, [pc, #8]	; (b6cc8 <hal_spi_info+0xc>)
   b6cc0:	681b      	ldr	r3, [r3, #0]
   b6cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6cc4:	9301      	str	r3, [sp, #4]
   b6cc6:	bd08      	pop	{r3, pc}
   b6cc8:	00030230 	.word	0x00030230

000b6ccc <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b6ccc:	b508      	push	{r3, lr}
   b6cce:	4b02      	ldr	r3, [pc, #8]	; (b6cd8 <hal_spi_set_settings+0xc>)
   b6cd0:	681b      	ldr	r3, [r3, #0]
   b6cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6cd4:	9301      	str	r3, [sp, #4]
   b6cd6:	bd08      	pop	{r3, pc}
   b6cd8:	00030230 	.word	0x00030230

000b6cdc <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b6cdc:	b508      	push	{r3, lr}
   b6cde:	4b02      	ldr	r3, [pc, #8]	; (b6ce8 <hal_spi_acquire+0xc>)
   b6ce0:	681b      	ldr	r3, [r3, #0]
   b6ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6ce4:	9301      	str	r3, [sp, #4]
   b6ce6:	bd08      	pop	{r3, pc}
   b6ce8:	00030230 	.word	0x00030230

000b6cec <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b6cec:	b508      	push	{r3, lr}
   b6cee:	4b02      	ldr	r3, [pc, #8]	; (b6cf8 <hal_spi_release+0xc>)
   b6cf0:	681b      	ldr	r3, [r3, #0]
   b6cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6cf4:	9301      	str	r3, [sp, #4]
   b6cf6:	bd08      	pop	{r3, pc}
   b6cf8:	00030230 	.word	0x00030230

000b6cfc <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b6cfc:	b508      	push	{r3, lr}
   b6cfe:	4b02      	ldr	r3, [pc, #8]	; (b6d08 <hal_usart_write+0xc>)
   b6d00:	681b      	ldr	r3, [r3, #0]
   b6d02:	68db      	ldr	r3, [r3, #12]
   b6d04:	9301      	str	r3, [sp, #4]
   b6d06:	bd08      	pop	{r3, pc}
   b6d08:	0003023c 	.word	0x0003023c

000b6d0c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b6d0c:	b508      	push	{r3, lr}
   b6d0e:	4b02      	ldr	r3, [pc, #8]	; (b6d18 <hal_usart_available+0xc>)
   b6d10:	681b      	ldr	r3, [r3, #0]
   b6d12:	691b      	ldr	r3, [r3, #16]
   b6d14:	9301      	str	r3, [sp, #4]
   b6d16:	bd08      	pop	{r3, pc}
   b6d18:	0003023c 	.word	0x0003023c

000b6d1c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b6d1c:	b508      	push	{r3, lr}
   b6d1e:	4b02      	ldr	r3, [pc, #8]	; (b6d28 <hal_usart_read+0xc>)
   b6d20:	681b      	ldr	r3, [r3, #0]
   b6d22:	695b      	ldr	r3, [r3, #20]
   b6d24:	9301      	str	r3, [sp, #4]
   b6d26:	bd08      	pop	{r3, pc}
   b6d28:	0003023c 	.word	0x0003023c

000b6d2c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b6d2c:	b508      	push	{r3, lr}
   b6d2e:	4b02      	ldr	r3, [pc, #8]	; (b6d38 <hal_usart_peek+0xc>)
   b6d30:	681b      	ldr	r3, [r3, #0]
   b6d32:	699b      	ldr	r3, [r3, #24]
   b6d34:	9301      	str	r3, [sp, #4]
   b6d36:	bd08      	pop	{r3, pc}
   b6d38:	0003023c 	.word	0x0003023c

000b6d3c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b6d3c:	b508      	push	{r3, lr}
   b6d3e:	4b02      	ldr	r3, [pc, #8]	; (b6d48 <hal_usart_flush+0xc>)
   b6d40:	681b      	ldr	r3, [r3, #0]
   b6d42:	69db      	ldr	r3, [r3, #28]
   b6d44:	9301      	str	r3, [sp, #4]
   b6d46:	bd08      	pop	{r3, pc}
   b6d48:	0003023c 	.word	0x0003023c

000b6d4c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b6d4c:	b508      	push	{r3, lr}
   b6d4e:	4b02      	ldr	r3, [pc, #8]	; (b6d58 <hal_usart_is_enabled+0xc>)
   b6d50:	681b      	ldr	r3, [r3, #0]
   b6d52:	6a1b      	ldr	r3, [r3, #32]
   b6d54:	9301      	str	r3, [sp, #4]
   b6d56:	bd08      	pop	{r3, pc}
   b6d58:	0003023c 	.word	0x0003023c

000b6d5c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6d5c:	b508      	push	{r3, lr}
   b6d5e:	4b02      	ldr	r3, [pc, #8]	; (b6d68 <hal_usart_available_data_for_write+0xc>)
   b6d60:	681b      	ldr	r3, [r3, #0]
   b6d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6d64:	9301      	str	r3, [sp, #4]
   b6d66:	bd08      	pop	{r3, pc}
   b6d68:	0003023c 	.word	0x0003023c

000b6d6c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6d6c:	b508      	push	{r3, lr}
   b6d6e:	4b02      	ldr	r3, [pc, #8]	; (b6d78 <hal_usart_init_ex+0xc>)
   b6d70:	681b      	ldr	r3, [r3, #0]
   b6d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6d74:	9301      	str	r3, [sp, #4]
   b6d76:	bd08      	pop	{r3, pc}
   b6d78:	0003023c 	.word	0x0003023c

000b6d7c <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6d7c:	b508      	push	{r3, lr}
   b6d7e:	4b02      	ldr	r3, [pc, #8]	; (b6d88 <HAL_USB_USART_Init+0xc>)
   b6d80:	681b      	ldr	r3, [r3, #0]
   b6d82:	681b      	ldr	r3, [r3, #0]
   b6d84:	9301      	str	r3, [sp, #4]
   b6d86:	bd08      	pop	{r3, pc}
   b6d88:	0003024c 	.word	0x0003024c

000b6d8c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6d8c:	b508      	push	{r3, lr}
   b6d8e:	4b02      	ldr	r3, [pc, #8]	; (b6d98 <HAL_USB_USART_Begin+0xc>)
   b6d90:	681b      	ldr	r3, [r3, #0]
   b6d92:	685b      	ldr	r3, [r3, #4]
   b6d94:	9301      	str	r3, [sp, #4]
   b6d96:	bd08      	pop	{r3, pc}
   b6d98:	0003024c 	.word	0x0003024c

000b6d9c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6d9c:	b508      	push	{r3, lr}
   b6d9e:	4b02      	ldr	r3, [pc, #8]	; (b6da8 <HAL_USB_USART_Available_Data+0xc>)
   b6da0:	681b      	ldr	r3, [r3, #0]
   b6da2:	691b      	ldr	r3, [r3, #16]
   b6da4:	9301      	str	r3, [sp, #4]
   b6da6:	bd08      	pop	{r3, pc}
   b6da8:	0003024c 	.word	0x0003024c

000b6dac <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6dac:	b508      	push	{r3, lr}
   b6dae:	4b02      	ldr	r3, [pc, #8]	; (b6db8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6db0:	681b      	ldr	r3, [r3, #0]
   b6db2:	695b      	ldr	r3, [r3, #20]
   b6db4:	9301      	str	r3, [sp, #4]
   b6db6:	bd08      	pop	{r3, pc}
   b6db8:	0003024c 	.word	0x0003024c

000b6dbc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6dbc:	b508      	push	{r3, lr}
   b6dbe:	4b02      	ldr	r3, [pc, #8]	; (b6dc8 <HAL_USB_USART_Receive_Data+0xc>)
   b6dc0:	681b      	ldr	r3, [r3, #0]
   b6dc2:	699b      	ldr	r3, [r3, #24]
   b6dc4:	9301      	str	r3, [sp, #4]
   b6dc6:	bd08      	pop	{r3, pc}
   b6dc8:	0003024c 	.word	0x0003024c

000b6dcc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6dcc:	b508      	push	{r3, lr}
   b6dce:	4b02      	ldr	r3, [pc, #8]	; (b6dd8 <HAL_USB_USART_Send_Data+0xc>)
   b6dd0:	681b      	ldr	r3, [r3, #0]
   b6dd2:	69db      	ldr	r3, [r3, #28]
   b6dd4:	9301      	str	r3, [sp, #4]
   b6dd6:	bd08      	pop	{r3, pc}
   b6dd8:	0003024c 	.word	0x0003024c

000b6ddc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6ddc:	b508      	push	{r3, lr}
   b6dde:	4b02      	ldr	r3, [pc, #8]	; (b6de8 <HAL_USB_USART_Flush_Data+0xc>)
   b6de0:	681b      	ldr	r3, [r3, #0]
   b6de2:	6a1b      	ldr	r3, [r3, #32]
   b6de4:	9301      	str	r3, [sp, #4]
   b6de6:	bd08      	pop	{r3, pc}
   b6de8:	0003024c 	.word	0x0003024c

000b6dec <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b6dec:	b508      	push	{r3, lr}
   b6dee:	4b02      	ldr	r3, [pc, #8]	; (b6df8 <panic_+0xc>)
   b6df0:	681b      	ldr	r3, [r3, #0]
   b6df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6df4:	9301      	str	r3, [sp, #4]
   b6df6:	bd08      	pop	{r3, pc}
   b6df8:	00030260 	.word	0x00030260

000b6dfc <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b6dfc:	b508      	push	{r3, lr}
   b6dfe:	4b02      	ldr	r3, [pc, #8]	; (b6e08 <log_message+0xc>)
   b6e00:	681b      	ldr	r3, [r3, #0]
   b6e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6e04:	9301      	str	r3, [sp, #4]
   b6e06:	bd08      	pop	{r3, pc}
   b6e08:	00030260 	.word	0x00030260

000b6e0c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6e0c:	b508      	push	{r3, lr}
   b6e0e:	4b02      	ldr	r3, [pc, #8]	; (b6e18 <set_system_mode+0xc>)
   b6e10:	681b      	ldr	r3, [r3, #0]
   b6e12:	685b      	ldr	r3, [r3, #4]
   b6e14:	9301      	str	r3, [sp, #4]
   b6e16:	bd08      	pop	{r3, pc}
   b6e18:	00030220 	.word	0x00030220

000b6e1c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6e1c:	b508      	push	{r3, lr}
   b6e1e:	4b02      	ldr	r3, [pc, #8]	; (b6e28 <system_delay_ms+0xc>)
   b6e20:	681b      	ldr	r3, [r3, #0]
   b6e22:	695b      	ldr	r3, [r3, #20]
   b6e24:	9301      	str	r3, [sp, #4]
   b6e26:	bd08      	pop	{r3, pc}
   b6e28:	00030220 	.word	0x00030220

000b6e2c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b6e2c:	b508      	push	{r3, lr}
   b6e2e:	4b02      	ldr	r3, [pc, #8]	; (b6e38 <system_thread_set_state+0xc>)
   b6e30:	681b      	ldr	r3, [r3, #0]
   b6e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6e34:	9301      	str	r3, [sp, #4]
   b6e36:	bd08      	pop	{r3, pc}
   b6e38:	00030220 	.word	0x00030220

000b6e3c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b6e3c:	b508      	push	{r3, lr}
   b6e3e:	4b03      	ldr	r3, [pc, #12]	; (b6e4c <system_ctrl_set_app_request_handler+0x10>)
   b6e40:	681b      	ldr	r3, [r3, #0]
   b6e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b6e46:	9301      	str	r3, [sp, #4]
   b6e48:	bd08      	pop	{r3, pc}
   b6e4a:	0000      	.short	0x0000
   b6e4c:	00030220 	.word	0x00030220

000b6e50 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6e50:	b508      	push	{r3, lr}
   b6e52:	4b03      	ldr	r3, [pc, #12]	; (b6e60 <system_ctrl_set_result+0x10>)
   b6e54:	681b      	ldr	r3, [r3, #0]
   b6e56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b6e5a:	9301      	str	r3, [sp, #4]
   b6e5c:	bd08      	pop	{r3, pc}
   b6e5e:	0000      	.short	0x0000
   b6e60:	00030220 	.word	0x00030220

000b6e64 <spark_deviceID>:
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b6e64:	b508      	push	{r3, lr}
   b6e66:	4b02      	ldr	r3, [pc, #8]	; (b6e70 <spark_deviceID+0xc>)
   b6e68:	681b      	ldr	r3, [r3, #0]
   b6e6a:	69db      	ldr	r3, [r3, #28]
   b6e6c:	9301      	str	r3, [sp, #4]
   b6e6e:	bd08      	pop	{r3, pc}
   b6e70:	00030244 	.word	0x00030244

000b6e74 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b6e74:	b508      	push	{r3, lr}
   b6e76:	4b02      	ldr	r3, [pc, #8]	; (b6e80 <spark_set_random_seed_from_cloud_handler+0xc>)
   b6e78:	681b      	ldr	r3, [r3, #0]
   b6e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6e7c:	9301      	str	r3, [sp, #4]
   b6e7e:	bd08      	pop	{r3, pc}
   b6e80:	00030244 	.word	0x00030244

000b6e84 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b6e84:	b508      	push	{r3, lr}
   b6e86:	4b02      	ldr	r3, [pc, #8]	; (b6e90 <network_connect+0xc>)
   b6e88:	681b      	ldr	r3, [r3, #0]
   b6e8a:	685b      	ldr	r3, [r3, #4]
   b6e8c:	9301      	str	r3, [sp, #4]
   b6e8e:	bd08      	pop	{r3, pc}
   b6e90:	00030240 	.word	0x00030240

000b6e94 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6e94:	b508      	push	{r3, lr}
   b6e96:	4b02      	ldr	r3, [pc, #8]	; (b6ea0 <network_connecting+0xc>)
   b6e98:	681b      	ldr	r3, [r3, #0]
   b6e9a:	689b      	ldr	r3, [r3, #8]
   b6e9c:	9301      	str	r3, [sp, #4]
   b6e9e:	bd08      	pop	{r3, pc}
   b6ea0:	00030240 	.word	0x00030240

000b6ea4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6ea4:	b508      	push	{r3, lr}
   b6ea6:	4b02      	ldr	r3, [pc, #8]	; (b6eb0 <network_disconnect+0xc>)
   b6ea8:	681b      	ldr	r3, [r3, #0]
   b6eaa:	68db      	ldr	r3, [r3, #12]
   b6eac:	9301      	str	r3, [sp, #4]
   b6eae:	bd08      	pop	{r3, pc}
   b6eb0:	00030240 	.word	0x00030240

000b6eb4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6eb4:	b508      	push	{r3, lr}
   b6eb6:	4b02      	ldr	r3, [pc, #8]	; (b6ec0 <network_ready+0xc>)
   b6eb8:	681b      	ldr	r3, [r3, #0]
   b6eba:	691b      	ldr	r3, [r3, #16]
   b6ebc:	9301      	str	r3, [sp, #4]
   b6ebe:	bd08      	pop	{r3, pc}
   b6ec0:	00030240 	.word	0x00030240

000b6ec4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6ec4:	b508      	push	{r3, lr}
   b6ec6:	4b02      	ldr	r3, [pc, #8]	; (b6ed0 <network_on+0xc>)
   b6ec8:	681b      	ldr	r3, [r3, #0]
   b6eca:	695b      	ldr	r3, [r3, #20]
   b6ecc:	9301      	str	r3, [sp, #4]
   b6ece:	bd08      	pop	{r3, pc}
   b6ed0:	00030240 	.word	0x00030240

000b6ed4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6ed4:	b508      	push	{r3, lr}
   b6ed6:	4b02      	ldr	r3, [pc, #8]	; (b6ee0 <network_off+0xc>)
   b6ed8:	681b      	ldr	r3, [r3, #0]
   b6eda:	699b      	ldr	r3, [r3, #24]
   b6edc:	9301      	str	r3, [sp, #4]
   b6ede:	bd08      	pop	{r3, pc}
   b6ee0:	00030240 	.word	0x00030240

000b6ee4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6ee4:	b508      	push	{r3, lr}
   b6ee6:	4b02      	ldr	r3, [pc, #8]	; (b6ef0 <network_listen+0xc>)
   b6ee8:	681b      	ldr	r3, [r3, #0]
   b6eea:	69db      	ldr	r3, [r3, #28]
   b6eec:	9301      	str	r3, [sp, #4]
   b6eee:	bd08      	pop	{r3, pc}
   b6ef0:	00030240 	.word	0x00030240

000b6ef4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6ef4:	b508      	push	{r3, lr}
   b6ef6:	4b02      	ldr	r3, [pc, #8]	; (b6f00 <network_listening+0xc>)
   b6ef8:	681b      	ldr	r3, [r3, #0]
   b6efa:	6a1b      	ldr	r3, [r3, #32]
   b6efc:	9301      	str	r3, [sp, #4]
   b6efe:	bd08      	pop	{r3, pc}
   b6f00:	00030240 	.word	0x00030240

000b6f04 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6f04:	b508      	push	{r3, lr}
   b6f06:	4b02      	ldr	r3, [pc, #8]	; (b6f10 <network_set_listen_timeout+0xc>)
   b6f08:	681b      	ldr	r3, [r3, #0]
   b6f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6f0c:	9301      	str	r3, [sp, #4]
   b6f0e:	bd08      	pop	{r3, pc}
   b6f10:	00030240 	.word	0x00030240

000b6f14 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6f14:	b508      	push	{r3, lr}
   b6f16:	4b02      	ldr	r3, [pc, #8]	; (b6f20 <network_get_listen_timeout+0xc>)
   b6f18:	681b      	ldr	r3, [r3, #0]
   b6f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6f1c:	9301      	str	r3, [sp, #4]
   b6f1e:	bd08      	pop	{r3, pc}
   b6f20:	00030240 	.word	0x00030240

000b6f24 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6f24:	b508      	push	{r3, lr}
   b6f26:	4b02      	ldr	r3, [pc, #8]	; (b6f30 <network_is_on+0xc>)
   b6f28:	681b      	ldr	r3, [r3, #0]
   b6f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6f2c:	9301      	str	r3, [sp, #4]
   b6f2e:	bd08      	pop	{r3, pc}
   b6f30:	00030240 	.word	0x00030240

000b6f34 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b6f34:	b508      	push	{r3, lr}
   b6f36:	4b02      	ldr	r3, [pc, #8]	; (b6f40 <network_is_off+0xc>)
   b6f38:	681b      	ldr	r3, [r3, #0]
   b6f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6f3c:	9301      	str	r3, [sp, #4]
   b6f3e:	bd08      	pop	{r3, pc}
   b6f40:	00030240 	.word	0x00030240

000b6f44 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b6f44:	b508      	push	{r3, lr}
   b6f46:	4b02      	ldr	r3, [pc, #8]	; (b6f50 <malloc+0xc>)
   b6f48:	681b      	ldr	r3, [r3, #0]
   b6f4a:	681b      	ldr	r3, [r3, #0]
   b6f4c:	9301      	str	r3, [sp, #4]
   b6f4e:	bd08      	pop	{r3, pc}
   b6f50:	0003021c 	.word	0x0003021c

000b6f54 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6f54:	b508      	push	{r3, lr}
   b6f56:	4b02      	ldr	r3, [pc, #8]	; (b6f60 <free+0xc>)
   b6f58:	681b      	ldr	r3, [r3, #0]
   b6f5a:	685b      	ldr	r3, [r3, #4]
   b6f5c:	9301      	str	r3, [sp, #4]
   b6f5e:	bd08      	pop	{r3, pc}
   b6f60:	0003021c 	.word	0x0003021c

000b6f64 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b6f64:	b508      	push	{r3, lr}
   b6f66:	4b02      	ldr	r3, [pc, #8]	; (b6f70 <realloc+0xc>)
   b6f68:	681b      	ldr	r3, [r3, #0]
   b6f6a:	689b      	ldr	r3, [r3, #8]
   b6f6c:	9301      	str	r3, [sp, #4]
   b6f6e:	bd08      	pop	{r3, pc}
   b6f70:	0003021c 	.word	0x0003021c

000b6f74 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6f74:	b508      	push	{r3, lr}
   b6f76:	4b02      	ldr	r3, [pc, #8]	; (b6f80 <vsnprintf+0xc>)
   b6f78:	681b      	ldr	r3, [r3, #0]
   b6f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6f7c:	9301      	str	r3, [sp, #4]
   b6f7e:	bd08      	pop	{r3, pc}
   b6f80:	0003021c 	.word	0x0003021c

000b6f84 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b6f84:	b508      	push	{r3, lr}
   b6f86:	4b02      	ldr	r3, [pc, #8]	; (b6f90 <_malloc_r+0xc>)
   b6f88:	681b      	ldr	r3, [r3, #0]
   b6f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6f8c:	9301      	str	r3, [sp, #4]
   b6f8e:	bd08      	pop	{r3, pc}
   b6f90:	0003021c 	.word	0x0003021c

000b6f94 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b6f94:	b508      	push	{r3, lr}
   b6f96:	4b02      	ldr	r3, [pc, #8]	; (b6fa0 <__errno+0xc>)
   b6f98:	681b      	ldr	r3, [r3, #0]
   b6f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6f9c:	9301      	str	r3, [sp, #4]
   b6f9e:	bd08      	pop	{r3, pc}
   b6fa0:	0003021c 	.word	0x0003021c

000b6fa4 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6fa4:	b508      	push	{r3, lr}
   b6fa6:	4b02      	ldr	r3, [pc, #8]	; (b6fb0 <__assert_func+0xc>)
   b6fa8:	681b      	ldr	r3, [r3, #0]
   b6faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6fac:	9301      	str	r3, [sp, #4]
   b6fae:	bd08      	pop	{r3, pc}
   b6fb0:	0003021c 	.word	0x0003021c

000b6fb4 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6fb4:	b508      	push	{r3, lr}
   b6fb6:	4b02      	ldr	r3, [pc, #8]	; (b6fc0 <newlib_impure_ptr_callback+0xc>)
   b6fb8:	681b      	ldr	r3, [r3, #0]
   b6fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6fbc:	9301      	str	r3, [sp, #4]
   b6fbe:	bd08      	pop	{r3, pc}
   b6fc0:	0003021c 	.word	0x0003021c

000b6fc4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6fc4:	2100      	movs	r1, #0
   b6fc6:	f7ff bf29 	b.w	b6e1c <system_delay_ms>
	...

000b6fcc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b6fcc:	4802      	ldr	r0, [pc, #8]	; (b6fd8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b6fce:	2300      	movs	r3, #0
   b6fd0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b6fd2:	f7ff bd53 	b.w	b6a7c <os_mutex_recursive_create>
   b6fd6:	bf00      	nop
   b6fd8:	2003e6c4 	.word	0x2003e6c4

000b6fdc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6fdc:	2200      	movs	r2, #0
   b6fde:	6840      	ldr	r0, [r0, #4]
   b6fe0:	4611      	mov	r1, r2
   b6fe2:	f7ff bf87 	b.w	b6ef4 <network_listening>

000b6fe6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6fe6:	2200      	movs	r2, #0
   b6fe8:	6840      	ldr	r0, [r0, #4]
   b6fea:	4611      	mov	r1, r2
   b6fec:	f7ff bf92 	b.w	b6f14 <network_get_listen_timeout>

000b6ff0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6ff0:	6840      	ldr	r0, [r0, #4]
   b6ff2:	2200      	movs	r2, #0
   b6ff4:	f7ff bf86 	b.w	b6f04 <network_set_listen_timeout>

000b6ff8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6ff8:	6840      	ldr	r0, [r0, #4]
   b6ffa:	2200      	movs	r2, #0
   b6ffc:	f081 0101 	eor.w	r1, r1, #1
   b7000:	f7ff bf70 	b.w	b6ee4 <network_listen>

000b7004 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7004:	2300      	movs	r3, #0
   b7006:	6840      	ldr	r0, [r0, #4]
   b7008:	461a      	mov	r2, r3
   b700a:	4619      	mov	r1, r3
   b700c:	f7ff bf62 	b.w	b6ed4 <network_off>

000b7010 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7010:	2300      	movs	r3, #0
   b7012:	6840      	ldr	r0, [r0, #4]
   b7014:	461a      	mov	r2, r3
   b7016:	4619      	mov	r1, r3
   b7018:	f7ff bf54 	b.w	b6ec4 <network_on>

000b701c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b701c:	2200      	movs	r2, #0
   b701e:	6840      	ldr	r0, [r0, #4]
   b7020:	4611      	mov	r1, r2
   b7022:	f7ff bf47 	b.w	b6eb4 <network_ready>

000b7026 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7026:	2200      	movs	r2, #0
   b7028:	6840      	ldr	r0, [r0, #4]
   b702a:	4611      	mov	r1, r2
   b702c:	f7ff bf32 	b.w	b6e94 <network_connecting>

000b7030 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7030:	6840      	ldr	r0, [r0, #4]
   b7032:	2200      	movs	r2, #0
   b7034:	2102      	movs	r1, #2
   b7036:	f7ff bf35 	b.w	b6ea4 <network_disconnect>

000b703a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b703a:	2300      	movs	r3, #0
   b703c:	6840      	ldr	r0, [r0, #4]
   b703e:	461a      	mov	r2, r3
   b7040:	f7ff bf20 	b.w	b6e84 <network_connect>

000b7044 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b7044:	4b02      	ldr	r3, [pc, #8]	; (b7050 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b7046:	2203      	movs	r2, #3
   b7048:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b704a:	4a02      	ldr	r2, [pc, #8]	; (b7054 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b704c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b704e:	4770      	bx	lr
   b7050:	2003e6c8 	.word	0x2003e6c8
   b7054:	000baf3c 	.word	0x000baf3c

000b7058 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b7058:	4770      	bx	lr

000b705a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b705a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b705c:	4606      	mov	r6, r0
   b705e:	4615      	mov	r5, r2
   b7060:	460c      	mov	r4, r1
   b7062:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b7064:	42bc      	cmp	r4, r7
   b7066:	d006      	beq.n	b7076 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b7068:	6833      	ldr	r3, [r6, #0]
   b706a:	f814 1b01 	ldrb.w	r1, [r4], #1
   b706e:	689b      	ldr	r3, [r3, #8]
   b7070:	4630      	mov	r0, r6
   b7072:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b7074:	e7f6      	b.n	b7064 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b7076:	4628      	mov	r0, r5
   b7078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b707a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b707a:	7c00      	ldrb	r0, [r0, #16]
   b707c:	2200      	movs	r2, #0
   b707e:	f7ff bd65 	b.w	b6b4c <hal_i2c_write>

000b7082 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b7082:	7c00      	ldrb	r0, [r0, #16]
   b7084:	2100      	movs	r1, #0
   b7086:	f7ff bd69 	b.w	b6b5c <hal_i2c_available>

000b708a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b708a:	7c00      	ldrb	r0, [r0, #16]
   b708c:	2100      	movs	r1, #0
   b708e:	f7ff bd6d 	b.w	b6b6c <hal_i2c_read>

000b7092 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b7092:	7c00      	ldrb	r0, [r0, #16]
   b7094:	2100      	movs	r1, #0
   b7096:	f7ff bd71 	b.w	b6b7c <hal_i2c_peek>

000b709a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b709a:	7c00      	ldrb	r0, [r0, #16]
   b709c:	2100      	movs	r1, #0
   b709e:	f7ff bd75 	b.w	b6b8c <hal_i2c_flush>

000b70a2 <_ZN7TwoWireD0Ev>:
   b70a2:	b510      	push	{r4, lr}
   b70a4:	2114      	movs	r1, #20
   b70a6:	4604      	mov	r4, r0
   b70a8:	f7fd fd09 	bl	b4abe <_ZdlPvj>
   b70ac:	4620      	mov	r0, r4
   b70ae:	bd10      	pop	{r4, pc}

000b70b0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b70b0:	b538      	push	{r3, r4, r5, lr}
   b70b2:	4604      	mov	r4, r0
   b70b4:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b70b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b70ba:	2200      	movs	r2, #0
   b70bc:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b70c0:	4b09      	ldr	r3, [pc, #36]	; (b70e8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b70c2:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b70c4:	4608      	mov	r0, r1
   b70c6:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b70c8:	4629      	mov	r1, r5
   b70ca:	f7ff fd6f 	bl	b6bac <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b70ce:	30bf      	adds	r0, #191	; 0xbf
   b70d0:	d108      	bne.n	b70e4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b70d2:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b70d4:	07db      	lsls	r3, r3, #31
   b70d6:	d505      	bpl.n	b70e4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b70d8:	6868      	ldr	r0, [r5, #4]
   b70da:	f7ff ff3b 	bl	b6f54 <free>
    free(conf.tx_buffer);
   b70de:	68e8      	ldr	r0, [r5, #12]
   b70e0:	f7ff ff38 	bl	b6f54 <free>
}
   b70e4:	4620      	mov	r0, r4
   b70e6:	bd38      	pop	{r3, r4, r5, pc}
   b70e8:	000baf78 	.word	0x000baf78

000b70ec <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b70ec:	7c00      	ldrb	r0, [r0, #16]
   b70ee:	2200      	movs	r2, #0
   b70f0:	f7ff bd0c 	b.w	b6b0c <hal_i2c_set_speed>

000b70f4 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b70f4:	2300      	movs	r3, #0
   b70f6:	7c00      	ldrb	r0, [r0, #16]
   b70f8:	461a      	mov	r2, r3
   b70fa:	4619      	mov	r1, r3
   b70fc:	f7ff bd0e 	b.w	b6b1c <hal_i2c_begin>

000b7100 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b7100:	7c00      	ldrb	r0, [r0, #16]
   b7102:	2200      	movs	r2, #0
   b7104:	f7ff bd12 	b.w	b6b2c <hal_i2c_begin_transmission>

000b7108 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b7108:	b2c9      	uxtb	r1, r1
   b710a:	f7ff bff9 	b.w	b7100 <_ZN7TwoWire17beginTransmissionEh>

000b710e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b710e:	7c00      	ldrb	r0, [r0, #16]
   b7110:	2200      	movs	r2, #0
   b7112:	f7ff bd13 	b.w	b6b3c <hal_i2c_end_transmission>

000b7116 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b7116:	2101      	movs	r1, #1
   b7118:	f7ff bff9 	b.w	b710e <_ZN7TwoWire15endTransmissionEh>

000b711c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b711c:	4770      	bx	lr

000b711e <_ZN9IPAddressD0Ev>:
   b711e:	b510      	push	{r4, lr}
   b7120:	2118      	movs	r1, #24
   b7122:	4604      	mov	r4, r0
   b7124:	f7fd fccb 	bl	b4abe <_ZdlPvj>
   b7128:	4620      	mov	r0, r4
   b712a:	bd10      	pop	{r4, pc}

000b712c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b712c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b712e:	7d03      	ldrb	r3, [r0, #20]
   b7130:	2b06      	cmp	r3, #6
{
   b7132:	b08d      	sub	sp, #52	; 0x34
   b7134:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7136:	f100 0704 	add.w	r7, r0, #4
   b713a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b713e:	d012      	beq.n	b7166 <_ZNK9IPAddress7printToER5Print+0x3a>
   b7140:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b7144:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b7148:	220a      	movs	r2, #10
   b714a:	4630      	mov	r0, r6
   b714c:	f000 f969 	bl	b7422 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b7150:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b7152:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b7154:	d019      	beq.n	b718a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b7156:	2c00      	cmp	r4, #0
   b7158:	d0f4      	beq.n	b7144 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b715a:	212e      	movs	r1, #46	; 0x2e
   b715c:	4630      	mov	r0, r6
   b715e:	f000 f951 	bl	b7404 <_ZN5Print5printEc>
   b7162:	4404      	add	r4, r0
   b7164:	e7ee      	b.n	b7144 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7166:	232f      	movs	r3, #47	; 0x2f
   b7168:	466a      	mov	r2, sp
   b716a:	4639      	mov	r1, r7
   b716c:	200a      	movs	r0, #10
		buf[0] = 0;
   b716e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7172:	f7ff fd2b 	bl	b6bcc <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b7176:	4668      	mov	r0, sp
   b7178:	f7fd fc40 	bl	b49fc <strlen>
   b717c:	6833      	ldr	r3, [r6, #0]
   b717e:	4602      	mov	r2, r0
   b7180:	68db      	ldr	r3, [r3, #12]
   b7182:	4669      	mov	r1, sp
   b7184:	4630      	mov	r0, r6
   b7186:	4798      	blx	r3
   b7188:	4604      	mov	r4, r0
    }
    return n;
}
   b718a:	4620      	mov	r0, r4
   b718c:	b00d      	add	sp, #52	; 0x34
   b718e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7190 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b7190:	b510      	push	{r4, lr}
   b7192:	4b05      	ldr	r3, [pc, #20]	; (b71a8 <_ZN9IPAddressC1Ev+0x18>)
   b7194:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b7196:	2211      	movs	r2, #17
   b7198:	f840 3b04 	str.w	r3, [r0], #4
   b719c:	2100      	movs	r1, #0
   b719e:	f001 f99a 	bl	b84d6 <memset>
}
   b71a2:	4620      	mov	r0, r4
   b71a4:	bd10      	pop	{r4, pc}
   b71a6:	bf00      	nop
   b71a8:	000bafa0 	.word	0x000bafa0

000b71ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b71ac:	4603      	mov	r3, r0
   b71ae:	4a07      	ldr	r2, [pc, #28]	; (b71cc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b71b0:	b510      	push	{r4, lr}
   b71b2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b71b6:	f101 0210 	add.w	r2, r1, #16
   b71ba:	f851 4b04 	ldr.w	r4, [r1], #4
   b71be:	f843 4b04 	str.w	r4, [r3], #4
   b71c2:	4291      	cmp	r1, r2
   b71c4:	d1f9      	bne.n	b71ba <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b71c6:	780a      	ldrb	r2, [r1, #0]
   b71c8:	701a      	strb	r2, [r3, #0]
}
   b71ca:	bd10      	pop	{r4, pc}
   b71cc:	000bafa0 	.word	0x000bafa0

000b71d0 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b71d0:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b71d2:	2b04      	cmp	r3, #4
   b71d4:	d104      	bne.n	b71e0 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b71d6:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b71d8:	3800      	subs	r0, #0
   b71da:	bf18      	it	ne
   b71dc:	2001      	movne	r0, #1
   b71de:	4770      	bx	lr
    } else if (version() == 6) {
   b71e0:	2b06      	cmp	r3, #6
   b71e2:	d107      	bne.n	b71f4 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b71e4:	6843      	ldr	r3, [r0, #4]
   b71e6:	b93b      	cbnz	r3, b71f8 <_ZNK9IPAddresscvbEv+0x28>
   b71e8:	6883      	ldr	r3, [r0, #8]
   b71ea:	b92b      	cbnz	r3, b71f8 <_ZNK9IPAddresscvbEv+0x28>
   b71ec:	68c3      	ldr	r3, [r0, #12]
   b71ee:	b91b      	cbnz	r3, b71f8 <_ZNK9IPAddresscvbEv+0x28>
   b71f0:	6900      	ldr	r0, [r0, #16]
   b71f2:	e7f1      	b.n	b71d8 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b71f4:	2000      	movs	r0, #0
   b71f6:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b71f8:	2001      	movs	r0, #1
}
   b71fa:	4770      	bx	lr

000b71fc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b71fc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b71fe:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b7202:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b7206:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b720a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b720e:	2304      	movs	r3, #4
   b7210:	6041      	str	r1, [r0, #4]
   b7212:	7503      	strb	r3, [r0, #20]
}
   b7214:	bd10      	pop	{r4, pc}
	...

000b7218 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b7218:	b507      	push	{r0, r1, r2, lr}
   b721a:	4b06      	ldr	r3, [pc, #24]	; (b7234 <_ZN9IPAddressC1EPKh+0x1c>)
   b721c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b721e:	78cb      	ldrb	r3, [r1, #3]
   b7220:	9300      	str	r3, [sp, #0]
   b7222:	788b      	ldrb	r3, [r1, #2]
   b7224:	784a      	ldrb	r2, [r1, #1]
   b7226:	7809      	ldrb	r1, [r1, #0]
   b7228:	f7ff ffe8 	bl	b71fc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b722c:	b003      	add	sp, #12
   b722e:	f85d fb04 	ldr.w	pc, [sp], #4
   b7232:	bf00      	nop
   b7234:	000bafa0 	.word	0x000bafa0

000b7238 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b7238:	4b01      	ldr	r3, [pc, #4]	; (b7240 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b723a:	4a02      	ldr	r2, [pc, #8]	; (b7244 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b723c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b723e:	4770      	bx	lr
   b7240:	2003e6d0 	.word	0x2003e6d0
   b7244:	000bafac 	.word	0x000bafac

000b7248 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b7248:	2300      	movs	r3, #0
   b724a:	6840      	ldr	r0, [r0, #4]
   b724c:	461a      	mov	r2, r3
   b724e:	f7ff be19 	b.w	b6e84 <network_connect>

000b7252 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b7252:	6840      	ldr	r0, [r0, #4]
   b7254:	2200      	movs	r2, #0
   b7256:	2102      	movs	r1, #2
   b7258:	f7ff be24 	b.w	b6ea4 <network_disconnect>

000b725c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b725c:	2200      	movs	r2, #0
   b725e:	6840      	ldr	r0, [r0, #4]
   b7260:	4611      	mov	r1, r2
   b7262:	f7ff be17 	b.w	b6e94 <network_connecting>

000b7266 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b7266:	2200      	movs	r2, #0
   b7268:	6840      	ldr	r0, [r0, #4]
   b726a:	4611      	mov	r1, r2
   b726c:	f7ff be22 	b.w	b6eb4 <network_ready>

000b7270 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b7270:	2300      	movs	r3, #0
   b7272:	6840      	ldr	r0, [r0, #4]
   b7274:	461a      	mov	r2, r3
   b7276:	4619      	mov	r1, r3
   b7278:	f7ff be24 	b.w	b6ec4 <network_on>

000b727c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b727c:	2300      	movs	r3, #0
   b727e:	6840      	ldr	r0, [r0, #4]
   b7280:	461a      	mov	r2, r3
   b7282:	4619      	mov	r1, r3
   b7284:	f7ff be26 	b.w	b6ed4 <network_off>

000b7288 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b7288:	6840      	ldr	r0, [r0, #4]
   b728a:	2100      	movs	r1, #0
   b728c:	f7ff be4a 	b.w	b6f24 <network_is_on>

000b7290 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b7290:	6840      	ldr	r0, [r0, #4]
   b7292:	2100      	movs	r1, #0
   b7294:	f7ff be4e 	b.w	b6f34 <network_is_off>

000b7298 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b7298:	6840      	ldr	r0, [r0, #4]
   b729a:	2200      	movs	r2, #0
   b729c:	f081 0101 	eor.w	r1, r1, #1
   b72a0:	f7ff be20 	b.w	b6ee4 <network_listen>

000b72a4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b72a4:	6840      	ldr	r0, [r0, #4]
   b72a6:	2200      	movs	r2, #0
   b72a8:	f7ff be2c 	b.w	b6f04 <network_set_listen_timeout>

000b72ac <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b72ac:	2200      	movs	r2, #0
   b72ae:	6840      	ldr	r0, [r0, #4]
   b72b0:	4611      	mov	r1, r2
   b72b2:	f7ff be2f 	b.w	b6f14 <network_get_listen_timeout>

000b72b6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b72b6:	2200      	movs	r2, #0
   b72b8:	6840      	ldr	r0, [r0, #4]
   b72ba:	4611      	mov	r1, r2
   b72bc:	f7ff be1a 	b.w	b6ef4 <network_listening>

000b72c0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b72c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b72c4:	b095      	sub	sp, #84	; 0x54
   b72c6:	4614      	mov	r4, r2
   b72c8:	460d      	mov	r5, r1
   b72ca:	4607      	mov	r7, r0
    IPAddress addr;
   b72cc:	f7ff ff60 	bl	b7190 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b72d0:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b72d2:	221c      	movs	r2, #28
   b72d4:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b72d6:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b72d8:	f001 f8fd 	bl	b84d6 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b72dc:	2340      	movs	r3, #64	; 0x40
   b72de:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b72e0:	4620      	mov	r0, r4
   b72e2:	466b      	mov	r3, sp
   b72e4:	aa0c      	add	r2, sp, #48	; 0x30
   b72e6:	2100      	movs	r1, #0
   b72e8:	f7ff fc90 	bl	b6c0c <netdb_getaddrinfo>
    if (!r) {
   b72ec:	4604      	mov	r4, r0
   b72ee:	2800      	cmp	r0, #0
   b72f0:	d14b      	bne.n	b738a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b72f2:	4602      	mov	r2, r0
   b72f4:	2101      	movs	r1, #1
   b72f6:	6868      	ldr	r0, [r5, #4]
   b72f8:	f7ff fddc 	bl	b6eb4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b72fc:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b72fe:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7300:	4622      	mov	r2, r4
   b7302:	6868      	ldr	r0, [r5, #4]
   b7304:	f7ff fdd6 	bl	b6eb4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7308:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b730a:	4681      	mov	r9, r0
        bool ok = false;
   b730c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b730e:	2e00      	cmp	r6, #0
   b7310:	d03b      	beq.n	b738a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b7312:	2900      	cmp	r1, #0
   b7314:	d139      	bne.n	b738a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b7316:	6873      	ldr	r3, [r6, #4]
   b7318:	2b02      	cmp	r3, #2
   b731a:	d003      	beq.n	b7324 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b731c:	2b0a      	cmp	r3, #10
   b731e:	d011      	beq.n	b7344 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7320:	69f6      	ldr	r6, [r6, #28]
   b7322:	e7f4      	b.n	b730e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b7324:	f1b8 0f00 	cmp.w	r8, #0
   b7328:	d0fa      	beq.n	b7320 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b732a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b732c:	a806      	add	r0, sp, #24
   b732e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b7330:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b7332:	f7ff ff71 	bl	b7218 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7336:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7338:	1d3c      	adds	r4, r7, #4
   b733a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b733c:	682b      	ldr	r3, [r5, #0]
   b733e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7340:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b7342:	e7ed      	b.n	b7320 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b7344:	f1b9 0f00 	cmp.w	r9, #0
   b7348:	d0ea      	beq.n	b7320 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b734a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b734c:	2210      	movs	r2, #16
   b734e:	a801      	add	r0, sp, #4
   b7350:	f001 f8c1 	bl	b84d6 <memset>
                    a.v = 6;
   b7354:	2306      	movs	r3, #6
   b7356:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b735a:	ad01      	add	r5, sp, #4
   b735c:	f104 0308 	add.w	r3, r4, #8
   b7360:	3418      	adds	r4, #24
   b7362:	6818      	ldr	r0, [r3, #0]
   b7364:	6859      	ldr	r1, [r3, #4]
   b7366:	462a      	mov	r2, r5
   b7368:	c203      	stmia	r2!, {r0, r1}
   b736a:	3308      	adds	r3, #8
   b736c:	42a3      	cmp	r3, r4
   b736e:	4615      	mov	r5, r2
   b7370:	d1f7      	bne.n	b7362 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b7372:	a901      	add	r1, sp, #4
   b7374:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b7376:	ad07      	add	r5, sp, #28
   b7378:	f7ff ff18 	bl	b71ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b737c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b737e:	1d3c      	adds	r4, r7, #4
   b7380:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7382:	682b      	ldr	r3, [r5, #0]
   b7384:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7386:	4649      	mov	r1, r9
   b7388:	e7ca      	b.n	b7320 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b738a:	9800      	ldr	r0, [sp, #0]
   b738c:	f7ff fc36 	bl	b6bfc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b7390:	4638      	mov	r0, r7
   b7392:	b015      	add	sp, #84	; 0x54
   b7394:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b7398 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b7398:	4b02      	ldr	r3, [pc, #8]	; (b73a4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b739a:	4a03      	ldr	r2, [pc, #12]	; (b73a8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b739c:	601a      	str	r2, [r3, #0]
   b739e:	2200      	movs	r2, #0
   b73a0:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b73a2:	4770      	bx	lr
   b73a4:	2003e6d4 	.word	0x2003e6d4
   b73a8:	000bafb8 	.word	0x000bafb8

000b73ac <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b73ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b73ae:	4606      	mov	r6, r0
   b73b0:	460d      	mov	r5, r1
  size_t n = 0;
   b73b2:	188f      	adds	r7, r1, r2
   b73b4:	2400      	movs	r4, #0
  while (size--) {
   b73b6:	42bd      	cmp	r5, r7
   b73b8:	d00c      	beq.n	b73d4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b73ba:	6833      	ldr	r3, [r6, #0]
   b73bc:	f815 1b01 	ldrb.w	r1, [r5], #1
   b73c0:	689b      	ldr	r3, [r3, #8]
   b73c2:	4630      	mov	r0, r6
   b73c4:	4798      	blx	r3
     if (chunk>=0)
   b73c6:	1e03      	subs	r3, r0, #0
   b73c8:	db01      	blt.n	b73ce <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b73ca:	441c      	add	r4, r3
  while (size--) {
   b73cc:	e7f3      	b.n	b73b6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b73ce:	2c00      	cmp	r4, #0
   b73d0:	bf08      	it	eq
   b73d2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b73d4:	4620      	mov	r0, r4
   b73d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b73d8 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b73d8:	b513      	push	{r0, r1, r4, lr}
   b73da:	4604      	mov	r4, r0
    }
   b73dc:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b73de:	b159      	cbz	r1, b73f8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b73e0:	9101      	str	r1, [sp, #4]
   b73e2:	f7fd fb0b 	bl	b49fc <strlen>
   b73e6:	6823      	ldr	r3, [r4, #0]
   b73e8:	9901      	ldr	r1, [sp, #4]
   b73ea:	68db      	ldr	r3, [r3, #12]
   b73ec:	4602      	mov	r2, r0
   b73ee:	4620      	mov	r0, r4
    }
   b73f0:	b002      	add	sp, #8
   b73f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b73f6:	4718      	bx	r3
    }
   b73f8:	b002      	add	sp, #8
   b73fa:	bd10      	pop	{r4, pc}

000b73fc <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b73fc:	b508      	push	{r3, lr}
  return write(str);
   b73fe:	f7ff ffeb 	bl	b73d8 <_ZN5Print5writeEPKc>
}
   b7402:	bd08      	pop	{r3, pc}

000b7404 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b7404:	6803      	ldr	r3, [r0, #0]
   b7406:	689b      	ldr	r3, [r3, #8]
   b7408:	4718      	bx	r3

000b740a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b740a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b740c:	210d      	movs	r1, #13
{
   b740e:	4605      	mov	r5, r0
  size_t n = print('\r');
   b7410:	f7ff fff8 	bl	b7404 <_ZN5Print5printEc>
  n += print('\n');
   b7414:	210a      	movs	r1, #10
  size_t n = print('\r');
   b7416:	4604      	mov	r4, r0
  n += print('\n');
   b7418:	4628      	mov	r0, r5
   b741a:	f7ff fff3 	bl	b7404 <_ZN5Print5printEc>
  return n;
}
   b741e:	4420      	add	r0, r4
   b7420:	bd38      	pop	{r3, r4, r5, pc}

000b7422 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b7422:	b530      	push	{r4, r5, lr}
   b7424:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b7426:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b7428:	2a01      	cmp	r2, #1
  *str = '\0';
   b742a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b742e:	bf98      	it	ls
   b7430:	220a      	movls	r2, #10
   b7432:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b7434:	460d      	mov	r5, r1
   b7436:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b743a:	fb01 5312 	mls	r3, r1, r2, r5
   b743e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7442:	2b09      	cmp	r3, #9
   b7444:	bf94      	ite	ls
   b7446:	3330      	addls	r3, #48	; 0x30
   b7448:	3337      	addhi	r3, #55	; 0x37
   b744a:	b2db      	uxtb	r3, r3
  } while(n);
   b744c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b744e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b7452:	d9ef      	bls.n	b7434 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b7454:	4621      	mov	r1, r4
   b7456:	f7ff ffbf 	bl	b73d8 <_ZN5Print5writeEPKc>
}
   b745a:	b00b      	add	sp, #44	; 0x2c
   b745c:	bd30      	pop	{r4, r5, pc}

000b745e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b745e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7462:	b086      	sub	sp, #24
   b7464:	af00      	add	r7, sp, #0
   b7466:	4605      	mov	r5, r0
   b7468:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b746a:	1d38      	adds	r0, r7, #4
   b746c:	2114      	movs	r1, #20
{
   b746e:	4614      	mov	r4, r2
    va_copy(args2, args);
   b7470:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b7472:	f7ff fd7f 	bl	b6f74 <vsnprintf>

    if (n<bufsize)
   b7476:	2813      	cmp	r0, #19
   b7478:	d80e      	bhi.n	b7498 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b747a:	1d39      	adds	r1, r7, #4
   b747c:	4628      	mov	r0, r5
   b747e:	f7ff ffab 	bl	b73d8 <_ZN5Print5writeEPKc>
   b7482:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b7484:	b11e      	cbz	r6, b748e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b7486:	4628      	mov	r0, r5
   b7488:	f7ff ffbf 	bl	b740a <_ZN5Print7printlnEv>
   b748c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b748e:	4620      	mov	r0, r4
   b7490:	3718      	adds	r7, #24
   b7492:	46bd      	mov	sp, r7
   b7494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b7498:	f100 0308 	add.w	r3, r0, #8
   b749c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b74a0:	46e8      	mov	r8, sp
        char bigger[n+1];
   b74a2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b74a6:	4622      	mov	r2, r4
   b74a8:	1c41      	adds	r1, r0, #1
   b74aa:	683b      	ldr	r3, [r7, #0]
   b74ac:	4668      	mov	r0, sp
   b74ae:	f7ff fd61 	bl	b6f74 <vsnprintf>
  return write(str);
   b74b2:	4669      	mov	r1, sp
   b74b4:	4628      	mov	r0, r5
   b74b6:	f7ff ff8f 	bl	b73d8 <_ZN5Print5writeEPKc>
   b74ba:	4604      	mov	r4, r0
   b74bc:	46c5      	mov	sp, r8
   b74be:	e7e1      	b.n	b7484 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b74c0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b74c0:	4b01      	ldr	r3, [pc, #4]	; (b74c8 <_GLOBAL__sub_I_RGB+0x8>)
   b74c2:	2200      	movs	r2, #0
   b74c4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b74c6:	4770      	bx	lr
   b74c8:	2003e6dc 	.word	0x2003e6dc

000b74cc <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b74cc:	2100      	movs	r1, #0
   b74ce:	f7ff bc0d 	b.w	b6cec <hal_spi_release>

000b74d2 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b74d2:	2100      	movs	r1, #0
   b74d4:	f7ff bc02 	b.w	b6cdc <hal_spi_acquire>

000b74d8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b74d8:	b510      	push	{r4, lr}
   b74da:	4604      	mov	r4, r0
   b74dc:	4608      	mov	r0, r1
{
    _spi = spi;
   b74de:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b74e0:	f7ff fbdc 	bl	b6c9c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b74e4:	2300      	movs	r3, #0
   b74e6:	6063      	str	r3, [r4, #4]
}
   b74e8:	4620      	mov	r0, r4
   b74ea:	bd10      	pop	{r4, pc}

000b74ec <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b74ec:	b513      	push	{r0, r1, r4, lr}
   b74ee:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b74f0:	7800      	ldrb	r0, [r0, #0]
   b74f2:	f7ff ffee 	bl	b74d2 <_ZN8SPIClass4lockEv.isra.0>
   b74f6:	b958      	cbnz	r0, b7510 <_ZN8SPIClass5beginEv+0x24>
   b74f8:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b74fa:	9001      	str	r0, [sp, #4]
   b74fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7500:	f7ff fbbc 	bl	b6c7c <hal_spi_begin>
        unlock();
   b7504:	9801      	ldr	r0, [sp, #4]
    }
}
   b7506:	b002      	add	sp, #8
   b7508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b750c:	f7ff bfde 	b.w	b74cc <_ZN8SPIClass6unlockEv.isra.0>
   b7510:	b002      	add	sp, #8
   b7512:	bd10      	pop	{r4, pc}

000b7514 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b7514:	7800      	ldrb	r0, [r0, #0]
   b7516:	f7ff bfd9 	b.w	b74cc <_ZN8SPIClass6unlockEv.isra.0>
	...

000b751c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b751c:	0840      	lsrs	r0, r0, #1
{
   b751e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b7520:	6018      	str	r0, [r3, #0]
   b7522:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b7524:	6818      	ldr	r0, [r3, #0]
   b7526:	4288      	cmp	r0, r1
   b7528:	b2e5      	uxtb	r5, r4
   b752a:	d906      	bls.n	b753a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b752c:	3401      	adds	r4, #1
   b752e:	2c08      	cmp	r4, #8
   b7530:	d002      	beq.n	b7538 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b7532:	0840      	lsrs	r0, r0, #1
   b7534:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b7536:	e7f5      	b.n	b7524 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b7538:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b753a:	4b02      	ldr	r3, [pc, #8]	; (b7544 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b753c:	5d5b      	ldrb	r3, [r3, r5]
   b753e:	7013      	strb	r3, [r2, #0]
}
   b7540:	bd30      	pop	{r4, r5, pc}
   b7542:	bf00      	nop
   b7544:	000bafec 	.word	0x000bafec

000b7548 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b7548:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b754c:	4606      	mov	r6, r0
   b754e:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b7550:	7800      	ldrb	r0, [r0, #0]
{
   b7552:	460c      	mov	r4, r1
    CHECK(lock());
   b7554:	f7ff ffbd 	bl	b74d2 <_ZN8SPIClass4lockEv.isra.0>
   b7558:	2800      	cmp	r0, #0
   b755a:	db1b      	blt.n	b7594 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b755c:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b755e:	2214      	movs	r2, #20
   b7560:	2100      	movs	r1, #0
   b7562:	a809      	add	r0, sp, #36	; 0x24
   b7564:	f000 ffb7 	bl	b84d6 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b7568:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b756a:	2200      	movs	r2, #0
   b756c:	a909      	add	r1, sp, #36	; 0x24
   b756e:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b7570:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b7574:	f7ff fba2 	bl	b6cbc <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b7578:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b757c:	b113      	cbz	r3, b7584 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b757e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b7582:	b155      	cbz	r5, b759a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b7584:	2700      	movs	r7, #0
   b7586:	46b9      	mov	r9, r7
   b7588:	46b8      	mov	r8, r7
   b758a:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b758c:	7923      	ldrb	r3, [r4, #4]
   b758e:	b15d      	cbz	r5, b75a8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b7590:	b1c3      	cbz	r3, b75c4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b7592:	2000      	movs	r0, #0
}
   b7594:	b00f      	add	sp, #60	; 0x3c
   b7596:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b759a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b759e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b75a2:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b75a6:	e7f1      	b.n	b758c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b75a8:	2b00      	cmp	r3, #0
   b75aa:	d135      	bne.n	b7618 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b75ac:	68a3      	ldr	r3, [r4, #8]
   b75ae:	4543      	cmp	r3, r8
   b75b0:	d108      	bne.n	b75c4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b75b2:	f88d 9020 	strb.w	r9, [sp, #32]
   b75b6:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b75ba:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b75be:	89a3      	ldrh	r3, [r4, #12]
   b75c0:	429a      	cmp	r2, r3
   b75c2:	d0e6      	beq.n	b7592 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b75c4:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b75c6:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b75c8:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b75cc:	980a      	ldr	r0, [sp, #40]	; 0x28
   b75ce:	ab04      	add	r3, sp, #16
   b75d0:	f10d 020f 	add.w	r2, sp, #15
   b75d4:	f7ff ffa2 	bl	b751c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b75d8:	7921      	ldrb	r1, [r4, #4]
   b75da:	b985      	cbnz	r5, b75fe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b75dc:	b989      	cbnz	r1, b7602 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b75de:	68a3      	ldr	r3, [r4, #8]
   b75e0:	4543      	cmp	r3, r8
   b75e2:	d30e      	bcc.n	b7602 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b75e4:	f88d 9020 	strb.w	r9, [sp, #32]
   b75e8:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b75ec:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b75f0:	89a3      	ldrh	r3, [r4, #12]
   b75f2:	429a      	cmp	r2, r3
   b75f4:	d105      	bne.n	b7602 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b75f6:	9b04      	ldr	r3, [sp, #16]
   b75f8:	4543      	cmp	r3, r8
   b75fa:	d102      	bne.n	b7602 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b75fc:	e7c9      	b.n	b7592 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b75fe:	2900      	cmp	r1, #0
   b7600:	d1f9      	bne.n	b75f6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b7602:	2300      	movs	r3, #0
   b7604:	9301      	str	r3, [sp, #4]
   b7606:	7b63      	ldrb	r3, [r4, #13]
   b7608:	9300      	str	r3, [sp, #0]
   b760a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b760e:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b7610:	7830      	ldrb	r0, [r6, #0]
   b7612:	f7ff fb5b 	bl	b6ccc <hal_spi_set_settings>
   b7616:	e7bc      	b.n	b7592 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b7618:	e9cd 5500 	strd	r5, r5, [sp]
   b761c:	462b      	mov	r3, r5
   b761e:	462a      	mov	r2, r5
   b7620:	2101      	movs	r1, #1
   b7622:	e7f5      	b.n	b7610 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b7624 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b7624:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b7626:	7800      	ldrb	r0, [r0, #0]
   b7628:	f7ff fb30 	bl	b6c8c <hal_spi_transfer>
}
   b762c:	b2c0      	uxtb	r0, r0
   b762e:	bd08      	pop	{r3, pc}

000b7630 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b7630:	b510      	push	{r4, lr}
   b7632:	4604      	mov	r4, r0
{
	free(buffer);
   b7634:	6800      	ldr	r0, [r0, #0]
   b7636:	f7ff fc8d 	bl	b6f54 <free>
}
   b763a:	4620      	mov	r0, r4
   b763c:	bd10      	pop	{r4, pc}

000b763e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b763e:	b510      	push	{r4, lr}
   b7640:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b7642:	6800      	ldr	r0, [r0, #0]
   b7644:	b108      	cbz	r0, b764a <_ZN6String10invalidateEv+0xc>
   b7646:	f7ff fc85 	bl	b6f54 <free>
	buffer = NULL;
   b764a:	2300      	movs	r3, #0
	capacity = len = 0;
   b764c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b7650:	6023      	str	r3, [r4, #0]
}
   b7652:	bd10      	pop	{r4, pc}

000b7654 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b7654:	b538      	push	{r3, r4, r5, lr}
   b7656:	4604      	mov	r4, r0
   b7658:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b765a:	6800      	ldr	r0, [r0, #0]
   b765c:	3101      	adds	r1, #1
   b765e:	f7ff fc81 	bl	b6f64 <realloc>
	if (newbuffer) {
   b7662:	b110      	cbz	r0, b766a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b7664:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b7668:	2001      	movs	r0, #1
	}
	return 0;
}
   b766a:	bd38      	pop	{r3, r4, r5, pc}

000b766c <_ZN6String7reserveEj>:
{
   b766c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b766e:	6803      	ldr	r3, [r0, #0]
{
   b7670:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b7672:	b123      	cbz	r3, b767e <_ZN6String7reserveEj+0x12>
   b7674:	6843      	ldr	r3, [r0, #4]
   b7676:	428b      	cmp	r3, r1
   b7678:	d301      	bcc.n	b767e <_ZN6String7reserveEj+0x12>
   b767a:	2001      	movs	r0, #1
}
   b767c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b767e:	4620      	mov	r0, r4
   b7680:	f7ff ffe8 	bl	b7654 <_ZN6String12changeBufferEj>
   b7684:	2800      	cmp	r0, #0
   b7686:	d0f9      	beq.n	b767c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b7688:	68a3      	ldr	r3, [r4, #8]
   b768a:	2b00      	cmp	r3, #0
   b768c:	d1f5      	bne.n	b767a <_ZN6String7reserveEj+0xe>
   b768e:	6822      	ldr	r2, [r4, #0]
   b7690:	7013      	strb	r3, [r2, #0]
   b7692:	e7f2      	b.n	b767a <_ZN6String7reserveEj+0xe>

000b7694 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b7694:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7696:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b7698:	4611      	mov	r1, r2
   b769a:	9201      	str	r2, [sp, #4]
{
   b769c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b769e:	f7ff ffe5 	bl	b766c <_ZN6String7reserveEj>
   b76a2:	9a01      	ldr	r2, [sp, #4]
   b76a4:	b928      	cbnz	r0, b76b2 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b76a6:	4620      	mov	r0, r4
   b76a8:	f7ff ffc9 	bl	b763e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b76ac:	4620      	mov	r0, r4
   b76ae:	b003      	add	sp, #12
   b76b0:	bd30      	pop	{r4, r5, pc}
	len = length;
   b76b2:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b76b4:	4629      	mov	r1, r5
   b76b6:	6820      	ldr	r0, [r4, #0]
   b76b8:	f000 feff 	bl	b84ba <memcpy>
	buffer[len] = 0;
   b76bc:	6822      	ldr	r2, [r4, #0]
   b76be:	68a3      	ldr	r3, [r4, #8]
   b76c0:	2100      	movs	r1, #0
   b76c2:	54d1      	strb	r1, [r2, r3]
	return *this;
   b76c4:	e7f2      	b.n	b76ac <_ZN6String4copyEPKcj+0x18>

000b76c6 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b76c6:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b76c8:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b76ca:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b76ce:	4604      	mov	r4, r0
	len = 0;
   b76d0:	6083      	str	r3, [r0, #8]
	flags = 0;
   b76d2:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b76d4:	b141      	cbz	r1, b76e8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b76d6:	4608      	mov	r0, r1
   b76d8:	9101      	str	r1, [sp, #4]
   b76da:	f7fd f98f 	bl	b49fc <strlen>
   b76de:	9901      	ldr	r1, [sp, #4]
   b76e0:	4602      	mov	r2, r0
   b76e2:	4620      	mov	r0, r4
   b76e4:	f7ff ffd6 	bl	b7694 <_ZN6String4copyEPKcj>
}
   b76e8:	4620      	mov	r0, r4
   b76ea:	b002      	add	sp, #8
   b76ec:	bd10      	pop	{r4, pc}

000b76ee <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b76ee:	b513      	push	{r0, r1, r4, lr}
   b76f0:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b76f2:	b159      	cbz	r1, b770c <_ZN6StringaSEPKc+0x1e>
   b76f4:	4608      	mov	r0, r1
   b76f6:	9101      	str	r1, [sp, #4]
   b76f8:	f7fd f980 	bl	b49fc <strlen>
   b76fc:	9901      	ldr	r1, [sp, #4]
   b76fe:	4602      	mov	r2, r0
   b7700:	4620      	mov	r0, r4
   b7702:	f7ff ffc7 	bl	b7694 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b7706:	4620      	mov	r0, r4
   b7708:	b002      	add	sp, #8
   b770a:	bd10      	pop	{r4, pc}
	else invalidate();
   b770c:	f7ff ff97 	bl	b763e <_ZN6String10invalidateEv>
   b7710:	e7f9      	b.n	b7706 <_ZN6StringaSEPKc+0x18>
	...

000b7714 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b7714:	4b05      	ldr	r3, [pc, #20]	; (b772c <_GLOBAL__sub_I_System+0x18>)
   b7716:	2202      	movs	r2, #2
   b7718:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b771a:	4b05      	ldr	r3, [pc, #20]	; (b7730 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b771c:	4a05      	ldr	r2, [pc, #20]	; (b7734 <_GLOBAL__sub_I_System+0x20>)
   b771e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b7720:	2000      	movs	r0, #0
   b7722:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b7726:	f7ff bb71 	b.w	b6e0c <set_system_mode>
   b772a:	bf00      	nop
   b772c:	2003e6f8 	.word	0x2003e6f8
   b7730:	2003e6ec 	.word	0x2003e6ec
   b7734:	ffff0000 	.word	0xffff0000

000b7738 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b7738:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b773a:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b773c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b7740:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b7742:	2201      	movs	r2, #1
   b7744:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7748:	f10d 0107 	add.w	r1, sp, #7
   b774c:	47a0      	blx	r4
}
   b774e:	b002      	add	sp, #8
   b7750:	bd10      	pop	{r4, pc}

000b7752 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b7752:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b7754:	6803      	ldr	r3, [r0, #0]
   b7756:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b7758:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b775c:	46a4      	mov	ip, r4
}
   b775e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b7762:	4760      	bx	ip

000b7764 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b7764:	b513      	push	{r0, r1, r4, lr}
   b7766:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b7768:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b776a:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b776e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b7770:	f10d 0107 	add.w	r1, sp, #7
   b7774:	2201      	movs	r2, #1
   b7776:	47a0      	blx	r4
}
   b7778:	b002      	add	sp, #8
   b777a:	bd10      	pop	{r4, pc}

000b777c <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b777c:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b777e:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7780:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7784:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7788:	429a      	cmp	r2, r3
int TCPClient::read() {
   b778a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b778c:	d008      	beq.n	b77a0 <_ZN9TCPClient4readEv+0x24>
   b778e:	6963      	ldr	r3, [r4, #20]
   b7790:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b7794:	1c51      	adds	r1, r2, #1
   b7796:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b779a:	4413      	add	r3, r2
   b779c:	7918      	ldrb	r0, [r3, #4]
}
   b779e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b77a0:	6803      	ldr	r3, [r0, #0]
   b77a2:	691b      	ldr	r3, [r3, #16]
   b77a4:	4798      	blx	r3
   b77a6:	2800      	cmp	r0, #0
   b77a8:	d1f1      	bne.n	b778e <_ZN9TCPClient4readEv+0x12>
   b77aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b77ae:	e7f6      	b.n	b779e <_ZN9TCPClient4readEv+0x22>

000b77b0 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b77b0:	4770      	bx	lr

000b77b2 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b77b2:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b77b4:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b77b6:	43c0      	mvns	r0, r0
   b77b8:	0fc0      	lsrs	r0, r0, #31
   b77ba:	4770      	bx	lr

000b77bc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b77bc:	4770      	bx	lr
	...

000b77c0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b77c0:	4b06      	ldr	r3, [pc, #24]	; (b77dc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b77c2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b77c4:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b77c6:	f100 040c 	add.w	r4, r0, #12
	    ||
   b77ca:	d005      	beq.n	b77d8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b77cc:	4608      	mov	r0, r1
   b77ce:	f000 fd59 	bl	b8284 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b77d2:	2800      	cmp	r0, #0
   b77d4:	bf08      	it	eq
   b77d6:	2400      	moveq	r4, #0
      }
   b77d8:	4620      	mov	r0, r4
   b77da:	bd10      	pop	{r4, pc}
   b77dc:	000baf2c 	.word	0x000baf2c

000b77e0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b77e0:	b510      	push	{r4, lr}
   b77e2:	21ac      	movs	r1, #172	; 0xac
   b77e4:	4604      	mov	r4, r0
   b77e6:	f7fd f96a 	bl	b4abe <_ZdlPvj>
   b77ea:	4620      	mov	r0, r4
   b77ec:	bd10      	pop	{r4, pc}

000b77ee <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b77ee:	21ac      	movs	r1, #172	; 0xac
   b77f0:	f7fd b965 	b.w	b4abe <_ZdlPvj>

000b77f4 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b77f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b77f8:	f04f 0800 	mov.w	r8, #0
   b77fc:	b086      	sub	sp, #24
   b77fe:	461c      	mov	r4, r3
   b7800:	f8c0 8004 	str.w	r8, [r0, #4]
   b7804:	4605      	mov	r5, r0
   b7806:	460e      	mov	r6, r1
   b7808:	4617      	mov	r7, r2
    struct timeval tv = {};
   b780a:	4641      	mov	r1, r8
   b780c:	2210      	movs	r2, #16
   b780e:	a802      	add	r0, sp, #8
   b7810:	f000 fe61 	bl	b84d6 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b7814:	1c63      	adds	r3, r4, #1
   b7816:	d009      	beq.n	b782c <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b7818:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b781c:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b7820:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b7824:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b7828:	435c      	muls	r4, r3
   b782a:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b782c:	6968      	ldr	r0, [r5, #20]
   b782e:	2310      	movs	r3, #16
   b7830:	9300      	str	r3, [sp, #0]
   b7832:	6800      	ldr	r0, [r0, #0]
   b7834:	ab02      	add	r3, sp, #8
   b7836:	f241 0205 	movw	r2, #4101	; 0x1005
   b783a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b783e:	f7ff f9ed 	bl	b6c1c <sock_setsockopt>
    if (ret < 0) {
   b7842:	2800      	cmp	r0, #0
   b7844:	da07      	bge.n	b7856 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b7846:	f7ff fba5 	bl	b6f94 <__errno>
   b784a:	6803      	ldr	r3, [r0, #0]
   b784c:	606b      	str	r3, [r5, #4]
        return 0;
   b784e:	2000      	movs	r0, #0
}
   b7850:	b006      	add	sp, #24
   b7852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b7856:	6968      	ldr	r0, [r5, #20]
   b7858:	2300      	movs	r3, #0
   b785a:	6800      	ldr	r0, [r0, #0]
   b785c:	463a      	mov	r2, r7
   b785e:	4631      	mov	r1, r6
   b7860:	f7ff f9fc 	bl	b6c5c <sock_send>
    if (ret < 0) {
   b7864:	1e03      	subs	r3, r0, #0
   b7866:	dbee      	blt.n	b7846 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b7868:	4618      	mov	r0, r3
   b786a:	e7f1      	b.n	b7850 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b786c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b786c:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b786e:	6984      	ldr	r4, [r0, #24]
   b7870:	4b0a      	ldr	r3, [pc, #40]	; (b789c <_ZN9TCPClientD1Ev+0x30>)
   b7872:	6003      	str	r3, [r0, #0]
   b7874:	4605      	mov	r5, r0
   b7876:	b17c      	cbz	r4, b7898 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b7878:	6863      	ldr	r3, [r4, #4]
   b787a:	3b01      	subs	r3, #1
   b787c:	6063      	str	r3, [r4, #4]
   b787e:	b95b      	cbnz	r3, b7898 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b7880:	6823      	ldr	r3, [r4, #0]
   b7882:	4620      	mov	r0, r4
   b7884:	689b      	ldr	r3, [r3, #8]
   b7886:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b7888:	68a3      	ldr	r3, [r4, #8]
   b788a:	3b01      	subs	r3, #1
   b788c:	60a3      	str	r3, [r4, #8]
   b788e:	b91b      	cbnz	r3, b7898 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b7890:	6823      	ldr	r3, [r4, #0]
   b7892:	4620      	mov	r0, r4
   b7894:	68db      	ldr	r3, [r3, #12]
   b7896:	4798      	blx	r3
   b7898:	4628      	mov	r0, r5
   b789a:	bd38      	pop	{r3, r4, r5, pc}
   b789c:	000bb030 	.word	0x000bb030

000b78a0 <_ZN9TCPClientD0Ev>:
   b78a0:	b510      	push	{r4, lr}
   b78a2:	4604      	mov	r4, r0
   b78a4:	f7ff ffe2 	bl	b786c <_ZN9TCPClientD1Ev>
   b78a8:	4620      	mov	r0, r4
   b78aa:	211c      	movs	r1, #28
   b78ac:	f7fd f907 	bl	b4abe <_ZdlPvj>
   b78b0:	4620      	mov	r0, r4
   b78b2:	bd10      	pop	{r4, pc}

000b78b4 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b78b4:	b530      	push	{r4, r5, lr}
   b78b6:	b087      	sub	sp, #28
   b78b8:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b78ba:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b78bc:	4668      	mov	r0, sp
   b78be:	f7ff fcab 	bl	b7218 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b78c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b78c4:	3404      	adds	r4, #4
   b78c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b78c8:	682b      	ldr	r3, [r5, #0]
   b78ca:	7023      	strb	r3, [r4, #0]
    }
   b78cc:	b007      	add	sp, #28
   b78ce:	bd30      	pop	{r4, r5, pc}

000b78d0 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b78d0:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b78d2:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b78d4:	4b05      	ldr	r3, [pc, #20]	; (b78ec <_ZN9TCPClient8remoteIPEv+0x1c>)
   b78d6:	4604      	mov	r4, r0
   b78d8:	358c      	adds	r5, #140	; 0x8c
   b78da:	f844 3b04 	str.w	r3, [r4], #4
   b78de:	4606      	mov	r6, r0
   b78e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b78e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b78e4:	682b      	ldr	r3, [r5, #0]
   b78e6:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b78e8:	4630      	mov	r0, r6
   b78ea:	bd70      	pop	{r4, r5, r6, pc}
   b78ec:	000bafa0 	.word	0x000bafa0

000b78f0 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b78f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b78f4:	4698      	mov	r8, r3
    stop();
   b78f6:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b78f8:	b093      	sub	sp, #76	; 0x4c
   b78fa:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b78fc:	2400      	movs	r4, #0
    stop();
   b78fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7900:	4606      	mov	r6, r0
   b7902:	4617      	mov	r7, r2
    stop();
   b7904:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7906:	4628      	mov	r0, r5
   b7908:	466b      	mov	r3, sp
   b790a:	4622      	mov	r2, r4
   b790c:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b790e:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7910:	f7ff f97c 	bl	b6c0c <netdb_getaddrinfo>
   b7914:	4605      	mov	r5, r0
   b7916:	2800      	cmp	r0, #0
   b7918:	d163      	bne.n	b79e2 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b791a:	9b00      	ldr	r3, [sp, #0]
   b791c:	2b00      	cmp	r3, #0
   b791e:	d04b      	beq.n	b79b8 <_ZN9TCPClient7connectEPKctm+0xc8>
   b7920:	695b      	ldr	r3, [r3, #20]
   b7922:	2b00      	cmp	r3, #0
   b7924:	d048      	beq.n	b79b8 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b7926:	a806      	add	r0, sp, #24
   b7928:	f7ff fc32 	bl	b7190 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b792c:	9b00      	ldr	r3, [sp, #0]
   b792e:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b7930:	7863      	ldrb	r3, [r4, #1]
   b7932:	2b02      	cmp	r3, #2
   b7934:	d104      	bne.n	b7940 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b7936:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b7938:	a806      	add	r0, sp, #24
   b793a:	f7ff ffbb 	bl	b78b4 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b793e:	e026      	b.n	b798e <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b7940:	2b0a      	cmp	r3, #10
   b7942:	d124      	bne.n	b798e <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b7944:	2211      	movs	r2, #17
   b7946:	4629      	mov	r1, r5
   b7948:	a801      	add	r0, sp, #4
   b794a:	f000 fdc4 	bl	b84d6 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b794e:	68a3      	ldr	r3, [r4, #8]
   b7950:	2b00      	cmp	r3, #0
   b7952:	d038      	beq.n	b79c6 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7954:	f104 0308 	add.w	r3, r4, #8
   b7958:	f10d 0c04 	add.w	ip, sp, #4
   b795c:	3418      	adds	r4, #24
   b795e:	6818      	ldr	r0, [r3, #0]
   b7960:	6859      	ldr	r1, [r3, #4]
   b7962:	4662      	mov	r2, ip
   b7964:	c203      	stmia	r2!, {r0, r1}
   b7966:	3308      	adds	r3, #8
   b7968:	42a3      	cmp	r3, r4
   b796a:	4694      	mov	ip, r2
   b796c:	d1f7      	bne.n	b795e <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b796e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b7970:	a901      	add	r1, sp, #4
   b7972:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b7974:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b7978:	f7ff fc18 	bl	b71ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b797c:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b7980:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b7984:	ac07      	add	r4, sp, #28
   b7986:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7988:	f8dc 3000 	ldr.w	r3, [ip]
   b798c:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b798e:	a806      	add	r0, sp, #24
   b7990:	f7ff fc1e 	bl	b71d0 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b7994:	b180      	cbz	r0, b79b8 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b7996:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b7998:	ad07      	add	r5, sp, #28
   b799a:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b799e:	4b12      	ldr	r3, [pc, #72]	; (b79e8 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b79a0:	930c      	str	r3, [sp, #48]	; 0x30
   b79a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b79a4:	ac0d      	add	r4, sp, #52	; 0x34
   b79a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b79a8:	682b      	ldr	r3, [r5, #0]
   b79aa:	7023      	strb	r3, [r4, #0]
   b79ac:	463a      	mov	r2, r7
   b79ae:	4643      	mov	r3, r8
   b79b0:	a90c      	add	r1, sp, #48	; 0x30
   b79b2:	4630      	mov	r0, r6
   b79b4:	47c8      	blx	r9
   b79b6:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b79b8:	9800      	ldr	r0, [sp, #0]
   b79ba:	f7ff f91f 	bl	b6bfc <netdb_freeaddrinfo>
}
   b79be:	4628      	mov	r0, r5
   b79c0:	b013      	add	sp, #76	; 0x4c
   b79c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b79c6:	68e3      	ldr	r3, [r4, #12]
   b79c8:	2b00      	cmp	r3, #0
   b79ca:	d1c3      	bne.n	b7954 <_ZN9TCPClient7connectEPKctm+0x64>
   b79cc:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b79d0:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b79d4:	f7ff f902 	bl	b6bdc <inet_htonl>
   b79d8:	4581      	cmp	r9, r0
   b79da:	d1bb      	bne.n	b7954 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b79dc:	f104 0114 	add.w	r1, r4, #20
   b79e0:	e7aa      	b.n	b7938 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b79e2:	4625      	mov	r5, r4
   b79e4:	e7e8      	b.n	b79b8 <_ZN9TCPClient7connectEPKctm+0xc8>
   b79e6:	bf00      	nop
   b79e8:	000bafa0 	.word	0x000bafa0

000b79ec <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b79ec:	b538      	push	{r3, r4, r5, lr}
   b79ee:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b79f0:	681a      	ldr	r2, [r3, #0]
   b79f2:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b79f4:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b79f6:	da10      	bge.n	b7a1a <_ZN9TCPClient9connectedEv+0x2e>
   b79f8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b79fc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7a00:	429a      	cmp	r2, r3
   b7a02:	d10a      	bne.n	b7a1a <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b7a04:	6803      	ldr	r3, [r0, #0]
   b7a06:	691b      	ldr	r3, [r3, #16]
   b7a08:	4798      	blx	r3
        if (!rv) {
   b7a0a:	4604      	mov	r4, r0
   b7a0c:	b928      	cbnz	r0, b7a1a <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b7a0e:	682b      	ldr	r3, [r5, #0]
   b7a10:	4628      	mov	r0, r5
   b7a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7a14:	4798      	blx	r3
        rv = available();
   b7a16:	4620      	mov	r0, r4
}
   b7a18:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b7a1a:	2001      	movs	r0, #1
   b7a1c:	e7fc      	b.n	b7a18 <_ZN9TCPClient9connectedEv+0x2c>

000b7a1e <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b7a1e:	b510      	push	{r4, lr}
   b7a20:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7a22:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7a26:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7a2a:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b7a2c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7a2e:	d005      	beq.n	b7a3c <_ZN9TCPClient4peekEv+0x1e>
   b7a30:	6963      	ldr	r3, [r4, #20]
   b7a32:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b7a36:	4413      	add	r3, r2
   b7a38:	7918      	ldrb	r0, [r3, #4]
}
   b7a3a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7a3c:	6803      	ldr	r3, [r0, #0]
   b7a3e:	691b      	ldr	r3, [r3, #16]
   b7a40:	4798      	blx	r3
   b7a42:	2800      	cmp	r0, #0
   b7a44:	d1f4      	bne.n	b7a30 <_ZN9TCPClient4peekEv+0x12>
   b7a46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7a4a:	e7f6      	b.n	b7a3a <_ZN9TCPClient4peekEv+0x1c>

000b7a4c <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7a4e:	6943      	ldr	r3, [r0, #20]
   b7a50:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b7a52:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7a56:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7a5a:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7a5c:	4605      	mov	r5, r0
   b7a5e:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b7a60:	d016      	beq.n	b7a90 <_ZN9TCPClient4readEPhj+0x44>
   b7a62:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b7a64:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b7a68:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b7a6c:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b7a6e:	42bc      	cmp	r4, r7
   b7a70:	bf28      	it	cs
   b7a72:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b7a74:	3304      	adds	r3, #4
   b7a76:	4622      	mov	r2, r4
   b7a78:	4419      	add	r1, r3
   b7a7a:	4630      	mov	r0, r6
   b7a7c:	f000 fd1d 	bl	b84ba <memcpy>
   b7a80:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b7a82:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b7a86:	4423      	add	r3, r4
   b7a88:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b7a8c:	4620      	mov	r0, r4
   b7a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b7a90:	6803      	ldr	r3, [r0, #0]
   b7a92:	691b      	ldr	r3, [r3, #16]
   b7a94:	4798      	blx	r3
   b7a96:	2800      	cmp	r0, #0
   b7a98:	d1e3      	bne.n	b7a62 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b7a9a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b7a9e:	e7f5      	b.n	b7a8c <_ZN9TCPClient4readEPhj+0x40>

000b7aa0 <_ZN9TCPClient12flush_bufferEv>:
   b7aa0:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b7aa2:	2300      	movs	r3, #0
   b7aa4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b7aa8:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b7aaa:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b7aae:	4770      	bx	lr

000b7ab0 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7ab4:	461f      	mov	r7, r3
    stop();
   b7ab6:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7ab8:	460c      	mov	r4, r1
    stop();
   b7aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7abc:	b08a      	sub	sp, #40	; 0x28
   b7abe:	4605      	mov	r5, r0
   b7ac0:	4616      	mov	r6, r2
    stop();
   b7ac2:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b7ac4:	7d23      	ldrb	r3, [r4, #20]
   b7ac6:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b7aca:	2b04      	cmp	r3, #4
   b7acc:	bf0c      	ite	eq
   b7ace:	2002      	moveq	r0, #2
   b7ad0:	200a      	movne	r0, #10
   b7ad2:	2206      	movs	r2, #6
   b7ad4:	2101      	movs	r1, #1
   b7ad6:	f7ff f8c9 	bl	b6c6c <sock_socket>
   b7ada:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b7ade:	696b      	ldr	r3, [r5, #20]
   b7ae0:	681b      	ldr	r3, [r3, #0]
   b7ae2:	2b00      	cmp	r3, #0
   b7ae4:	da08      	bge.n	b7af8 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b7ae6:	682b      	ldr	r3, [r5, #0]
   b7ae8:	4628      	mov	r0, r5
   b7aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7aec:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b7aee:	4798      	blx	r3
}
   b7af0:	4620      	mov	r0, r4
   b7af2:	b00a      	add	sp, #40	; 0x28
   b7af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b7af8:	4628      	mov	r0, r5
   b7afa:	f7ff ffd1 	bl	b7aa0 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b7afe:	b1b7      	cbz	r7, b7b2e <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b7b00:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7b02:	a903      	add	r1, sp, #12
   b7b04:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b7b06:	9303      	str	r3, [sp, #12]
   b7b08:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7b0c:	f7ff f856 	bl	b6bbc <if_index_to_name>
   b7b10:	2800      	cmp	r0, #0
   b7b12:	d1e8      	bne.n	b7ae6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b7b14:	6968      	ldr	r0, [r5, #20]
   b7b16:	2306      	movs	r3, #6
   b7b18:	9300      	str	r3, [sp, #0]
   b7b1a:	6800      	ldr	r0, [r0, #0]
   b7b1c:	ab03      	add	r3, sp, #12
   b7b1e:	f241 020b 	movw	r2, #4107	; 0x100b
   b7b22:	f640 71ff 	movw	r1, #4095	; 0xfff
   b7b26:	f7ff f879 	bl	b6c1c <sock_setsockopt>
   b7b2a:	2800      	cmp	r0, #0
   b7b2c:	d1db      	bne.n	b7ae6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b7b2e:	221c      	movs	r2, #28
   b7b30:	2100      	movs	r1, #0
   b7b32:	a803      	add	r0, sp, #12
   b7b34:	f000 fccf 	bl	b84d6 <memset>
    if (ip.version() == 4) {
   b7b38:	7d23      	ldrb	r3, [r4, #20]
   b7b3a:	2b04      	cmp	r3, #4
   b7b3c:	d11d      	bne.n	b7b7a <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b7b3e:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b7b42:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b7b44:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b7b48:	f7ff f850 	bl	b6bec <inet_htons>
   b7b4c:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b7b50:	6860      	ldr	r0, [r4, #4]
   b7b52:	f7ff f843 	bl	b6bdc <inet_htonl>
   b7b56:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b7b58:	696b      	ldr	r3, [r5, #20]
   b7b5a:	221c      	movs	r2, #28
   b7b5c:	6818      	ldr	r0, [r3, #0]
   b7b5e:	a903      	add	r1, sp, #12
   b7b60:	f7ff f86c 	bl	b6c3c <sock_connect>
   b7b64:	2800      	cmp	r0, #0
   b7b66:	d1be      	bne.n	b7ae6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b7b68:	3404      	adds	r4, #4
   b7b6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7b6c:	696d      	ldr	r5, [r5, #20]
   b7b6e:	358c      	adds	r5, #140	; 0x8c
   b7b70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7b72:	6823      	ldr	r3, [r4, #0]
   b7b74:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b7b76:	2401      	movs	r4, #1
   b7b78:	e7ba      	b.n	b7af0 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b7b7a:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b7b7e:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b7b80:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b7b84:	f7ff f832 	bl	b6bec <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b7b88:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b7b8a:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b7b8e:	1d23      	adds	r3, r4, #4
   b7b90:	f104 0714 	add.w	r7, r4, #20
   b7b94:	6818      	ldr	r0, [r3, #0]
   b7b96:	6859      	ldr	r1, [r3, #4]
   b7b98:	4632      	mov	r2, r6
   b7b9a:	c203      	stmia	r2!, {r0, r1}
   b7b9c:	3308      	adds	r3, #8
   b7b9e:	42bb      	cmp	r3, r7
   b7ba0:	4616      	mov	r6, r2
   b7ba2:	d1f7      	bne.n	b7b94 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b7ba4:	e7d8      	b.n	b7b58 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b7ba8 <_ZN9TCPClient9availableEv>:
{
   b7ba8:	b530      	push	{r4, r5, lr}
   b7baa:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b7bac:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b7bb0:	b08b      	sub	sp, #44	; 0x2c
   b7bb2:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b7bb4:	b12b      	cbz	r3, b7bc2 <_ZN9TCPClient9availableEv+0x1a>
   b7bb6:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b7bba:	429a      	cmp	r2, r3
   b7bbc:	d101      	bne.n	b7bc2 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b7bbe:	f7ff ff6f 	bl	b7aa0 <_ZN9TCPClient12flush_bufferEv>
   b7bc2:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b7bc4:	6808      	ldr	r0, [r1, #0]
   b7bc6:	2800      	cmp	r0, #0
   b7bc8:	db18      	blt.n	b7bfc <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b7bca:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b7bce:	2d7f      	cmp	r5, #127	; 0x7f
   b7bd0:	d814      	bhi.n	b7bfc <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b7bd2:	3104      	adds	r1, #4
   b7bd4:	2308      	movs	r3, #8
   b7bd6:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b7bda:	4429      	add	r1, r5
   b7bdc:	f7ff f836 	bl	b6c4c <sock_recv>
            if (ret > 0) {
   b7be0:	2800      	cmp	r0, #0
   b7be2:	dd13      	ble.n	b7c0c <_ZN9TCPClient9availableEv+0x64>
   b7be4:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b7be6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7bea:	b90a      	cbnz	r2, b7bf0 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b7bec:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b7bf0:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b7bf2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7bf6:	4410      	add	r0, r2
   b7bf8:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b7bfc:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b7bfe:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b7c02:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b7c06:	1ac0      	subs	r0, r0, r3
   b7c08:	b00b      	add	sp, #44	; 0x2c
   b7c0a:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b7c0c:	f7ff f9c2 	bl	b6f94 <__errno>
   b7c10:	6803      	ldr	r3, [r0, #0]
   b7c12:	2b0b      	cmp	r3, #11
   b7c14:	d0f2      	beq.n	b7bfc <_ZN9TCPClient9availableEv+0x54>
   b7c16:	f7ff f9bd 	bl	b6f94 <__errno>
   b7c1a:	6803      	ldr	r3, [r0, #0]
   b7c1c:	2b0b      	cmp	r3, #11
   b7c1e:	d0ed      	beq.n	b7bfc <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b7c20:	2320      	movs	r3, #32
   b7c22:	2500      	movs	r5, #0
   b7c24:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b7c28:	f7ff f9b4 	bl	b6f94 <__errno>
   b7c2c:	6803      	ldr	r3, [r0, #0]
   b7c2e:	9301      	str	r3, [sp, #4]
   b7c30:	4b08      	ldr	r3, [pc, #32]	; (b7c54 <_ZN9TCPClient9availableEv+0xac>)
   b7c32:	4909      	ldr	r1, [pc, #36]	; (b7c58 <_ZN9TCPClient9availableEv+0xb0>)
   b7c34:	9300      	str	r3, [sp, #0]
   b7c36:	aa02      	add	r2, sp, #8
   b7c38:	462b      	mov	r3, r5
   b7c3a:	2032      	movs	r0, #50	; 0x32
   b7c3c:	f7ff f8de 	bl	b6dfc <log_message>
                    sock_close(d_->sock);
   b7c40:	6963      	ldr	r3, [r4, #20]
   b7c42:	6818      	ldr	r0, [r3, #0]
   b7c44:	f7fe fff2 	bl	b6c2c <sock_close>
   b7c48:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b7c4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7c4e:	601a      	str	r2, [r3, #0]
   b7c50:	e7d4      	b.n	b7bfc <_ZN9TCPClient9availableEv+0x54>
   b7c52:	bf00      	nop
   b7c54:	000baffb 	.word	0x000baffb
   b7c58:	000baff4 	.word	0x000baff4

000b7c5c <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b7c5c:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b7c5e:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b7c60:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b7c62:	6818      	ldr	r0, [r3, #0]
   b7c64:	2800      	cmp	r0, #0
   b7c66:	db01      	blt.n	b7c6c <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b7c68:	f7fe ffe0 	bl	b6c2c <sock_close>
   b7c6c:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b7c6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7c72:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b7c74:	6960      	ldr	r0, [r4, #20]
   b7c76:	2211      	movs	r2, #17
   b7c78:	2100      	movs	r1, #0
   b7c7a:	308c      	adds	r0, #140	; 0x8c
   b7c7c:	f000 fc2b 	bl	b84d6 <memset>
    flush_buffer();
   b7c80:	4620      	mov	r0, r4
}
   b7c82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b7c86:	f7ff bf0b 	b.w	b7aa0 <_ZN9TCPClient12flush_bufferEv>

000b7c8a <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b7c8a:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b7c8c:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b7c8e:	4604      	mov	r4, r0
          total(0) {
   b7c90:	6001      	str	r1, [r0, #0]
   b7c92:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b7c96:	3088      	adds	r0, #136	; 0x88
   b7c98:	f7ff fa7a 	bl	b7190 <_ZN9IPAddressC1Ev>
}
   b7c9c:	4620      	mov	r0, r4
   b7c9e:	bd10      	pop	{r4, pc}

000b7ca0 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b7ca0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7ca2:	2300      	movs	r3, #0
   b7ca4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b7ca8:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b7cac:	4a0e      	ldr	r2, [pc, #56]	; (b7ce8 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b7cae:	6103      	str	r3, [r0, #16]
   b7cb0:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7cb2:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b7cb4:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7cb6:	20ac      	movs	r0, #172	; 0xac
   b7cb8:	9101      	str	r1, [sp, #4]
   b7cba:	f7fc fefa 	bl	b4ab2 <_Znwj>
	  auto __pi = ::new (__mem)
   b7cbe:	1e05      	subs	r5, r0, #0
   b7cc0:	f105 060c 	add.w	r6, r5, #12
   b7cc4:	d008      	beq.n	b7cd8 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b7cc6:	2301      	movs	r3, #1
   b7cc8:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b7ccc:	4b07      	ldr	r3, [pc, #28]	; (b7cec <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b7cce:	9901      	ldr	r1, [sp, #4]
   b7cd0:	602b      	str	r3, [r5, #0]
   b7cd2:	4630      	mov	r0, r6
   b7cd4:	f7ff ffd9 	bl	b7c8a <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b7cd8:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b7cda:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b7cde:	f7ff fedf 	bl	b7aa0 <_ZN9TCPClient12flush_bufferEv>
}
   b7ce2:	b002      	add	sp, #8
   b7ce4:	bd70      	pop	{r4, r5, r6, pc}
   b7ce6:	bf00      	nop
   b7ce8:	000bb030 	.word	0x000bb030
   b7cec:	000bb014 	.word	0x000bb014

000b7cf0 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b7cf0:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b7cf2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b7cf6:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b7cf8:	f7ff ffd2 	bl	b7ca0 <_ZN9TCPClientC1Ei>
}
   b7cfc:	4620      	mov	r0, r4
   b7cfe:	bd10      	pop	{r4, pc}

000b7d00 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b7d00:	b510      	push	{r4, lr}
   b7d02:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b7d04:	6800      	ldr	r0, [r0, #0]
   b7d06:	2800      	cmp	r0, #0
   b7d08:	db01      	blt.n	b7d0e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b7d0a:	f7fe ff8f 	bl	b6c2c <sock_close>
    }
}
   b7d0e:	4620      	mov	r0, r4
   b7d10:	bd10      	pop	{r4, pc}

000b7d12 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b7d12:	300c      	adds	r0, #12
   b7d14:	f7ff bff4 	b.w	b7d00 <_ZN9TCPClient4DataD1Ev>

000b7d18 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b7d18:	4b02      	ldr	r3, [pc, #8]	; (b7d24 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b7d1a:	681a      	ldr	r2, [r3, #0]
   b7d1c:	4b02      	ldr	r3, [pc, #8]	; (b7d28 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b7d1e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7d20:	4770      	bx	lr
   b7d22:	bf00      	nop
   b7d24:	2003e384 	.word	0x2003e384
   b7d28:	2003e6fc 	.word	0x2003e6fc

000b7d2c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b7d2c:	4770      	bx	lr

000b7d2e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7d2e:	7441      	strb	r1, [r0, #17]
}
   b7d30:	4770      	bx	lr

000b7d32 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b7d32:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b7d34:	7c00      	ldrb	r0, [r0, #16]
   b7d36:	f7ff f811 	bl	b6d5c <hal_usart_available_data_for_write>
}
   b7d3a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7d3e:	bd08      	pop	{r3, pc}

000b7d40 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b7d40:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b7d42:	7c00      	ldrb	r0, [r0, #16]
   b7d44:	f7fe ffe2 	bl	b6d0c <hal_usart_available>
}
   b7d48:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7d4c:	bd08      	pop	{r3, pc}

000b7d4e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b7d4e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7d50:	7c00      	ldrb	r0, [r0, #16]
   b7d52:	f7fe ffeb 	bl	b6d2c <hal_usart_peek>
}
   b7d56:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7d5a:	bd08      	pop	{r3, pc}

000b7d5c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b7d5c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b7d5e:	7c00      	ldrb	r0, [r0, #16]
   b7d60:	f7fe ffdc 	bl	b6d1c <hal_usart_read>
}
   b7d64:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7d68:	bd08      	pop	{r3, pc}

000b7d6a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b7d6a:	7c00      	ldrb	r0, [r0, #16]
   b7d6c:	f7fe bfe6 	b.w	b6d3c <hal_usart_flush>

000b7d70 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7d70:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7d72:	7c45      	ldrb	r5, [r0, #17]
{
   b7d74:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7d76:	b12d      	cbz	r5, b7d84 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b7d78:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b7d7a:	b003      	add	sp, #12
   b7d7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b7d80:	f7fe bfbc 	b.w	b6cfc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7d84:	7c00      	ldrb	r0, [r0, #16]
   b7d86:	9101      	str	r1, [sp, #4]
   b7d88:	f7fe ffe8 	bl	b6d5c <hal_usart_available_data_for_write>
   b7d8c:	2800      	cmp	r0, #0
   b7d8e:	9901      	ldr	r1, [sp, #4]
   b7d90:	dcf2      	bgt.n	b7d78 <_ZN11USARTSerial5writeEh+0x8>
}
   b7d92:	4628      	mov	r0, r5
   b7d94:	b003      	add	sp, #12
   b7d96:	bd30      	pop	{r4, r5, pc}

000b7d98 <_ZN11USARTSerialD0Ev>:
   b7d98:	b510      	push	{r4, lr}
   b7d9a:	2114      	movs	r1, #20
   b7d9c:	4604      	mov	r4, r0
   b7d9e:	f7fc fe8e 	bl	b4abe <_ZdlPvj>
   b7da2:	4620      	mov	r0, r4
   b7da4:	bd10      	pop	{r4, pc}
	...

000b7da8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b7da8:	b510      	push	{r4, lr}
   b7daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7dae:	4604      	mov	r4, r0
   b7db0:	4608      	mov	r0, r1
   b7db2:	4611      	mov	r1, r2
   b7db4:	2200      	movs	r2, #0
   b7db6:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7dba:	4b04      	ldr	r3, [pc, #16]	; (b7dcc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b7dbc:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7dbe:	2301      	movs	r3, #1
  _serial = serial;
   b7dc0:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7dc2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b7dc4:	f7fe ffd2 	bl	b6d6c <hal_usart_init_ex>
}
   b7dc8:	4620      	mov	r0, r4
   b7dca:	bd10      	pop	{r4, pc}
   b7dcc:	000bb098 	.word	0x000bb098

000b7dd0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7dd0:	7441      	strb	r1, [r0, #17]
}
   b7dd2:	4770      	bx	lr

000b7dd4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7dd4:	4770      	bx	lr

000b7dd6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b7dd6:	4770      	bx	lr

000b7dd8 <_ZN9USBSerial4readEv>:
{
   b7dd8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b7dda:	2100      	movs	r1, #0
   b7ddc:	7c00      	ldrb	r0, [r0, #16]
   b7dde:	f7fe ffed 	bl	b6dbc <HAL_USB_USART_Receive_Data>
}
   b7de2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7de6:	bd08      	pop	{r3, pc}

000b7de8 <_ZN9USBSerial4peekEv>:
{
   b7de8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b7dea:	2101      	movs	r1, #1
   b7dec:	7c00      	ldrb	r0, [r0, #16]
   b7dee:	f7fe ffe5 	bl	b6dbc <HAL_USB_USART_Receive_Data>
}
   b7df2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7df6:	bd08      	pop	{r3, pc}

000b7df8 <_ZN9USBSerial17availableForWriteEv>:
{
   b7df8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b7dfa:	7c00      	ldrb	r0, [r0, #16]
   b7dfc:	f7fe ffd6 	bl	b6dac <HAL_USB_USART_Available_Data_For_Write>
}
   b7e00:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7e04:	bd08      	pop	{r3, pc}

000b7e06 <_ZN9USBSerial9availableEv>:
{
   b7e06:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b7e08:	7c00      	ldrb	r0, [r0, #16]
   b7e0a:	f7fe ffc7 	bl	b6d9c <HAL_USB_USART_Available_Data>
}
   b7e0e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7e12:	bd08      	pop	{r3, pc}

000b7e14 <_ZN9USBSerial5writeEh>:
{
   b7e14:	b513      	push	{r0, r1, r4, lr}
   b7e16:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7e18:	7c00      	ldrb	r0, [r0, #16]
{
   b7e1a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7e1c:	f7fe ffc6 	bl	b6dac <HAL_USB_USART_Available_Data_For_Write>
   b7e20:	2800      	cmp	r0, #0
   b7e22:	9901      	ldr	r1, [sp, #4]
   b7e24:	dc01      	bgt.n	b7e2a <_ZN9USBSerial5writeEh+0x16>
   b7e26:	7c60      	ldrb	r0, [r4, #17]
   b7e28:	b120      	cbz	r0, b7e34 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b7e2a:	7c20      	ldrb	r0, [r4, #16]
   b7e2c:	f7fe ffce 	bl	b6dcc <HAL_USB_USART_Send_Data>
   b7e30:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b7e34:	b002      	add	sp, #8
   b7e36:	bd10      	pop	{r4, pc}

000b7e38 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b7e38:	7c00      	ldrb	r0, [r0, #16]
   b7e3a:	f7fe bfcf 	b.w	b6ddc <HAL_USB_USART_Flush_Data>

000b7e3e <_ZN9USBSerialD0Ev>:
   b7e3e:	b510      	push	{r4, lr}
   b7e40:	2114      	movs	r1, #20
   b7e42:	4604      	mov	r4, r0
   b7e44:	f7fc fe3b 	bl	b4abe <_ZdlPvj>
   b7e48:	4620      	mov	r0, r4
   b7e4a:	bd10      	pop	{r4, pc}

000b7e4c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b7e4c:	b510      	push	{r4, lr}
   b7e4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7e52:	4604      	mov	r4, r0
   b7e54:	4608      	mov	r0, r1
   b7e56:	2100      	movs	r1, #0
   b7e58:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7e5c:	4b04      	ldr	r3, [pc, #16]	; (b7e70 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b7e5e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7e60:	2301      	movs	r3, #1
  _serial = serial;
   b7e62:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7e64:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b7e66:	4611      	mov	r1, r2
   b7e68:	f7fe ff88 	bl	b6d7c <HAL_USB_USART_Init>
}
   b7e6c:	4620      	mov	r0, r4
   b7e6e:	bd10      	pop	{r4, pc}
   b7e70:	000bb0c8 	.word	0x000bb0c8

000b7e74 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b7e74:	7c00      	ldrb	r0, [r0, #16]
   b7e76:	2200      	movs	r2, #0
   b7e78:	f7fe bf88 	b.w	b6d8c <HAL_USB_USART_Begin>

000b7e7c <_Z19acquireSerialBufferv>:
{
   b7e7c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b7e7e:	2214      	movs	r2, #20
{
   b7e80:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b7e82:	2100      	movs	r1, #0
   b7e84:	f000 fb27 	bl	b84d6 <memset>
}
   b7e88:	4620      	mov	r0, r4
   b7e8a:	bd10      	pop	{r4, pc}

000b7e8c <_Z16_fetch_usbserialv>:
{
   b7e8c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7e8e:	4c0f      	ldr	r4, [pc, #60]	; (b7ecc <_Z16_fetch_usbserialv+0x40>)
{
   b7e90:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b7e92:	a803      	add	r0, sp, #12
   b7e94:	f7ff fff2 	bl	b7e7c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7e98:	7821      	ldrb	r1, [r4, #0]
   b7e9a:	f3bf 8f5b 	dmb	ish
   b7e9e:	f011 0101 	ands.w	r1, r1, #1
   b7ea2:	d10f      	bne.n	b7ec4 <_Z16_fetch_usbserialv+0x38>
   b7ea4:	4620      	mov	r0, r4
   b7ea6:	9101      	str	r1, [sp, #4]
   b7ea8:	f7fc fe18 	bl	b4adc <__cxa_guard_acquire>
   b7eac:	9901      	ldr	r1, [sp, #4]
   b7eae:	b148      	cbz	r0, b7ec4 <_Z16_fetch_usbserialv+0x38>
   b7eb0:	aa03      	add	r2, sp, #12
   b7eb2:	4807      	ldr	r0, [pc, #28]	; (b7ed0 <_Z16_fetch_usbserialv+0x44>)
   b7eb4:	f7ff ffca 	bl	b7e4c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b7eb8:	4620      	mov	r0, r4
   b7eba:	f7fc fe14 	bl	b4ae6 <__cxa_guard_release>
   b7ebe:	4805      	ldr	r0, [pc, #20]	; (b7ed4 <_Z16_fetch_usbserialv+0x48>)
   b7ec0:	f000 faf2 	bl	b84a8 <atexit>
	return _usbserial;
}
   b7ec4:	4802      	ldr	r0, [pc, #8]	; (b7ed0 <_Z16_fetch_usbserialv+0x44>)
   b7ec6:	b008      	add	sp, #32
   b7ec8:	bd10      	pop	{r4, pc}
   b7eca:	bf00      	nop
   b7ecc:	2003e700 	.word	0x2003e700
   b7ed0:	2003e704 	.word	0x2003e704
   b7ed4:	000b7dd5 	.word	0x000b7dd5

000b7ed8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b7ed8:	2200      	movs	r2, #0
   b7eda:	6840      	ldr	r0, [r0, #4]
   b7edc:	4611      	mov	r1, r2
   b7ede:	f7fe bfe9 	b.w	b6eb4 <network_ready>

000b7ee2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7ee2:	2200      	movs	r2, #0
   b7ee4:	6840      	ldr	r0, [r0, #4]
   b7ee6:	4611      	mov	r1, r2
   b7ee8:	f7ff b804 	b.w	b6ef4 <network_listening>

000b7eec <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7eec:	2200      	movs	r2, #0
   b7eee:	6840      	ldr	r0, [r0, #4]
   b7ef0:	4611      	mov	r1, r2
   b7ef2:	f7ff b80f 	b.w	b6f14 <network_get_listen_timeout>

000b7ef6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7ef6:	6840      	ldr	r0, [r0, #4]
   b7ef8:	2200      	movs	r2, #0
   b7efa:	f7ff b803 	b.w	b6f04 <network_set_listen_timeout>

000b7efe <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7efe:	6840      	ldr	r0, [r0, #4]
   b7f00:	2200      	movs	r2, #0
   b7f02:	f081 0101 	eor.w	r1, r1, #1
   b7f06:	f7fe bfed 	b.w	b6ee4 <network_listen>

000b7f0a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7f0a:	2300      	movs	r3, #0
   b7f0c:	6840      	ldr	r0, [r0, #4]
   b7f0e:	461a      	mov	r2, r3
   b7f10:	4619      	mov	r1, r3
   b7f12:	f7fe bfdf 	b.w	b6ed4 <network_off>

000b7f16 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7f16:	2300      	movs	r3, #0
   b7f18:	6840      	ldr	r0, [r0, #4]
   b7f1a:	461a      	mov	r2, r3
   b7f1c:	4619      	mov	r1, r3
   b7f1e:	f7fe bfd1 	b.w	b6ec4 <network_on>

000b7f22 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7f22:	2200      	movs	r2, #0
   b7f24:	6840      	ldr	r0, [r0, #4]
   b7f26:	4611      	mov	r1, r2
   b7f28:	f7fe bfb4 	b.w	b6e94 <network_connecting>

000b7f2c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7f2c:	6840      	ldr	r0, [r0, #4]
   b7f2e:	2200      	movs	r2, #0
   b7f30:	2102      	movs	r1, #2
   b7f32:	f7fe bfb7 	b.w	b6ea4 <network_disconnect>

000b7f36 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7f36:	2300      	movs	r3, #0
   b7f38:	6840      	ldr	r0, [r0, #4]
   b7f3a:	461a      	mov	r2, r3
   b7f3c:	f7fe bfa2 	b.w	b6e84 <network_connect>

000b7f40 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b7f40:	4b02      	ldr	r3, [pc, #8]	; (b7f4c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b7f42:	2204      	movs	r2, #4
   b7f44:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b7f46:	4a02      	ldr	r2, [pc, #8]	; (b7f50 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b7f48:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b7f4a:	4770      	bx	lr
   b7f4c:	2003e718 	.word	0x2003e718
   b7f50:	000bb0f8 	.word	0x000bb0f8

000b7f54 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b7f54:	4b01      	ldr	r3, [pc, #4]	; (b7f5c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b7f56:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b7f58:	4770      	bx	lr
   b7f5a:	bf00      	nop
   b7f5c:	2003e388 	.word	0x2003e388

000b7f60 <serialEventRun>:
{
   b7f60:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b7f62:	4b0b      	ldr	r3, [pc, #44]	; (b7f90 <serialEventRun+0x30>)
   b7f64:	b143      	cbz	r3, b7f78 <serialEventRun+0x18>
   b7f66:	f7ff ff91 	bl	b7e8c <_Z16_fetch_usbserialv>
   b7f6a:	6803      	ldr	r3, [r0, #0]
   b7f6c:	691b      	ldr	r3, [r3, #16]
   b7f6e:	4798      	blx	r3
   b7f70:	2800      	cmp	r0, #0
   b7f72:	dd01      	ble.n	b7f78 <serialEventRun+0x18>
        serialEvent();
   b7f74:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b7f78:	4b06      	ldr	r3, [pc, #24]	; (b7f94 <serialEventRun+0x34>)
   b7f7a:	b143      	cbz	r3, b7f8e <serialEventRun+0x2e>
   b7f7c:	f000 f95c 	bl	b8238 <_Z22__fetch_global_Serial1v>
   b7f80:	6803      	ldr	r3, [r0, #0]
   b7f82:	691b      	ldr	r3, [r3, #16]
   b7f84:	4798      	blx	r3
   b7f86:	2800      	cmp	r0, #0
   b7f88:	dd01      	ble.n	b7f8e <serialEventRun+0x2e>
        serialEvent1();
   b7f8a:	f3af 8000 	nop.w
}
   b7f8e:	bd08      	pop	{r3, pc}
	...

000b7f98 <_post_loop>:
{
   b7f98:	b508      	push	{r3, lr}
	serialEventRun();
   b7f9a:	f7ff ffe1 	bl	b7f60 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7f9e:	f7fe fd8d 	bl	b6abc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7fa2:	4b01      	ldr	r3, [pc, #4]	; (b7fa8 <_post_loop+0x10>)
   b7fa4:	6018      	str	r0, [r3, #0]
}
   b7fa6:	bd08      	pop	{r3, pc}
   b7fa8:	2003e728 	.word	0x2003e728

000b7fac <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7fac:	4805      	ldr	r0, [pc, #20]	; (b7fc4 <_Z33system_initialize_user_backup_ramv+0x18>)
   b7fae:	4a06      	ldr	r2, [pc, #24]	; (b7fc8 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b7fb0:	4906      	ldr	r1, [pc, #24]	; (b7fcc <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b7fb2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7fb4:	1a12      	subs	r2, r2, r0
   b7fb6:	f000 fa80 	bl	b84ba <memcpy>
    __backup_sram_signature = signature;
   b7fba:	4b05      	ldr	r3, [pc, #20]	; (b7fd0 <_Z33system_initialize_user_backup_ramv+0x24>)
   b7fbc:	4a05      	ldr	r2, [pc, #20]	; (b7fd4 <_Z33system_initialize_user_backup_ramv+0x28>)
   b7fbe:	601a      	str	r2, [r3, #0]
}
   b7fc0:	bd08      	pop	{r3, pc}
   b7fc2:	bf00      	nop
   b7fc4:	2003f400 	.word	0x2003f400
   b7fc8:	2003f404 	.word	0x2003f404
   b7fcc:	000bb7f8 	.word	0x000bb7f8
   b7fd0:	2003f400 	.word	0x2003f400
   b7fd4:	9a271c1e 	.word	0x9a271c1e

000b7fd8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b7fd8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7fda:	2300      	movs	r3, #0
   b7fdc:	9300      	str	r3, [sp, #0]
   b7fde:	461a      	mov	r2, r3
   b7fe0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7fe4:	f7fe ff34 	bl	b6e50 <system_ctrl_set_result>
}
   b7fe8:	b003      	add	sp, #12
   b7fea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7ff0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b7ff0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b7ff2:	8843      	ldrh	r3, [r0, #2]
   b7ff4:	2b0a      	cmp	r3, #10
   b7ff6:	d008      	beq.n	b800a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b7ff8:	2b50      	cmp	r3, #80	; 0x50
   b7ffa:	d10b      	bne.n	b8014 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b7ffc:	4b09      	ldr	r3, [pc, #36]	; (b8024 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b7ffe:	681b      	ldr	r3, [r3, #0]
   b8000:	b14b      	cbz	r3, b8016 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b8002:	b003      	add	sp, #12
   b8004:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b8008:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b800a:	f7ff ffe5 	bl	b7fd8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b800e:	b003      	add	sp, #12
   b8010:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8014:	2300      	movs	r3, #0
   b8016:	9300      	str	r3, [sp, #0]
   b8018:	461a      	mov	r2, r3
   b801a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b801e:	f7fe ff17 	bl	b6e50 <system_ctrl_set_result>
}
   b8022:	e7f4      	b.n	b800e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b8024:	2003e724 	.word	0x2003e724

000b8028 <module_user_init_hook>:
{
   b8028:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b802a:	4812      	ldr	r0, [pc, #72]	; (b8074 <module_user_init_hook+0x4c>)
   b802c:	2100      	movs	r1, #0
   b802e:	f7fe ffc1 	bl	b6fb4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b8032:	4b11      	ldr	r3, [pc, #68]	; (b8078 <module_user_init_hook+0x50>)
   b8034:	681a      	ldr	r2, [r3, #0]
   b8036:	4b11      	ldr	r3, [pc, #68]	; (b807c <module_user_init_hook+0x54>)
   b8038:	429a      	cmp	r2, r3
   b803a:	4b11      	ldr	r3, [pc, #68]	; (b8080 <module_user_init_hook+0x58>)
   b803c:	bf0c      	ite	eq
   b803e:	2201      	moveq	r2, #1
   b8040:	2200      	movne	r2, #0
   b8042:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b8044:	d001      	beq.n	b804a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b8046:	f7ff ffb1 	bl	b7fac <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b804a:	f7fe fd27 	bl	b6a9c <HAL_RNG_GetRandomNumber>
   b804e:	4604      	mov	r4, r0
    srand(seed);
   b8050:	f000 fa4a 	bl	b84e8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b8054:	4b0b      	ldr	r3, [pc, #44]	; (b8084 <module_user_init_hook+0x5c>)
   b8056:	b113      	cbz	r3, b805e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b8058:	4620      	mov	r0, r4
   b805a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b805e:	2100      	movs	r1, #0
   b8060:	4808      	ldr	r0, [pc, #32]	; (b8084 <module_user_init_hook+0x5c>)
   b8062:	f7fe ff07 	bl	b6e74 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b8066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b806a:	4807      	ldr	r0, [pc, #28]	; (b8088 <module_user_init_hook+0x60>)
   b806c:	2100      	movs	r1, #0
   b806e:	f7fe bee5 	b.w	b6e3c <system_ctrl_set_app_request_handler>
   b8072:	bf00      	nop
   b8074:	000b7f55 	.word	0x000b7f55
   b8078:	2003f400 	.word	0x2003f400
   b807c:	9a271c1e 	.word	0x9a271c1e
   b8080:	2003e720 	.word	0x2003e720
   b8084:	00000000 	.word	0x00000000
   b8088:	000b7ff1 	.word	0x000b7ff1

000b808c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b808c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b808e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b8090:	d902      	bls.n	b8098 <pinAvailable+0xc>
    return false;
   b8092:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b8094:	b002      	add	sp, #8
   b8096:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b8098:	f1a0 030b 	sub.w	r3, r0, #11
   b809c:	2b02      	cmp	r3, #2
   b809e:	d81a      	bhi.n	b80d6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b80a0:	4c17      	ldr	r4, [pc, #92]	; (b8100 <pinAvailable+0x74>)
   b80a2:	7821      	ldrb	r1, [r4, #0]
   b80a4:	f3bf 8f5b 	dmb	ish
   b80a8:	f011 0101 	ands.w	r1, r1, #1
   b80ac:	d10b      	bne.n	b80c6 <pinAvailable+0x3a>
   b80ae:	4620      	mov	r0, r4
   b80b0:	9101      	str	r1, [sp, #4]
   b80b2:	f7fc fd13 	bl	b4adc <__cxa_guard_acquire>
   b80b6:	9901      	ldr	r1, [sp, #4]
   b80b8:	b128      	cbz	r0, b80c6 <pinAvailable+0x3a>
   b80ba:	4812      	ldr	r0, [pc, #72]	; (b8104 <pinAvailable+0x78>)
   b80bc:	f7ff fa0c 	bl	b74d8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b80c0:	4620      	mov	r0, r4
   b80c2:	f7fc fd10 	bl	b4ae6 <__cxa_guard_release>
   b80c6:	4b0f      	ldr	r3, [pc, #60]	; (b8104 <pinAvailable+0x78>)
   b80c8:	7818      	ldrb	r0, [r3, #0]
   b80ca:	f7fe fdef 	bl	b6cac <hal_spi_is_enabled>
   b80ce:	2800      	cmp	r0, #0
   b80d0:	d1df      	bne.n	b8092 <pinAvailable+0x6>
  return true; // 'pin' is available
   b80d2:	2001      	movs	r0, #1
   b80d4:	e7de      	b.n	b8094 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b80d6:	2801      	cmp	r0, #1
   b80d8:	d809      	bhi.n	b80ee <pinAvailable+0x62>
   b80da:	f000 f86d 	bl	b81b8 <_Z19__fetch_global_Wirev>
   b80de:	2100      	movs	r1, #0
   b80e0:	7c00      	ldrb	r0, [r0, #16]
   b80e2:	f7fe fd5b 	bl	b6b9c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b80e6:	f080 0001 	eor.w	r0, r0, #1
   b80ea:	b2c0      	uxtb	r0, r0
   b80ec:	e7d2      	b.n	b8094 <pinAvailable+0x8>
   b80ee:	3809      	subs	r0, #9
   b80f0:	2801      	cmp	r0, #1
   b80f2:	d8ee      	bhi.n	b80d2 <pinAvailable+0x46>
   b80f4:	f000 f8a0 	bl	b8238 <_Z22__fetch_global_Serial1v>
   b80f8:	7c00      	ldrb	r0, [r0, #16]
   b80fa:	f7fe fe27 	bl	b6d4c <hal_usart_is_enabled>
   b80fe:	e7f2      	b.n	b80e6 <pinAvailable+0x5a>
   b8100:	2003e6b8 	.word	0x2003e6b8
   b8104:	2003e6bc 	.word	0x2003e6bc

000b8108 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b8108:	2823      	cmp	r0, #35	; 0x23
{
   b810a:	b538      	push	{r3, r4, r5, lr}
   b810c:	4604      	mov	r4, r0
   b810e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b8110:	d80a      	bhi.n	b8128 <pinMode+0x20>
   b8112:	29ff      	cmp	r1, #255	; 0xff
   b8114:	d008      	beq.n	b8128 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b8116:	f7ff ffb9 	bl	b808c <pinAvailable>
   b811a:	b128      	cbz	r0, b8128 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b811c:	4629      	mov	r1, r5
   b811e:	4620      	mov	r0, r4
}
   b8120:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b8124:	f7fe bcd2 	b.w	b6acc <hal_gpio_mode>
}
   b8128:	bd38      	pop	{r3, r4, r5, pc}

000b812a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b812a:	b538      	push	{r3, r4, r5, lr}
   b812c:	4604      	mov	r4, r0
   b812e:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b8130:	f7fe fcd4 	bl	b6adc <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b8134:	28ff      	cmp	r0, #255	; 0xff
   b8136:	d010      	beq.n	b815a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b8138:	2806      	cmp	r0, #6
   b813a:	d804      	bhi.n	b8146 <digitalWrite+0x1c>
   b813c:	234d      	movs	r3, #77	; 0x4d
   b813e:	fa23 f000 	lsr.w	r0, r3, r0
   b8142:	07c3      	lsls	r3, r0, #31
   b8144:	d409      	bmi.n	b815a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b8146:	4620      	mov	r0, r4
   b8148:	f7ff ffa0 	bl	b808c <pinAvailable>
   b814c:	b128      	cbz	r0, b815a <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b814e:	4629      	mov	r1, r5
   b8150:	4620      	mov	r0, r4
}
   b8152:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b8156:	f7fe bcc9 	b.w	b6aec <hal_gpio_write>
}
   b815a:	bd38      	pop	{r3, r4, r5, pc}

000b815c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   b815c:	b510      	push	{r4, lr}
   b815e:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   b8160:	f7fe fcbc 	bl	b6adc <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b8164:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b8166:	b2db      	uxtb	r3, r3
   b8168:	2b01      	cmp	r3, #1
   b816a:	d908      	bls.n	b817e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b816c:	4620      	mov	r0, r4
   b816e:	f7ff ff8d 	bl	b808c <pinAvailable>
   b8172:	b120      	cbz	r0, b817e <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   b8174:	4620      	mov	r0, r4
}
   b8176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   b817a:	f7fe bcbf 	b.w	b6afc <hal_gpio_read>
}
   b817e:	2000      	movs	r0, #0
   b8180:	bd10      	pop	{r4, pc}

000b8182 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8182:	4770      	bx	lr

000b8184 <_Z17acquireWireBufferv>:
{
   b8184:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b8186:	4b0a      	ldr	r3, [pc, #40]	; (b81b0 <_Z17acquireWireBufferv+0x2c>)
   b8188:	6003      	str	r3, [r0, #0]
   b818a:	2301      	movs	r3, #1
{
   b818c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b818e:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8190:	4908      	ldr	r1, [pc, #32]	; (b81b4 <_Z17acquireWireBufferv+0x30>)
   b8192:	2020      	movs	r0, #32
   b8194:	f000 f874 	bl	b8280 <_ZnajRKSt9nothrow_t>
	};
   b8198:	2520      	movs	r5, #32
   b819a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b819c:	4905      	ldr	r1, [pc, #20]	; (b81b4 <_Z17acquireWireBufferv+0x30>)
	};
   b819e:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b81a0:	4628      	mov	r0, r5
   b81a2:	f000 f86d 	bl	b8280 <_ZnajRKSt9nothrow_t>
	};
   b81a6:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b81aa:	4620      	mov	r0, r4
   b81ac:	bd38      	pop	{r3, r4, r5, pc}
   b81ae:	bf00      	nop
   b81b0:	00010018 	.word	0x00010018
   b81b4:	000bb12c 	.word	0x000bb12c

000b81b8 <_Z19__fetch_global_Wirev>:
{
   b81b8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b81ba:	4d0e      	ldr	r5, [pc, #56]	; (b81f4 <_Z19__fetch_global_Wirev+0x3c>)
   b81bc:	7829      	ldrb	r1, [r5, #0]
   b81be:	f3bf 8f5b 	dmb	ish
   b81c2:	f011 0401 	ands.w	r4, r1, #1
{
   b81c6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b81c8:	d111      	bne.n	b81ee <_Z19__fetch_global_Wirev+0x36>
   b81ca:	4628      	mov	r0, r5
   b81cc:	f7fc fc86 	bl	b4adc <__cxa_guard_acquire>
   b81d0:	b168      	cbz	r0, b81ee <_Z19__fetch_global_Wirev+0x36>
   b81d2:	4668      	mov	r0, sp
   b81d4:	f7ff ffd6 	bl	b8184 <_Z17acquireWireBufferv>
   b81d8:	466a      	mov	r2, sp
   b81da:	4621      	mov	r1, r4
   b81dc:	4806      	ldr	r0, [pc, #24]	; (b81f8 <_Z19__fetch_global_Wirev+0x40>)
   b81de:	f7fe ff67 	bl	b70b0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b81e2:	4628      	mov	r0, r5
   b81e4:	f7fc fc7f 	bl	b4ae6 <__cxa_guard_release>
   b81e8:	4804      	ldr	r0, [pc, #16]	; (b81fc <_Z19__fetch_global_Wirev+0x44>)
   b81ea:	f000 f95d 	bl	b84a8 <atexit>
	return wire;
}
   b81ee:	4802      	ldr	r0, [pc, #8]	; (b81f8 <_Z19__fetch_global_Wirev+0x40>)
   b81f0:	b007      	add	sp, #28
   b81f2:	bd30      	pop	{r4, r5, pc}
   b81f4:	2003e72c 	.word	0x2003e72c
   b81f8:	2003e730 	.word	0x2003e730
   b81fc:	000b8183 	.word	0x000b8183

000b8200 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8200:	4770      	bx	lr
	...

000b8204 <_Z20acquireSerial1Bufferv>:
{
   b8204:	b538      	push	{r3, r4, r5, lr}
   b8206:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b8208:	2514      	movs	r5, #20
   b820a:	462a      	mov	r2, r5
   b820c:	2100      	movs	r1, #0
   b820e:	f000 f962 	bl	b84d6 <memset>
   b8212:	8025      	strh	r5, [r4, #0]
   b8214:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8216:	4907      	ldr	r1, [pc, #28]	; (b8234 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b8218:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b821a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b821c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b821e:	f000 f82f 	bl	b8280 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8222:	4904      	ldr	r1, [pc, #16]	; (b8234 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b8224:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8226:	4628      	mov	r0, r5
   b8228:	f000 f82a 	bl	b8280 <_ZnajRKSt9nothrow_t>
    };
   b822c:	60e0      	str	r0, [r4, #12]
}
   b822e:	4620      	mov	r0, r4
   b8230:	bd38      	pop	{r3, r4, r5, pc}
   b8232:	bf00      	nop
   b8234:	000bb12c 	.word	0x000bb12c

000b8238 <_Z22__fetch_global_Serial1v>:
{
   b8238:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b823a:	4d0e      	ldr	r5, [pc, #56]	; (b8274 <_Z22__fetch_global_Serial1v+0x3c>)
   b823c:	7829      	ldrb	r1, [r5, #0]
   b823e:	f3bf 8f5b 	dmb	ish
   b8242:	f011 0401 	ands.w	r4, r1, #1
{
   b8246:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8248:	d111      	bne.n	b826e <_Z22__fetch_global_Serial1v+0x36>
   b824a:	4628      	mov	r0, r5
   b824c:	f7fc fc46 	bl	b4adc <__cxa_guard_acquire>
   b8250:	b168      	cbz	r0, b826e <_Z22__fetch_global_Serial1v+0x36>
   b8252:	a801      	add	r0, sp, #4
   b8254:	f7ff ffd6 	bl	b8204 <_Z20acquireSerial1Bufferv>
   b8258:	aa01      	add	r2, sp, #4
   b825a:	4621      	mov	r1, r4
   b825c:	4806      	ldr	r0, [pc, #24]	; (b8278 <_Z22__fetch_global_Serial1v+0x40>)
   b825e:	f7ff fda3 	bl	b7da8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b8262:	4628      	mov	r0, r5
   b8264:	f7fc fc3f 	bl	b4ae6 <__cxa_guard_release>
   b8268:	4804      	ldr	r0, [pc, #16]	; (b827c <_Z22__fetch_global_Serial1v+0x44>)
   b826a:	f000 f91d 	bl	b84a8 <atexit>
    return serial1;
}
   b826e:	4802      	ldr	r0, [pc, #8]	; (b8278 <_Z22__fetch_global_Serial1v+0x40>)
   b8270:	b007      	add	sp, #28
   b8272:	bd30      	pop	{r4, r5, pc}
   b8274:	2003e744 	.word	0x2003e744
   b8278:	2003e748 	.word	0x2003e748
   b827c:	000b8201 	.word	0x000b8201

000b8280 <_ZnajRKSt9nothrow_t>:
   b8280:	f7fc bc19 	b.w	b4ab6 <_Znaj>

000b8284 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b8284:	4901      	ldr	r1, [pc, #4]	; (b828c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b8286:	f000 b8f9 	b.w	b847c <_ZNKSt9type_infoeqERKS_>
   b828a:	bf00      	nop
   b828c:	000bb148 	.word	0x000bb148

000b8290 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b8290:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b8292:	2400      	movs	r4, #0
   b8294:	2310      	movs	r3, #16
   b8296:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b829a:	6803      	ldr	r3, [r0, #0]
   b829c:	4615      	mov	r5, r2
   b829e:	699e      	ldr	r6, [r3, #24]
   b82a0:	6812      	ldr	r2, [r2, #0]
   b82a2:	466b      	mov	r3, sp
   b82a4:	e9cd 4400 	strd	r4, r4, [sp]
   b82a8:	47b0      	blx	r6
   b82aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b82ae:	f003 0306 	and.w	r3, r3, #6
   b82b2:	2b06      	cmp	r3, #6
   b82b4:	bf03      	ittte	eq
   b82b6:	9b00      	ldreq	r3, [sp, #0]
   b82b8:	602b      	streq	r3, [r5, #0]
   b82ba:	2001      	moveq	r0, #1
   b82bc:	4620      	movne	r0, r4
   b82be:	b004      	add	sp, #16
   b82c0:	bd70      	pop	{r4, r5, r6, pc}

000b82c2 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b82c2:	9800      	ldr	r0, [sp, #0]
   b82c4:	4290      	cmp	r0, r2
   b82c6:	bf14      	ite	ne
   b82c8:	2001      	movne	r0, #1
   b82ca:	2006      	moveq	r0, #6
   b82cc:	4770      	bx	lr
	...

000b82d0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b82d0:	b510      	push	{r4, lr}
   b82d2:	4b03      	ldr	r3, [pc, #12]	; (b82e0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b82d4:	6003      	str	r3, [r0, #0]
   b82d6:	4604      	mov	r4, r0
   b82d8:	f000 f8cd 	bl	b8476 <_ZNSt9type_infoD1Ev>
   b82dc:	4620      	mov	r0, r4
   b82de:	bd10      	pop	{r4, pc}
   b82e0:	000bb188 	.word	0x000bb188

000b82e4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b82e4:	b510      	push	{r4, lr}
   b82e6:	4604      	mov	r4, r0
   b82e8:	f7ff fff2 	bl	b82d0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b82ec:	4620      	mov	r0, r4
   b82ee:	2108      	movs	r1, #8
   b82f0:	f7fc fbe5 	bl	b4abe <_ZdlPvj>
   b82f4:	4620      	mov	r0, r4
   b82f6:	bd10      	pop	{r4, pc}

000b82f8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b82f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b82fc:	461f      	mov	r7, r3
   b82fe:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b8302:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b8306:	4598      	cmp	r8, r3
   b8308:	4606      	mov	r6, r0
   b830a:	4615      	mov	r5, r2
   b830c:	d107      	bne.n	b831e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b830e:	9907      	ldr	r1, [sp, #28]
   b8310:	f000 f8b4 	bl	b847c <_ZNKSt9type_infoeqERKS_>
   b8314:	b118      	cbz	r0, b831e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b8316:	7165      	strb	r5, [r4, #5]
   b8318:	2000      	movs	r0, #0
   b831a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b831e:	4639      	mov	r1, r7
   b8320:	4630      	mov	r0, r6
   b8322:	f000 f8ab 	bl	b847c <_ZNKSt9type_infoeqERKS_>
   b8326:	2800      	cmp	r0, #0
   b8328:	d0f6      	beq.n	b8318 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b832a:	2301      	movs	r3, #1
   b832c:	f8c4 8000 	str.w	r8, [r4]
   b8330:	7125      	strb	r5, [r4, #4]
   b8332:	71a3      	strb	r3, [r4, #6]
   b8334:	e7f0      	b.n	b8318 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b8336 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b8336:	b538      	push	{r3, r4, r5, lr}
   b8338:	4615      	mov	r5, r2
   b833a:	461c      	mov	r4, r3
   b833c:	f000 f89e 	bl	b847c <_ZNKSt9type_infoeqERKS_>
   b8340:	b120      	cbz	r0, b834c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b8342:	2308      	movs	r3, #8
   b8344:	60e3      	str	r3, [r4, #12]
   b8346:	2306      	movs	r3, #6
   b8348:	6025      	str	r5, [r4, #0]
   b834a:	7123      	strb	r3, [r4, #4]
   b834c:	bd38      	pop	{r3, r4, r5, pc}

000b834e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b834e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8350:	4605      	mov	r5, r0
   b8352:	460c      	mov	r4, r1
   b8354:	9201      	str	r2, [sp, #4]
   b8356:	461e      	mov	r6, r3
   b8358:	f000 f890 	bl	b847c <_ZNKSt9type_infoeqERKS_>
   b835c:	b950      	cbnz	r0, b8374 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b835e:	2e03      	cmp	r6, #3
   b8360:	d808      	bhi.n	b8374 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b8362:	6823      	ldr	r3, [r4, #0]
   b8364:	9a01      	ldr	r2, [sp, #4]
   b8366:	695b      	ldr	r3, [r3, #20]
   b8368:	4629      	mov	r1, r5
   b836a:	4620      	mov	r0, r4
   b836c:	b002      	add	sp, #8
   b836e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b8372:	4718      	bx	r3
   b8374:	b002      	add	sp, #8
   b8376:	bd70      	pop	{r4, r5, r6, pc}

000b8378 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b8378:	b510      	push	{r4, lr}
   b837a:	4b03      	ldr	r3, [pc, #12]	; (b8388 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b837c:	6003      	str	r3, [r0, #0]
   b837e:	4604      	mov	r4, r0
   b8380:	f7ff ffa6 	bl	b82d0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b8384:	4620      	mov	r0, r4
   b8386:	bd10      	pop	{r4, pc}
   b8388:	000bb1e8 	.word	0x000bb1e8

000b838c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b838c:	b510      	push	{r4, lr}
   b838e:	4604      	mov	r4, r0
   b8390:	f7ff fff2 	bl	b8378 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b8394:	4620      	mov	r0, r4
   b8396:	210c      	movs	r1, #12
   b8398:	f7fc fb91 	bl	b4abe <_ZdlPvj>
   b839c:	4620      	mov	r0, r4
   b839e:	bd10      	pop	{r4, pc}

000b83a0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b83a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b83a2:	9f08      	ldr	r7, [sp, #32]
   b83a4:	4297      	cmp	r7, r2
   b83a6:	4605      	mov	r5, r0
   b83a8:	460e      	mov	r6, r1
   b83aa:	4614      	mov	r4, r2
   b83ac:	d00a      	beq.n	b83c4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b83ae:	68a8      	ldr	r0, [r5, #8]
   b83b0:	6802      	ldr	r2, [r0, #0]
   b83b2:	9708      	str	r7, [sp, #32]
   b83b4:	6a15      	ldr	r5, [r2, #32]
   b83b6:	4631      	mov	r1, r6
   b83b8:	4622      	mov	r2, r4
   b83ba:	46ac      	mov	ip, r5
   b83bc:	b003      	add	sp, #12
   b83be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b83c2:	4760      	bx	ip
   b83c4:	4619      	mov	r1, r3
   b83c6:	9301      	str	r3, [sp, #4]
   b83c8:	f000 f858 	bl	b847c <_ZNKSt9type_infoeqERKS_>
   b83cc:	9b01      	ldr	r3, [sp, #4]
   b83ce:	2800      	cmp	r0, #0
   b83d0:	d0ed      	beq.n	b83ae <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b83d2:	2006      	movs	r0, #6
   b83d4:	b003      	add	sp, #12
   b83d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b83d8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b83d8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b83dc:	460d      	mov	r5, r1
   b83de:	4619      	mov	r1, r3
   b83e0:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b83e4:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b83e8:	4681      	mov	r9, r0
   b83ea:	4617      	mov	r7, r2
   b83ec:	4698      	mov	r8, r3
   b83ee:	f000 f845 	bl	b847c <_ZNKSt9type_infoeqERKS_>
   b83f2:	b190      	cbz	r0, b841a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b83f4:	2d00      	cmp	r5, #0
   b83f6:	6034      	str	r4, [r6, #0]
   b83f8:	7137      	strb	r7, [r6, #4]
   b83fa:	db09      	blt.n	b8410 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b83fc:	1961      	adds	r1, r4, r5
   b83fe:	458a      	cmp	sl, r1
   b8400:	bf0c      	ite	eq
   b8402:	2106      	moveq	r1, #6
   b8404:	2101      	movne	r1, #1
   b8406:	71b1      	strb	r1, [r6, #6]
   b8408:	2000      	movs	r0, #0
   b840a:	b001      	add	sp, #4
   b840c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8410:	3502      	adds	r5, #2
   b8412:	d1f9      	bne.n	b8408 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8414:	2301      	movs	r3, #1
   b8416:	71b3      	strb	r3, [r6, #6]
   b8418:	e7f6      	b.n	b8408 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b841a:	4554      	cmp	r4, sl
   b841c:	d106      	bne.n	b842c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b841e:	4659      	mov	r1, fp
   b8420:	4648      	mov	r0, r9
   b8422:	f000 f82b 	bl	b847c <_ZNKSt9type_infoeqERKS_>
   b8426:	b108      	cbz	r0, b842c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b8428:	7177      	strb	r7, [r6, #5]
   b842a:	e7ed      	b.n	b8408 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b842c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b8430:	6803      	ldr	r3, [r0, #0]
   b8432:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b8436:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b843a:	69dc      	ldr	r4, [r3, #28]
   b843c:	463a      	mov	r2, r7
   b843e:	4643      	mov	r3, r8
   b8440:	4629      	mov	r1, r5
   b8442:	46a4      	mov	ip, r4
   b8444:	b001      	add	sp, #4
   b8446:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b844a:	4760      	bx	ip

000b844c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b844c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8450:	4607      	mov	r7, r0
   b8452:	460c      	mov	r4, r1
   b8454:	4615      	mov	r5, r2
   b8456:	461e      	mov	r6, r3
   b8458:	f7ff ff6d 	bl	b8336 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b845c:	b948      	cbnz	r0, b8472 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b845e:	68b8      	ldr	r0, [r7, #8]
   b8460:	6803      	ldr	r3, [r0, #0]
   b8462:	699f      	ldr	r7, [r3, #24]
   b8464:	462a      	mov	r2, r5
   b8466:	4633      	mov	r3, r6
   b8468:	4621      	mov	r1, r4
   b846a:	46bc      	mov	ip, r7
   b846c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b8470:	4760      	bx	ip
   b8472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8476 <_ZNSt9type_infoD1Ev>:
   b8476:	4770      	bx	lr

000b8478 <_ZNKSt9type_info14__is_pointer_pEv>:
   b8478:	2000      	movs	r0, #0
   b847a:	4770      	bx	lr

000b847c <_ZNKSt9type_infoeqERKS_>:
   b847c:	4281      	cmp	r1, r0
   b847e:	b508      	push	{r3, lr}
   b8480:	d00e      	beq.n	b84a0 <_ZNKSt9type_infoeqERKS_+0x24>
   b8482:	6840      	ldr	r0, [r0, #4]
   b8484:	7803      	ldrb	r3, [r0, #0]
   b8486:	2b2a      	cmp	r3, #42	; 0x2a
   b8488:	d00c      	beq.n	b84a4 <_ZNKSt9type_infoeqERKS_+0x28>
   b848a:	6849      	ldr	r1, [r1, #4]
   b848c:	780b      	ldrb	r3, [r1, #0]
   b848e:	2b2a      	cmp	r3, #42	; 0x2a
   b8490:	bf08      	it	eq
   b8492:	3101      	addeq	r1, #1
   b8494:	f7fc faa8 	bl	b49e8 <strcmp>
   b8498:	fab0 f080 	clz	r0, r0
   b849c:	0940      	lsrs	r0, r0, #5
   b849e:	bd08      	pop	{r3, pc}
   b84a0:	2001      	movs	r0, #1
   b84a2:	e7fc      	b.n	b849e <_ZNKSt9type_infoeqERKS_+0x22>
   b84a4:	2000      	movs	r0, #0
   b84a6:	e7fa      	b.n	b849e <_ZNKSt9type_infoeqERKS_+0x22>

000b84a8 <atexit>:
   b84a8:	2300      	movs	r3, #0
   b84aa:	4601      	mov	r1, r0
   b84ac:	461a      	mov	r2, r3
   b84ae:	4618      	mov	r0, r3
   b84b0:	f000 be8c 	b.w	b91cc <__register_exitproc>

000b84b4 <atof>:
   b84b4:	2100      	movs	r1, #0
   b84b6:	f000 be7d 	b.w	b91b4 <strtod>

000b84ba <memcpy>:
   b84ba:	440a      	add	r2, r1
   b84bc:	4291      	cmp	r1, r2
   b84be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b84c2:	d100      	bne.n	b84c6 <memcpy+0xc>
   b84c4:	4770      	bx	lr
   b84c6:	b510      	push	{r4, lr}
   b84c8:	f811 4b01 	ldrb.w	r4, [r1], #1
   b84cc:	f803 4f01 	strb.w	r4, [r3, #1]!
   b84d0:	4291      	cmp	r1, r2
   b84d2:	d1f9      	bne.n	b84c8 <memcpy+0xe>
   b84d4:	bd10      	pop	{r4, pc}

000b84d6 <memset>:
   b84d6:	4402      	add	r2, r0
   b84d8:	4603      	mov	r3, r0
   b84da:	4293      	cmp	r3, r2
   b84dc:	d100      	bne.n	b84e0 <memset+0xa>
   b84de:	4770      	bx	lr
   b84e0:	f803 1b01 	strb.w	r1, [r3], #1
   b84e4:	e7f9      	b.n	b84da <memset+0x4>
	...

000b84e8 <srand>:
   b84e8:	b538      	push	{r3, r4, r5, lr}
   b84ea:	4b10      	ldr	r3, [pc, #64]	; (b852c <srand+0x44>)
   b84ec:	681d      	ldr	r5, [r3, #0]
   b84ee:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b84f0:	4604      	mov	r4, r0
   b84f2:	b9b3      	cbnz	r3, b8522 <srand+0x3a>
   b84f4:	2018      	movs	r0, #24
   b84f6:	f7fe fd25 	bl	b6f44 <malloc>
   b84fa:	4602      	mov	r2, r0
   b84fc:	63a8      	str	r0, [r5, #56]	; 0x38
   b84fe:	b920      	cbnz	r0, b850a <srand+0x22>
   b8500:	4b0b      	ldr	r3, [pc, #44]	; (b8530 <srand+0x48>)
   b8502:	480c      	ldr	r0, [pc, #48]	; (b8534 <srand+0x4c>)
   b8504:	2142      	movs	r1, #66	; 0x42
   b8506:	f7fe fd4d 	bl	b6fa4 <__assert_func>
   b850a:	490b      	ldr	r1, [pc, #44]	; (b8538 <srand+0x50>)
   b850c:	4b0b      	ldr	r3, [pc, #44]	; (b853c <srand+0x54>)
   b850e:	e9c0 1300 	strd	r1, r3, [r0]
   b8512:	4b0b      	ldr	r3, [pc, #44]	; (b8540 <srand+0x58>)
   b8514:	6083      	str	r3, [r0, #8]
   b8516:	230b      	movs	r3, #11
   b8518:	8183      	strh	r3, [r0, #12]
   b851a:	2100      	movs	r1, #0
   b851c:	2001      	movs	r0, #1
   b851e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b8522:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8524:	2200      	movs	r2, #0
   b8526:	611c      	str	r4, [r3, #16]
   b8528:	615a      	str	r2, [r3, #20]
   b852a:	bd38      	pop	{r3, r4, r5, pc}
   b852c:	2003e388 	.word	0x2003e388
   b8530:	000bb221 	.word	0x000bb221
   b8534:	000bb238 	.word	0x000bb238
   b8538:	abcd330e 	.word	0xabcd330e
   b853c:	e66d1234 	.word	0xe66d1234
   b8540:	0005deec 	.word	0x0005deec

000b8544 <strncmp>:
   b8544:	b510      	push	{r4, lr}
   b8546:	b17a      	cbz	r2, b8568 <strncmp+0x24>
   b8548:	4603      	mov	r3, r0
   b854a:	3901      	subs	r1, #1
   b854c:	1884      	adds	r4, r0, r2
   b854e:	f813 0b01 	ldrb.w	r0, [r3], #1
   b8552:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b8556:	4290      	cmp	r0, r2
   b8558:	d101      	bne.n	b855e <strncmp+0x1a>
   b855a:	42a3      	cmp	r3, r4
   b855c:	d101      	bne.n	b8562 <strncmp+0x1e>
   b855e:	1a80      	subs	r0, r0, r2
   b8560:	bd10      	pop	{r4, pc}
   b8562:	2800      	cmp	r0, #0
   b8564:	d1f3      	bne.n	b854e <strncmp+0xa>
   b8566:	e7fa      	b.n	b855e <strncmp+0x1a>
   b8568:	4610      	mov	r0, r2
   b856a:	e7f9      	b.n	b8560 <strncmp+0x1c>

000b856c <sulp>:
   b856c:	b570      	push	{r4, r5, r6, lr}
   b856e:	4604      	mov	r4, r0
   b8570:	460d      	mov	r5, r1
   b8572:	ec45 4b10 	vmov	d0, r4, r5
   b8576:	4616      	mov	r6, r2
   b8578:	f001 fd82 	bl	ba080 <__ulp>
   b857c:	ec51 0b10 	vmov	r0, r1, d0
   b8580:	b17e      	cbz	r6, b85a2 <sulp+0x36>
   b8582:	f3c5 530a 	ubfx	r3, r5, #20, #11
   b8586:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b858a:	2b00      	cmp	r3, #0
   b858c:	dd09      	ble.n	b85a2 <sulp+0x36>
   b858e:	051b      	lsls	r3, r3, #20
   b8590:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   b8594:	2400      	movs	r4, #0
   b8596:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   b859a:	4622      	mov	r2, r4
   b859c:	462b      	mov	r3, r5
   b859e:	f7fb fefb 	bl	b4398 <__aeabi_dmul>
   b85a2:	bd70      	pop	{r4, r5, r6, pc}
   b85a4:	0000      	movs	r0, r0
	...

000b85a8 <_strtod_l>:
   b85a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b85ac:	ed2d 8b02 	vpush	{d8}
   b85b0:	b09d      	sub	sp, #116	; 0x74
   b85b2:	461f      	mov	r7, r3
   b85b4:	2300      	movs	r3, #0
   b85b6:	9318      	str	r3, [sp, #96]	; 0x60
   b85b8:	4ba2      	ldr	r3, [pc, #648]	; (b8844 <_strtod_l+0x29c>)
   b85ba:	9213      	str	r2, [sp, #76]	; 0x4c
   b85bc:	681b      	ldr	r3, [r3, #0]
   b85be:	9305      	str	r3, [sp, #20]
   b85c0:	4604      	mov	r4, r0
   b85c2:	4618      	mov	r0, r3
   b85c4:	4688      	mov	r8, r1
   b85c6:	f7fc fa19 	bl	b49fc <strlen>
   b85ca:	f04f 0a00 	mov.w	sl, #0
   b85ce:	4605      	mov	r5, r0
   b85d0:	f04f 0b00 	mov.w	fp, #0
   b85d4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b85d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b85da:	781a      	ldrb	r2, [r3, #0]
   b85dc:	2a2b      	cmp	r2, #43	; 0x2b
   b85de:	d04e      	beq.n	b867e <_strtod_l+0xd6>
   b85e0:	d83b      	bhi.n	b865a <_strtod_l+0xb2>
   b85e2:	2a0d      	cmp	r2, #13
   b85e4:	d834      	bhi.n	b8650 <_strtod_l+0xa8>
   b85e6:	2a08      	cmp	r2, #8
   b85e8:	d834      	bhi.n	b8654 <_strtod_l+0xac>
   b85ea:	2a00      	cmp	r2, #0
   b85ec:	d03e      	beq.n	b866c <_strtod_l+0xc4>
   b85ee:	2300      	movs	r3, #0
   b85f0:	930a      	str	r3, [sp, #40]	; 0x28
   b85f2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   b85f4:	7833      	ldrb	r3, [r6, #0]
   b85f6:	2b30      	cmp	r3, #48	; 0x30
   b85f8:	f040 80b0 	bne.w	b875c <_strtod_l+0x1b4>
   b85fc:	7873      	ldrb	r3, [r6, #1]
   b85fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b8602:	2b58      	cmp	r3, #88	; 0x58
   b8604:	d168      	bne.n	b86d8 <_strtod_l+0x130>
   b8606:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b8608:	9301      	str	r3, [sp, #4]
   b860a:	ab18      	add	r3, sp, #96	; 0x60
   b860c:	9702      	str	r7, [sp, #8]
   b860e:	9300      	str	r3, [sp, #0]
   b8610:	4a8d      	ldr	r2, [pc, #564]	; (b8848 <_strtod_l+0x2a0>)
   b8612:	ab19      	add	r3, sp, #100	; 0x64
   b8614:	a917      	add	r1, sp, #92	; 0x5c
   b8616:	4620      	mov	r0, r4
   b8618:	f000 fea2 	bl	b9360 <__gethex>
   b861c:	f010 0707 	ands.w	r7, r0, #7
   b8620:	4605      	mov	r5, r0
   b8622:	d005      	beq.n	b8630 <_strtod_l+0x88>
   b8624:	2f06      	cmp	r7, #6
   b8626:	d12c      	bne.n	b8682 <_strtod_l+0xda>
   b8628:	3601      	adds	r6, #1
   b862a:	2300      	movs	r3, #0
   b862c:	9617      	str	r6, [sp, #92]	; 0x5c
   b862e:	930a      	str	r3, [sp, #40]	; 0x28
   b8630:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b8632:	2b00      	cmp	r3, #0
   b8634:	f040 8590 	bne.w	b9158 <_strtod_l+0xbb0>
   b8638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b863a:	b1eb      	cbz	r3, b8678 <_strtod_l+0xd0>
   b863c:	4652      	mov	r2, sl
   b863e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   b8642:	ec43 2b10 	vmov	d0, r2, r3
   b8646:	b01d      	add	sp, #116	; 0x74
   b8648:	ecbd 8b02 	vpop	{d8}
   b864c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8650:	2a20      	cmp	r2, #32
   b8652:	d1cc      	bne.n	b85ee <_strtod_l+0x46>
   b8654:	3301      	adds	r3, #1
   b8656:	9317      	str	r3, [sp, #92]	; 0x5c
   b8658:	e7be      	b.n	b85d8 <_strtod_l+0x30>
   b865a:	2a2d      	cmp	r2, #45	; 0x2d
   b865c:	d1c7      	bne.n	b85ee <_strtod_l+0x46>
   b865e:	2201      	movs	r2, #1
   b8660:	920a      	str	r2, [sp, #40]	; 0x28
   b8662:	1c5a      	adds	r2, r3, #1
   b8664:	9217      	str	r2, [sp, #92]	; 0x5c
   b8666:	785b      	ldrb	r3, [r3, #1]
   b8668:	2b00      	cmp	r3, #0
   b866a:	d1c2      	bne.n	b85f2 <_strtod_l+0x4a>
   b866c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b866e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b8672:	2b00      	cmp	r3, #0
   b8674:	f040 856e 	bne.w	b9154 <_strtod_l+0xbac>
   b8678:	4652      	mov	r2, sl
   b867a:	465b      	mov	r3, fp
   b867c:	e7e1      	b.n	b8642 <_strtod_l+0x9a>
   b867e:	2200      	movs	r2, #0
   b8680:	e7ee      	b.n	b8660 <_strtod_l+0xb8>
   b8682:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b8684:	b13a      	cbz	r2, b8696 <_strtod_l+0xee>
   b8686:	2135      	movs	r1, #53	; 0x35
   b8688:	a81a      	add	r0, sp, #104	; 0x68
   b868a:	f001 fe04 	bl	ba296 <__copybits>
   b868e:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8690:	4620      	mov	r0, r4
   b8692:	f001 f9c3 	bl	b9a1c <_Bfree>
   b8696:	3f01      	subs	r7, #1
   b8698:	2f04      	cmp	r7, #4
   b869a:	d806      	bhi.n	b86aa <_strtod_l+0x102>
   b869c:	e8df f007 	tbb	[pc, r7]
   b86a0:	1714030a 	.word	0x1714030a
   b86a4:	0a          	.byte	0x0a
   b86a5:	00          	.byte	0x00
   b86a6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   b86aa:	0728      	lsls	r0, r5, #28
   b86ac:	d5c0      	bpl.n	b8630 <_strtod_l+0x88>
   b86ae:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   b86b2:	e7bd      	b.n	b8630 <_strtod_l+0x88>
   b86b4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   b86b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b86ba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   b86be:	f202 4233 	addw	r2, r2, #1075	; 0x433
   b86c2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   b86c6:	e7f0      	b.n	b86aa <_strtod_l+0x102>
   b86c8:	f8df b180 	ldr.w	fp, [pc, #384]	; b884c <_strtod_l+0x2a4>
   b86cc:	e7ed      	b.n	b86aa <_strtod_l+0x102>
   b86ce:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   b86d2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   b86d6:	e7e8      	b.n	b86aa <_strtod_l+0x102>
   b86d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b86da:	1c5a      	adds	r2, r3, #1
   b86dc:	9217      	str	r2, [sp, #92]	; 0x5c
   b86de:	785b      	ldrb	r3, [r3, #1]
   b86e0:	2b30      	cmp	r3, #48	; 0x30
   b86e2:	d0f9      	beq.n	b86d8 <_strtod_l+0x130>
   b86e4:	2b00      	cmp	r3, #0
   b86e6:	d0a3      	beq.n	b8630 <_strtod_l+0x88>
   b86e8:	2301      	movs	r3, #1
   b86ea:	f04f 0900 	mov.w	r9, #0
   b86ee:	9304      	str	r3, [sp, #16]
   b86f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b86f2:	9308      	str	r3, [sp, #32]
   b86f4:	f8cd 901c 	str.w	r9, [sp, #28]
   b86f8:	464f      	mov	r7, r9
   b86fa:	220a      	movs	r2, #10
   b86fc:	9817      	ldr	r0, [sp, #92]	; 0x5c
   b86fe:	7806      	ldrb	r6, [r0, #0]
   b8700:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   b8704:	b2d9      	uxtb	r1, r3
   b8706:	2909      	cmp	r1, #9
   b8708:	d92a      	bls.n	b8760 <_strtod_l+0x1b8>
   b870a:	9905      	ldr	r1, [sp, #20]
   b870c:	462a      	mov	r2, r5
   b870e:	f7ff ff19 	bl	b8544 <strncmp>
   b8712:	b398      	cbz	r0, b877c <_strtod_l+0x1d4>
   b8714:	2000      	movs	r0, #0
   b8716:	4632      	mov	r2, r6
   b8718:	463d      	mov	r5, r7
   b871a:	9005      	str	r0, [sp, #20]
   b871c:	4603      	mov	r3, r0
   b871e:	2a65      	cmp	r2, #101	; 0x65
   b8720:	d001      	beq.n	b8726 <_strtod_l+0x17e>
   b8722:	2a45      	cmp	r2, #69	; 0x45
   b8724:	d118      	bne.n	b8758 <_strtod_l+0x1b0>
   b8726:	b91d      	cbnz	r5, b8730 <_strtod_l+0x188>
   b8728:	9a04      	ldr	r2, [sp, #16]
   b872a:	4302      	orrs	r2, r0
   b872c:	d09e      	beq.n	b866c <_strtod_l+0xc4>
   b872e:	2500      	movs	r5, #0
   b8730:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   b8734:	f108 0201 	add.w	r2, r8, #1
   b8738:	9217      	str	r2, [sp, #92]	; 0x5c
   b873a:	f898 2001 	ldrb.w	r2, [r8, #1]
   b873e:	2a2b      	cmp	r2, #43	; 0x2b
   b8740:	d075      	beq.n	b882e <_strtod_l+0x286>
   b8742:	2a2d      	cmp	r2, #45	; 0x2d
   b8744:	d07b      	beq.n	b883e <_strtod_l+0x296>
   b8746:	f04f 0c00 	mov.w	ip, #0
   b874a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   b874e:	2909      	cmp	r1, #9
   b8750:	f240 8082 	bls.w	b8858 <_strtod_l+0x2b0>
   b8754:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b8758:	2600      	movs	r6, #0
   b875a:	e09d      	b.n	b8898 <_strtod_l+0x2f0>
   b875c:	2300      	movs	r3, #0
   b875e:	e7c4      	b.n	b86ea <_strtod_l+0x142>
   b8760:	2f08      	cmp	r7, #8
   b8762:	bfd8      	it	le
   b8764:	9907      	ldrle	r1, [sp, #28]
   b8766:	f100 0001 	add.w	r0, r0, #1
   b876a:	bfda      	itte	le
   b876c:	fb02 3301 	mlale	r3, r2, r1, r3
   b8770:	9307      	strle	r3, [sp, #28]
   b8772:	fb02 3909 	mlagt	r9, r2, r9, r3
   b8776:	3701      	adds	r7, #1
   b8778:	9017      	str	r0, [sp, #92]	; 0x5c
   b877a:	e7bf      	b.n	b86fc <_strtod_l+0x154>
   b877c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b877e:	195a      	adds	r2, r3, r5
   b8780:	9217      	str	r2, [sp, #92]	; 0x5c
   b8782:	5d5a      	ldrb	r2, [r3, r5]
   b8784:	2f00      	cmp	r7, #0
   b8786:	d037      	beq.n	b87f8 <_strtod_l+0x250>
   b8788:	9005      	str	r0, [sp, #20]
   b878a:	463d      	mov	r5, r7
   b878c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   b8790:	2b09      	cmp	r3, #9
   b8792:	d912      	bls.n	b87ba <_strtod_l+0x212>
   b8794:	2301      	movs	r3, #1
   b8796:	e7c2      	b.n	b871e <_strtod_l+0x176>
   b8798:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b879a:	1c5a      	adds	r2, r3, #1
   b879c:	9217      	str	r2, [sp, #92]	; 0x5c
   b879e:	785a      	ldrb	r2, [r3, #1]
   b87a0:	3001      	adds	r0, #1
   b87a2:	2a30      	cmp	r2, #48	; 0x30
   b87a4:	d0f8      	beq.n	b8798 <_strtod_l+0x1f0>
   b87a6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   b87aa:	2b08      	cmp	r3, #8
   b87ac:	f200 84d9 	bhi.w	b9162 <_strtod_l+0xbba>
   b87b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b87b2:	9005      	str	r0, [sp, #20]
   b87b4:	2000      	movs	r0, #0
   b87b6:	9308      	str	r3, [sp, #32]
   b87b8:	4605      	mov	r5, r0
   b87ba:	3a30      	subs	r2, #48	; 0x30
   b87bc:	f100 0301 	add.w	r3, r0, #1
   b87c0:	d014      	beq.n	b87ec <_strtod_l+0x244>
   b87c2:	9905      	ldr	r1, [sp, #20]
   b87c4:	4419      	add	r1, r3
   b87c6:	9105      	str	r1, [sp, #20]
   b87c8:	462b      	mov	r3, r5
   b87ca:	eb00 0e05 	add.w	lr, r0, r5
   b87ce:	210a      	movs	r1, #10
   b87d0:	4573      	cmp	r3, lr
   b87d2:	d113      	bne.n	b87fc <_strtod_l+0x254>
   b87d4:	182b      	adds	r3, r5, r0
   b87d6:	2b08      	cmp	r3, #8
   b87d8:	f105 0501 	add.w	r5, r5, #1
   b87dc:	4405      	add	r5, r0
   b87de:	dc1c      	bgt.n	b881a <_strtod_l+0x272>
   b87e0:	9907      	ldr	r1, [sp, #28]
   b87e2:	230a      	movs	r3, #10
   b87e4:	fb03 2301 	mla	r3, r3, r1, r2
   b87e8:	9307      	str	r3, [sp, #28]
   b87ea:	2300      	movs	r3, #0
   b87ec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b87ee:	1c51      	adds	r1, r2, #1
   b87f0:	9117      	str	r1, [sp, #92]	; 0x5c
   b87f2:	7852      	ldrb	r2, [r2, #1]
   b87f4:	4618      	mov	r0, r3
   b87f6:	e7c9      	b.n	b878c <_strtod_l+0x1e4>
   b87f8:	4638      	mov	r0, r7
   b87fa:	e7d2      	b.n	b87a2 <_strtod_l+0x1fa>
   b87fc:	2b08      	cmp	r3, #8
   b87fe:	dc04      	bgt.n	b880a <_strtod_l+0x262>
   b8800:	9e07      	ldr	r6, [sp, #28]
   b8802:	434e      	muls	r6, r1
   b8804:	9607      	str	r6, [sp, #28]
   b8806:	3301      	adds	r3, #1
   b8808:	e7e2      	b.n	b87d0 <_strtod_l+0x228>
   b880a:	f103 0c01 	add.w	ip, r3, #1
   b880e:	f1bc 0f10 	cmp.w	ip, #16
   b8812:	bfd8      	it	le
   b8814:	fb01 f909 	mulle.w	r9, r1, r9
   b8818:	e7f5      	b.n	b8806 <_strtod_l+0x25e>
   b881a:	2d10      	cmp	r5, #16
   b881c:	bfdc      	itt	le
   b881e:	230a      	movle	r3, #10
   b8820:	fb03 2909 	mlale	r9, r3, r9, r2
   b8824:	e7e1      	b.n	b87ea <_strtod_l+0x242>
   b8826:	2300      	movs	r3, #0
   b8828:	9305      	str	r3, [sp, #20]
   b882a:	2301      	movs	r3, #1
   b882c:	e77c      	b.n	b8728 <_strtod_l+0x180>
   b882e:	f04f 0c00 	mov.w	ip, #0
   b8832:	f108 0202 	add.w	r2, r8, #2
   b8836:	9217      	str	r2, [sp, #92]	; 0x5c
   b8838:	f898 2002 	ldrb.w	r2, [r8, #2]
   b883c:	e785      	b.n	b874a <_strtod_l+0x1a2>
   b883e:	f04f 0c01 	mov.w	ip, #1
   b8842:	e7f6      	b.n	b8832 <_strtod_l+0x28a>
   b8844:	000bb468 	.word	0x000bb468
   b8848:	000bb2a0 	.word	0x000bb2a0
   b884c:	7ff00000 	.word	0x7ff00000
   b8850:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b8852:	1c51      	adds	r1, r2, #1
   b8854:	9117      	str	r1, [sp, #92]	; 0x5c
   b8856:	7852      	ldrb	r2, [r2, #1]
   b8858:	2a30      	cmp	r2, #48	; 0x30
   b885a:	d0f9      	beq.n	b8850 <_strtod_l+0x2a8>
   b885c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   b8860:	2908      	cmp	r1, #8
   b8862:	f63f af79 	bhi.w	b8758 <_strtod_l+0x1b0>
   b8866:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   b886a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b886c:	9206      	str	r2, [sp, #24]
   b886e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b8870:	1c51      	adds	r1, r2, #1
   b8872:	9117      	str	r1, [sp, #92]	; 0x5c
   b8874:	7852      	ldrb	r2, [r2, #1]
   b8876:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   b887a:	2e09      	cmp	r6, #9
   b887c:	d937      	bls.n	b88ee <_strtod_l+0x346>
   b887e:	9e06      	ldr	r6, [sp, #24]
   b8880:	1b89      	subs	r1, r1, r6
   b8882:	2908      	cmp	r1, #8
   b8884:	f644 661f 	movw	r6, #19999	; 0x4e1f
   b8888:	dc02      	bgt.n	b8890 <_strtod_l+0x2e8>
   b888a:	4576      	cmp	r6, lr
   b888c:	bfa8      	it	ge
   b888e:	4676      	movge	r6, lr
   b8890:	f1bc 0f00 	cmp.w	ip, #0
   b8894:	d000      	beq.n	b8898 <_strtod_l+0x2f0>
   b8896:	4276      	negs	r6, r6
   b8898:	2d00      	cmp	r5, #0
   b889a:	d14d      	bne.n	b8938 <_strtod_l+0x390>
   b889c:	9904      	ldr	r1, [sp, #16]
   b889e:	4301      	orrs	r1, r0
   b88a0:	f47f aec6 	bne.w	b8630 <_strtod_l+0x88>
   b88a4:	2b00      	cmp	r3, #0
   b88a6:	f47f aee1 	bne.w	b866c <_strtod_l+0xc4>
   b88aa:	2a69      	cmp	r2, #105	; 0x69
   b88ac:	d027      	beq.n	b88fe <_strtod_l+0x356>
   b88ae:	dc24      	bgt.n	b88fa <_strtod_l+0x352>
   b88b0:	2a49      	cmp	r2, #73	; 0x49
   b88b2:	d024      	beq.n	b88fe <_strtod_l+0x356>
   b88b4:	2a4e      	cmp	r2, #78	; 0x4e
   b88b6:	f47f aed9 	bne.w	b866c <_strtod_l+0xc4>
   b88ba:	499f      	ldr	r1, [pc, #636]	; (b8b38 <_strtod_l+0x590>)
   b88bc:	a817      	add	r0, sp, #92	; 0x5c
   b88be:	f000 ffa7 	bl	b9810 <__match>
   b88c2:	2800      	cmp	r0, #0
   b88c4:	f43f aed2 	beq.w	b866c <_strtod_l+0xc4>
   b88c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b88ca:	781b      	ldrb	r3, [r3, #0]
   b88cc:	2b28      	cmp	r3, #40	; 0x28
   b88ce:	d12d      	bne.n	b892c <_strtod_l+0x384>
   b88d0:	499a      	ldr	r1, [pc, #616]	; (b8b3c <_strtod_l+0x594>)
   b88d2:	aa1a      	add	r2, sp, #104	; 0x68
   b88d4:	a817      	add	r0, sp, #92	; 0x5c
   b88d6:	f000 ffaf 	bl	b9838 <__hexnan>
   b88da:	2805      	cmp	r0, #5
   b88dc:	d126      	bne.n	b892c <_strtod_l+0x384>
   b88de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   b88e0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   b88e4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   b88e8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   b88ec:	e6a0      	b.n	b8630 <_strtod_l+0x88>
   b88ee:	210a      	movs	r1, #10
   b88f0:	fb01 2e0e 	mla	lr, r1, lr, r2
   b88f4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   b88f8:	e7b9      	b.n	b886e <_strtod_l+0x2c6>
   b88fa:	2a6e      	cmp	r2, #110	; 0x6e
   b88fc:	e7db      	b.n	b88b6 <_strtod_l+0x30e>
   b88fe:	4990      	ldr	r1, [pc, #576]	; (b8b40 <_strtod_l+0x598>)
   b8900:	a817      	add	r0, sp, #92	; 0x5c
   b8902:	f000 ff85 	bl	b9810 <__match>
   b8906:	2800      	cmp	r0, #0
   b8908:	f43f aeb0 	beq.w	b866c <_strtod_l+0xc4>
   b890c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b890e:	498d      	ldr	r1, [pc, #564]	; (b8b44 <_strtod_l+0x59c>)
   b8910:	3b01      	subs	r3, #1
   b8912:	a817      	add	r0, sp, #92	; 0x5c
   b8914:	9317      	str	r3, [sp, #92]	; 0x5c
   b8916:	f000 ff7b 	bl	b9810 <__match>
   b891a:	b910      	cbnz	r0, b8922 <_strtod_l+0x37a>
   b891c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b891e:	3301      	adds	r3, #1
   b8920:	9317      	str	r3, [sp, #92]	; 0x5c
   b8922:	f8df b230 	ldr.w	fp, [pc, #560]	; b8b54 <_strtod_l+0x5ac>
   b8926:	f04f 0a00 	mov.w	sl, #0
   b892a:	e681      	b.n	b8630 <_strtod_l+0x88>
   b892c:	4886      	ldr	r0, [pc, #536]	; (b8b48 <_strtod_l+0x5a0>)
   b892e:	f001 fd07 	bl	ba340 <nan>
   b8932:	ec5b ab10 	vmov	sl, fp, d0
   b8936:	e67b      	b.n	b8630 <_strtod_l+0x88>
   b8938:	9b05      	ldr	r3, [sp, #20]
   b893a:	9807      	ldr	r0, [sp, #28]
   b893c:	1af3      	subs	r3, r6, r3
   b893e:	2f00      	cmp	r7, #0
   b8940:	bf08      	it	eq
   b8942:	462f      	moveq	r7, r5
   b8944:	2d10      	cmp	r5, #16
   b8946:	9306      	str	r3, [sp, #24]
   b8948:	46a8      	mov	r8, r5
   b894a:	bfa8      	it	ge
   b894c:	f04f 0810 	movge.w	r8, #16
   b8950:	f7fb fca8 	bl	b42a4 <__aeabi_ui2d>
   b8954:	2d09      	cmp	r5, #9
   b8956:	4682      	mov	sl, r0
   b8958:	468b      	mov	fp, r1
   b895a:	dd13      	ble.n	b8984 <_strtod_l+0x3dc>
   b895c:	4b7b      	ldr	r3, [pc, #492]	; (b8b4c <_strtod_l+0x5a4>)
   b895e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   b8962:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   b8966:	f7fb fd17 	bl	b4398 <__aeabi_dmul>
   b896a:	4682      	mov	sl, r0
   b896c:	4648      	mov	r0, r9
   b896e:	468b      	mov	fp, r1
   b8970:	f7fb fc98 	bl	b42a4 <__aeabi_ui2d>
   b8974:	4602      	mov	r2, r0
   b8976:	460b      	mov	r3, r1
   b8978:	4650      	mov	r0, sl
   b897a:	4659      	mov	r1, fp
   b897c:	f7fb fb56 	bl	b402c <__adddf3>
   b8980:	4682      	mov	sl, r0
   b8982:	468b      	mov	fp, r1
   b8984:	2d0f      	cmp	r5, #15
   b8986:	dc38      	bgt.n	b89fa <_strtod_l+0x452>
   b8988:	9b06      	ldr	r3, [sp, #24]
   b898a:	2b00      	cmp	r3, #0
   b898c:	f43f ae50 	beq.w	b8630 <_strtod_l+0x88>
   b8990:	dd24      	ble.n	b89dc <_strtod_l+0x434>
   b8992:	2b16      	cmp	r3, #22
   b8994:	dc0b      	bgt.n	b89ae <_strtod_l+0x406>
   b8996:	496d      	ldr	r1, [pc, #436]	; (b8b4c <_strtod_l+0x5a4>)
   b8998:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b899c:	e9d1 0100 	ldrd	r0, r1, [r1]
   b89a0:	4652      	mov	r2, sl
   b89a2:	465b      	mov	r3, fp
   b89a4:	f7fb fcf8 	bl	b4398 <__aeabi_dmul>
   b89a8:	4682      	mov	sl, r0
   b89aa:	468b      	mov	fp, r1
   b89ac:	e640      	b.n	b8630 <_strtod_l+0x88>
   b89ae:	9a06      	ldr	r2, [sp, #24]
   b89b0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   b89b4:	4293      	cmp	r3, r2
   b89b6:	db20      	blt.n	b89fa <_strtod_l+0x452>
   b89b8:	4c64      	ldr	r4, [pc, #400]	; (b8b4c <_strtod_l+0x5a4>)
   b89ba:	f1c5 050f 	rsb	r5, r5, #15
   b89be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   b89c2:	4652      	mov	r2, sl
   b89c4:	465b      	mov	r3, fp
   b89c6:	e9d1 0100 	ldrd	r0, r1, [r1]
   b89ca:	f7fb fce5 	bl	b4398 <__aeabi_dmul>
   b89ce:	9b06      	ldr	r3, [sp, #24]
   b89d0:	1b5d      	subs	r5, r3, r5
   b89d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   b89d6:	e9d4 2300 	ldrd	r2, r3, [r4]
   b89da:	e7e3      	b.n	b89a4 <_strtod_l+0x3fc>
   b89dc:	9b06      	ldr	r3, [sp, #24]
   b89de:	3316      	adds	r3, #22
   b89e0:	db0b      	blt.n	b89fa <_strtod_l+0x452>
   b89e2:	9b05      	ldr	r3, [sp, #20]
   b89e4:	1b9e      	subs	r6, r3, r6
   b89e6:	4b59      	ldr	r3, [pc, #356]	; (b8b4c <_strtod_l+0x5a4>)
   b89e8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   b89ec:	e9d6 2300 	ldrd	r2, r3, [r6]
   b89f0:	4650      	mov	r0, sl
   b89f2:	4659      	mov	r1, fp
   b89f4:	f7fb fdfa 	bl	b45ec <__aeabi_ddiv>
   b89f8:	e7d6      	b.n	b89a8 <_strtod_l+0x400>
   b89fa:	9b06      	ldr	r3, [sp, #24]
   b89fc:	eba5 0808 	sub.w	r8, r5, r8
   b8a00:	4498      	add	r8, r3
   b8a02:	f1b8 0f00 	cmp.w	r8, #0
   b8a06:	dd74      	ble.n	b8af2 <_strtod_l+0x54a>
   b8a08:	f018 030f 	ands.w	r3, r8, #15
   b8a0c:	d00a      	beq.n	b8a24 <_strtod_l+0x47c>
   b8a0e:	494f      	ldr	r1, [pc, #316]	; (b8b4c <_strtod_l+0x5a4>)
   b8a10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b8a14:	4652      	mov	r2, sl
   b8a16:	465b      	mov	r3, fp
   b8a18:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8a1c:	f7fb fcbc 	bl	b4398 <__aeabi_dmul>
   b8a20:	4682      	mov	sl, r0
   b8a22:	468b      	mov	fp, r1
   b8a24:	f038 080f 	bics.w	r8, r8, #15
   b8a28:	d04f      	beq.n	b8aca <_strtod_l+0x522>
   b8a2a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   b8a2e:	dd22      	ble.n	b8a76 <_strtod_l+0x4ce>
   b8a30:	2500      	movs	r5, #0
   b8a32:	462e      	mov	r6, r5
   b8a34:	9507      	str	r5, [sp, #28]
   b8a36:	9505      	str	r5, [sp, #20]
   b8a38:	2322      	movs	r3, #34	; 0x22
   b8a3a:	f8df b118 	ldr.w	fp, [pc, #280]	; b8b54 <_strtod_l+0x5ac>
   b8a3e:	6023      	str	r3, [r4, #0]
   b8a40:	f04f 0a00 	mov.w	sl, #0
   b8a44:	9b07      	ldr	r3, [sp, #28]
   b8a46:	2b00      	cmp	r3, #0
   b8a48:	f43f adf2 	beq.w	b8630 <_strtod_l+0x88>
   b8a4c:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8a4e:	4620      	mov	r0, r4
   b8a50:	f000 ffe4 	bl	b9a1c <_Bfree>
   b8a54:	9905      	ldr	r1, [sp, #20]
   b8a56:	4620      	mov	r0, r4
   b8a58:	f000 ffe0 	bl	b9a1c <_Bfree>
   b8a5c:	4631      	mov	r1, r6
   b8a5e:	4620      	mov	r0, r4
   b8a60:	f000 ffdc 	bl	b9a1c <_Bfree>
   b8a64:	9907      	ldr	r1, [sp, #28]
   b8a66:	4620      	mov	r0, r4
   b8a68:	f000 ffd8 	bl	b9a1c <_Bfree>
   b8a6c:	4629      	mov	r1, r5
   b8a6e:	4620      	mov	r0, r4
   b8a70:	f000 ffd4 	bl	b9a1c <_Bfree>
   b8a74:	e5dc      	b.n	b8630 <_strtod_l+0x88>
   b8a76:	4b36      	ldr	r3, [pc, #216]	; (b8b50 <_strtod_l+0x5a8>)
   b8a78:	9304      	str	r3, [sp, #16]
   b8a7a:	2300      	movs	r3, #0
   b8a7c:	ea4f 1828 	mov.w	r8, r8, asr #4
   b8a80:	4650      	mov	r0, sl
   b8a82:	4659      	mov	r1, fp
   b8a84:	4699      	mov	r9, r3
   b8a86:	f1b8 0f01 	cmp.w	r8, #1
   b8a8a:	dc21      	bgt.n	b8ad0 <_strtod_l+0x528>
   b8a8c:	b10b      	cbz	r3, b8a92 <_strtod_l+0x4ea>
   b8a8e:	4682      	mov	sl, r0
   b8a90:	468b      	mov	fp, r1
   b8a92:	4b2f      	ldr	r3, [pc, #188]	; (b8b50 <_strtod_l+0x5a8>)
   b8a94:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   b8a98:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   b8a9c:	4652      	mov	r2, sl
   b8a9e:	465b      	mov	r3, fp
   b8aa0:	e9d9 0100 	ldrd	r0, r1, [r9]
   b8aa4:	f7fb fc78 	bl	b4398 <__aeabi_dmul>
   b8aa8:	4b2a      	ldr	r3, [pc, #168]	; (b8b54 <_strtod_l+0x5ac>)
   b8aaa:	460a      	mov	r2, r1
   b8aac:	400b      	ands	r3, r1
   b8aae:	492a      	ldr	r1, [pc, #168]	; (b8b58 <_strtod_l+0x5b0>)
   b8ab0:	428b      	cmp	r3, r1
   b8ab2:	4682      	mov	sl, r0
   b8ab4:	d8bc      	bhi.n	b8a30 <_strtod_l+0x488>
   b8ab6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   b8aba:	428b      	cmp	r3, r1
   b8abc:	bf86      	itte	hi
   b8abe:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; b8b5c <_strtod_l+0x5b4>
   b8ac2:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   b8ac6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   b8aca:	2300      	movs	r3, #0
   b8acc:	9304      	str	r3, [sp, #16]
   b8ace:	e084      	b.n	b8bda <_strtod_l+0x632>
   b8ad0:	f018 0f01 	tst.w	r8, #1
   b8ad4:	d005      	beq.n	b8ae2 <_strtod_l+0x53a>
   b8ad6:	9b04      	ldr	r3, [sp, #16]
   b8ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8adc:	f7fb fc5c 	bl	b4398 <__aeabi_dmul>
   b8ae0:	2301      	movs	r3, #1
   b8ae2:	9a04      	ldr	r2, [sp, #16]
   b8ae4:	3208      	adds	r2, #8
   b8ae6:	f109 0901 	add.w	r9, r9, #1
   b8aea:	ea4f 0868 	mov.w	r8, r8, asr #1
   b8aee:	9204      	str	r2, [sp, #16]
   b8af0:	e7c9      	b.n	b8a86 <_strtod_l+0x4de>
   b8af2:	d0ea      	beq.n	b8aca <_strtod_l+0x522>
   b8af4:	f1c8 0800 	rsb	r8, r8, #0
   b8af8:	f018 020f 	ands.w	r2, r8, #15
   b8afc:	d00a      	beq.n	b8b14 <_strtod_l+0x56c>
   b8afe:	4b13      	ldr	r3, [pc, #76]	; (b8b4c <_strtod_l+0x5a4>)
   b8b00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b8b04:	4650      	mov	r0, sl
   b8b06:	4659      	mov	r1, fp
   b8b08:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8b0c:	f7fb fd6e 	bl	b45ec <__aeabi_ddiv>
   b8b10:	4682      	mov	sl, r0
   b8b12:	468b      	mov	fp, r1
   b8b14:	ea5f 1828 	movs.w	r8, r8, asr #4
   b8b18:	d0d7      	beq.n	b8aca <_strtod_l+0x522>
   b8b1a:	f1b8 0f1f 	cmp.w	r8, #31
   b8b1e:	dd1f      	ble.n	b8b60 <_strtod_l+0x5b8>
   b8b20:	2500      	movs	r5, #0
   b8b22:	462e      	mov	r6, r5
   b8b24:	9507      	str	r5, [sp, #28]
   b8b26:	9505      	str	r5, [sp, #20]
   b8b28:	2322      	movs	r3, #34	; 0x22
   b8b2a:	f04f 0a00 	mov.w	sl, #0
   b8b2e:	f04f 0b00 	mov.w	fp, #0
   b8b32:	6023      	str	r3, [r4, #0]
   b8b34:	e786      	b.n	b8a44 <_strtod_l+0x49c>
   b8b36:	bf00      	nop
   b8b38:	000bb29a 	.word	0x000bb29a
   b8b3c:	000bb2b4 	.word	0x000bb2b4
   b8b40:	000bb291 	.word	0x000bb291
   b8b44:	000bb294 	.word	0x000bb294
   b8b48:	000ba958 	.word	0x000ba958
   b8b4c:	000bb500 	.word	0x000bb500
   b8b50:	000bb4d8 	.word	0x000bb4d8
   b8b54:	7ff00000 	.word	0x7ff00000
   b8b58:	7ca00000 	.word	0x7ca00000
   b8b5c:	7fefffff 	.word	0x7fefffff
   b8b60:	f018 0310 	ands.w	r3, r8, #16
   b8b64:	bf18      	it	ne
   b8b66:	236a      	movne	r3, #106	; 0x6a
   b8b68:	f8df 93ac 	ldr.w	r9, [pc, #940]	; b8f18 <_strtod_l+0x970>
   b8b6c:	9304      	str	r3, [sp, #16]
   b8b6e:	4650      	mov	r0, sl
   b8b70:	4659      	mov	r1, fp
   b8b72:	2300      	movs	r3, #0
   b8b74:	f018 0f01 	tst.w	r8, #1
   b8b78:	d004      	beq.n	b8b84 <_strtod_l+0x5dc>
   b8b7a:	e9d9 2300 	ldrd	r2, r3, [r9]
   b8b7e:	f7fb fc0b 	bl	b4398 <__aeabi_dmul>
   b8b82:	2301      	movs	r3, #1
   b8b84:	ea5f 0868 	movs.w	r8, r8, asr #1
   b8b88:	f109 0908 	add.w	r9, r9, #8
   b8b8c:	d1f2      	bne.n	b8b74 <_strtod_l+0x5cc>
   b8b8e:	b10b      	cbz	r3, b8b94 <_strtod_l+0x5ec>
   b8b90:	4682      	mov	sl, r0
   b8b92:	468b      	mov	fp, r1
   b8b94:	9b04      	ldr	r3, [sp, #16]
   b8b96:	b1c3      	cbz	r3, b8bca <_strtod_l+0x622>
   b8b98:	f3cb 520a 	ubfx	r2, fp, #20, #11
   b8b9c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   b8ba0:	2b00      	cmp	r3, #0
   b8ba2:	4659      	mov	r1, fp
   b8ba4:	dd11      	ble.n	b8bca <_strtod_l+0x622>
   b8ba6:	2b1f      	cmp	r3, #31
   b8ba8:	f340 8124 	ble.w	b8df4 <_strtod_l+0x84c>
   b8bac:	2b34      	cmp	r3, #52	; 0x34
   b8bae:	bfde      	ittt	le
   b8bb0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   b8bb4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   b8bb8:	fa03 f202 	lslle.w	r2, r3, r2
   b8bbc:	f04f 0a00 	mov.w	sl, #0
   b8bc0:	bfcc      	ite	gt
   b8bc2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   b8bc6:	ea02 0b01 	andle.w	fp, r2, r1
   b8bca:	2200      	movs	r2, #0
   b8bcc:	2300      	movs	r3, #0
   b8bce:	4650      	mov	r0, sl
   b8bd0:	4659      	mov	r1, fp
   b8bd2:	f7fb fe49 	bl	b4868 <__aeabi_dcmpeq>
   b8bd6:	2800      	cmp	r0, #0
   b8bd8:	d1a2      	bne.n	b8b20 <_strtod_l+0x578>
   b8bda:	9b07      	ldr	r3, [sp, #28]
   b8bdc:	9300      	str	r3, [sp, #0]
   b8bde:	9908      	ldr	r1, [sp, #32]
   b8be0:	462b      	mov	r3, r5
   b8be2:	463a      	mov	r2, r7
   b8be4:	4620      	mov	r0, r4
   b8be6:	f000 ff81 	bl	b9aec <__s2b>
   b8bea:	9007      	str	r0, [sp, #28]
   b8bec:	2800      	cmp	r0, #0
   b8bee:	f43f af1f 	beq.w	b8a30 <_strtod_l+0x488>
   b8bf2:	9b05      	ldr	r3, [sp, #20]
   b8bf4:	1b9e      	subs	r6, r3, r6
   b8bf6:	9b06      	ldr	r3, [sp, #24]
   b8bf8:	2b00      	cmp	r3, #0
   b8bfa:	bfb4      	ite	lt
   b8bfc:	4633      	movlt	r3, r6
   b8bfe:	2300      	movge	r3, #0
   b8c00:	930c      	str	r3, [sp, #48]	; 0x30
   b8c02:	9b06      	ldr	r3, [sp, #24]
   b8c04:	2500      	movs	r5, #0
   b8c06:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b8c0a:	9312      	str	r3, [sp, #72]	; 0x48
   b8c0c:	462e      	mov	r6, r5
   b8c0e:	9b07      	ldr	r3, [sp, #28]
   b8c10:	4620      	mov	r0, r4
   b8c12:	6859      	ldr	r1, [r3, #4]
   b8c14:	f000 fec2 	bl	b999c <_Balloc>
   b8c18:	9005      	str	r0, [sp, #20]
   b8c1a:	2800      	cmp	r0, #0
   b8c1c:	f43f af0c 	beq.w	b8a38 <_strtod_l+0x490>
   b8c20:	9b07      	ldr	r3, [sp, #28]
   b8c22:	691a      	ldr	r2, [r3, #16]
   b8c24:	3202      	adds	r2, #2
   b8c26:	f103 010c 	add.w	r1, r3, #12
   b8c2a:	0092      	lsls	r2, r2, #2
   b8c2c:	300c      	adds	r0, #12
   b8c2e:	f7ff fc44 	bl	b84ba <memcpy>
   b8c32:	ec4b ab10 	vmov	d0, sl, fp
   b8c36:	aa1a      	add	r2, sp, #104	; 0x68
   b8c38:	a919      	add	r1, sp, #100	; 0x64
   b8c3a:	4620      	mov	r0, r4
   b8c3c:	f001 fa9c 	bl	ba178 <__d2b>
   b8c40:	ec4b ab18 	vmov	d8, sl, fp
   b8c44:	9018      	str	r0, [sp, #96]	; 0x60
   b8c46:	2800      	cmp	r0, #0
   b8c48:	f43f aef6 	beq.w	b8a38 <_strtod_l+0x490>
   b8c4c:	2101      	movs	r1, #1
   b8c4e:	4620      	mov	r0, r4
   b8c50:	f000 ffe6 	bl	b9c20 <__i2b>
   b8c54:	4606      	mov	r6, r0
   b8c56:	2800      	cmp	r0, #0
   b8c58:	f43f aeee 	beq.w	b8a38 <_strtod_l+0x490>
   b8c5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b8c5e:	9904      	ldr	r1, [sp, #16]
   b8c60:	2b00      	cmp	r3, #0
   b8c62:	bfab      	itete	ge
   b8c64:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   b8c66:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   b8c68:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   b8c6a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   b8c6e:	bfac      	ite	ge
   b8c70:	eb03 0902 	addge.w	r9, r3, r2
   b8c74:	1ad7      	sublt	r7, r2, r3
   b8c76:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   b8c78:	eba3 0801 	sub.w	r8, r3, r1
   b8c7c:	4490      	add	r8, r2
   b8c7e:	4ba1      	ldr	r3, [pc, #644]	; (b8f04 <_strtod_l+0x95c>)
   b8c80:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b8c84:	4598      	cmp	r8, r3
   b8c86:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   b8c8a:	f280 80c7 	bge.w	b8e1c <_strtod_l+0x874>
   b8c8e:	eba3 0308 	sub.w	r3, r3, r8
   b8c92:	2b1f      	cmp	r3, #31
   b8c94:	eba2 0203 	sub.w	r2, r2, r3
   b8c98:	f04f 0101 	mov.w	r1, #1
   b8c9c:	f300 80b1 	bgt.w	b8e02 <_strtod_l+0x85a>
   b8ca0:	fa01 f303 	lsl.w	r3, r1, r3
   b8ca4:	930d      	str	r3, [sp, #52]	; 0x34
   b8ca6:	2300      	movs	r3, #0
   b8ca8:	9308      	str	r3, [sp, #32]
   b8caa:	eb09 0802 	add.w	r8, r9, r2
   b8cae:	9b04      	ldr	r3, [sp, #16]
   b8cb0:	45c1      	cmp	r9, r8
   b8cb2:	4417      	add	r7, r2
   b8cb4:	441f      	add	r7, r3
   b8cb6:	464b      	mov	r3, r9
   b8cb8:	bfa8      	it	ge
   b8cba:	4643      	movge	r3, r8
   b8cbc:	42bb      	cmp	r3, r7
   b8cbe:	bfa8      	it	ge
   b8cc0:	463b      	movge	r3, r7
   b8cc2:	2b00      	cmp	r3, #0
   b8cc4:	bfc2      	ittt	gt
   b8cc6:	eba8 0803 	subgt.w	r8, r8, r3
   b8cca:	1aff      	subgt	r7, r7, r3
   b8ccc:	eba9 0903 	subgt.w	r9, r9, r3
   b8cd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b8cd2:	2b00      	cmp	r3, #0
   b8cd4:	dd17      	ble.n	b8d06 <_strtod_l+0x75e>
   b8cd6:	4631      	mov	r1, r6
   b8cd8:	461a      	mov	r2, r3
   b8cda:	4620      	mov	r0, r4
   b8cdc:	f001 f860 	bl	b9da0 <__pow5mult>
   b8ce0:	4606      	mov	r6, r0
   b8ce2:	2800      	cmp	r0, #0
   b8ce4:	f43f aea8 	beq.w	b8a38 <_strtod_l+0x490>
   b8ce8:	4601      	mov	r1, r0
   b8cea:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b8cec:	4620      	mov	r0, r4
   b8cee:	f000 ffad 	bl	b9c4c <__multiply>
   b8cf2:	900b      	str	r0, [sp, #44]	; 0x2c
   b8cf4:	2800      	cmp	r0, #0
   b8cf6:	f43f ae9f 	beq.w	b8a38 <_strtod_l+0x490>
   b8cfa:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8cfc:	4620      	mov	r0, r4
   b8cfe:	f000 fe8d 	bl	b9a1c <_Bfree>
   b8d02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8d04:	9318      	str	r3, [sp, #96]	; 0x60
   b8d06:	f1b8 0f00 	cmp.w	r8, #0
   b8d0a:	f300 808c 	bgt.w	b8e26 <_strtod_l+0x87e>
   b8d0e:	9b06      	ldr	r3, [sp, #24]
   b8d10:	2b00      	cmp	r3, #0
   b8d12:	dd08      	ble.n	b8d26 <_strtod_l+0x77e>
   b8d14:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b8d16:	9905      	ldr	r1, [sp, #20]
   b8d18:	4620      	mov	r0, r4
   b8d1a:	f001 f841 	bl	b9da0 <__pow5mult>
   b8d1e:	9005      	str	r0, [sp, #20]
   b8d20:	2800      	cmp	r0, #0
   b8d22:	f43f ae89 	beq.w	b8a38 <_strtod_l+0x490>
   b8d26:	2f00      	cmp	r7, #0
   b8d28:	dd08      	ble.n	b8d3c <_strtod_l+0x794>
   b8d2a:	9905      	ldr	r1, [sp, #20]
   b8d2c:	463a      	mov	r2, r7
   b8d2e:	4620      	mov	r0, r4
   b8d30:	f001 f890 	bl	b9e54 <__lshift>
   b8d34:	9005      	str	r0, [sp, #20]
   b8d36:	2800      	cmp	r0, #0
   b8d38:	f43f ae7e 	beq.w	b8a38 <_strtod_l+0x490>
   b8d3c:	f1b9 0f00 	cmp.w	r9, #0
   b8d40:	dd08      	ble.n	b8d54 <_strtod_l+0x7ac>
   b8d42:	4631      	mov	r1, r6
   b8d44:	464a      	mov	r2, r9
   b8d46:	4620      	mov	r0, r4
   b8d48:	f001 f884 	bl	b9e54 <__lshift>
   b8d4c:	4606      	mov	r6, r0
   b8d4e:	2800      	cmp	r0, #0
   b8d50:	f43f ae72 	beq.w	b8a38 <_strtod_l+0x490>
   b8d54:	9a05      	ldr	r2, [sp, #20]
   b8d56:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8d58:	4620      	mov	r0, r4
   b8d5a:	f001 f907 	bl	b9f6c <__mdiff>
   b8d5e:	4605      	mov	r5, r0
   b8d60:	2800      	cmp	r0, #0
   b8d62:	f43f ae69 	beq.w	b8a38 <_strtod_l+0x490>
   b8d66:	68c3      	ldr	r3, [r0, #12]
   b8d68:	930b      	str	r3, [sp, #44]	; 0x2c
   b8d6a:	2300      	movs	r3, #0
   b8d6c:	60c3      	str	r3, [r0, #12]
   b8d6e:	4631      	mov	r1, r6
   b8d70:	f001 f8e0 	bl	b9f34 <__mcmp>
   b8d74:	2800      	cmp	r0, #0
   b8d76:	da60      	bge.n	b8e3a <_strtod_l+0x892>
   b8d78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8d7a:	ea53 030a 	orrs.w	r3, r3, sl
   b8d7e:	f040 8082 	bne.w	b8e86 <_strtod_l+0x8de>
   b8d82:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b8d86:	2b00      	cmp	r3, #0
   b8d88:	d17d      	bne.n	b8e86 <_strtod_l+0x8de>
   b8d8a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b8d8e:	0d1b      	lsrs	r3, r3, #20
   b8d90:	051b      	lsls	r3, r3, #20
   b8d92:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   b8d96:	d976      	bls.n	b8e86 <_strtod_l+0x8de>
   b8d98:	696b      	ldr	r3, [r5, #20]
   b8d9a:	b913      	cbnz	r3, b8da2 <_strtod_l+0x7fa>
   b8d9c:	692b      	ldr	r3, [r5, #16]
   b8d9e:	2b01      	cmp	r3, #1
   b8da0:	dd71      	ble.n	b8e86 <_strtod_l+0x8de>
   b8da2:	4629      	mov	r1, r5
   b8da4:	2201      	movs	r2, #1
   b8da6:	4620      	mov	r0, r4
   b8da8:	f001 f854 	bl	b9e54 <__lshift>
   b8dac:	4631      	mov	r1, r6
   b8dae:	4605      	mov	r5, r0
   b8db0:	f001 f8c0 	bl	b9f34 <__mcmp>
   b8db4:	2800      	cmp	r0, #0
   b8db6:	dd66      	ble.n	b8e86 <_strtod_l+0x8de>
   b8db8:	9904      	ldr	r1, [sp, #16]
   b8dba:	4a53      	ldr	r2, [pc, #332]	; (b8f08 <_strtod_l+0x960>)
   b8dbc:	465b      	mov	r3, fp
   b8dbe:	2900      	cmp	r1, #0
   b8dc0:	f000 8081 	beq.w	b8ec6 <_strtod_l+0x91e>
   b8dc4:	ea02 010b 	and.w	r1, r2, fp
   b8dc8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   b8dcc:	dc7b      	bgt.n	b8ec6 <_strtod_l+0x91e>
   b8dce:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   b8dd2:	f77f aea9 	ble.w	b8b28 <_strtod_l+0x580>
   b8dd6:	4b4d      	ldr	r3, [pc, #308]	; (b8f0c <_strtod_l+0x964>)
   b8dd8:	4650      	mov	r0, sl
   b8dda:	4659      	mov	r1, fp
   b8ddc:	2200      	movs	r2, #0
   b8dde:	f7fb fadb 	bl	b4398 <__aeabi_dmul>
   b8de2:	460b      	mov	r3, r1
   b8de4:	4303      	orrs	r3, r0
   b8de6:	bf08      	it	eq
   b8de8:	2322      	moveq	r3, #34	; 0x22
   b8dea:	4682      	mov	sl, r0
   b8dec:	468b      	mov	fp, r1
   b8dee:	bf08      	it	eq
   b8df0:	6023      	streq	r3, [r4, #0]
   b8df2:	e62b      	b.n	b8a4c <_strtod_l+0x4a4>
   b8df4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b8df8:	fa02 f303 	lsl.w	r3, r2, r3
   b8dfc:	ea03 0a0a 	and.w	sl, r3, sl
   b8e00:	e6e3      	b.n	b8bca <_strtod_l+0x622>
   b8e02:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   b8e06:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   b8e0a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   b8e0e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   b8e12:	fa01 f308 	lsl.w	r3, r1, r8
   b8e16:	9308      	str	r3, [sp, #32]
   b8e18:	910d      	str	r1, [sp, #52]	; 0x34
   b8e1a:	e746      	b.n	b8caa <_strtod_l+0x702>
   b8e1c:	2300      	movs	r3, #0
   b8e1e:	9308      	str	r3, [sp, #32]
   b8e20:	2301      	movs	r3, #1
   b8e22:	930d      	str	r3, [sp, #52]	; 0x34
   b8e24:	e741      	b.n	b8caa <_strtod_l+0x702>
   b8e26:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8e28:	4642      	mov	r2, r8
   b8e2a:	4620      	mov	r0, r4
   b8e2c:	f001 f812 	bl	b9e54 <__lshift>
   b8e30:	9018      	str	r0, [sp, #96]	; 0x60
   b8e32:	2800      	cmp	r0, #0
   b8e34:	f47f af6b 	bne.w	b8d0e <_strtod_l+0x766>
   b8e38:	e5fe      	b.n	b8a38 <_strtod_l+0x490>
   b8e3a:	465f      	mov	r7, fp
   b8e3c:	d16e      	bne.n	b8f1c <_strtod_l+0x974>
   b8e3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b8e40:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b8e44:	b342      	cbz	r2, b8e98 <_strtod_l+0x8f0>
   b8e46:	4a32      	ldr	r2, [pc, #200]	; (b8f10 <_strtod_l+0x968>)
   b8e48:	4293      	cmp	r3, r2
   b8e4a:	d128      	bne.n	b8e9e <_strtod_l+0x8f6>
   b8e4c:	9b04      	ldr	r3, [sp, #16]
   b8e4e:	4651      	mov	r1, sl
   b8e50:	b1eb      	cbz	r3, b8e8e <_strtod_l+0x8e6>
   b8e52:	4b2d      	ldr	r3, [pc, #180]	; (b8f08 <_strtod_l+0x960>)
   b8e54:	403b      	ands	r3, r7
   b8e56:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b8e5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b8e5e:	d819      	bhi.n	b8e94 <_strtod_l+0x8ec>
   b8e60:	0d1b      	lsrs	r3, r3, #20
   b8e62:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b8e66:	fa02 f303 	lsl.w	r3, r2, r3
   b8e6a:	4299      	cmp	r1, r3
   b8e6c:	d117      	bne.n	b8e9e <_strtod_l+0x8f6>
   b8e6e:	4b29      	ldr	r3, [pc, #164]	; (b8f14 <_strtod_l+0x96c>)
   b8e70:	429f      	cmp	r7, r3
   b8e72:	d102      	bne.n	b8e7a <_strtod_l+0x8d2>
   b8e74:	3101      	adds	r1, #1
   b8e76:	f43f addf 	beq.w	b8a38 <_strtod_l+0x490>
   b8e7a:	4b23      	ldr	r3, [pc, #140]	; (b8f08 <_strtod_l+0x960>)
   b8e7c:	403b      	ands	r3, r7
   b8e7e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   b8e82:	f04f 0a00 	mov.w	sl, #0
   b8e86:	9b04      	ldr	r3, [sp, #16]
   b8e88:	2b00      	cmp	r3, #0
   b8e8a:	d1a4      	bne.n	b8dd6 <_strtod_l+0x82e>
   b8e8c:	e5de      	b.n	b8a4c <_strtod_l+0x4a4>
   b8e8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8e92:	e7ea      	b.n	b8e6a <_strtod_l+0x8c2>
   b8e94:	4613      	mov	r3, r2
   b8e96:	e7e8      	b.n	b8e6a <_strtod_l+0x8c2>
   b8e98:	ea53 030a 	orrs.w	r3, r3, sl
   b8e9c:	d08c      	beq.n	b8db8 <_strtod_l+0x810>
   b8e9e:	9b08      	ldr	r3, [sp, #32]
   b8ea0:	b1db      	cbz	r3, b8eda <_strtod_l+0x932>
   b8ea2:	423b      	tst	r3, r7
   b8ea4:	d0ef      	beq.n	b8e86 <_strtod_l+0x8de>
   b8ea6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8ea8:	9a04      	ldr	r2, [sp, #16]
   b8eaa:	4650      	mov	r0, sl
   b8eac:	4659      	mov	r1, fp
   b8eae:	b1c3      	cbz	r3, b8ee2 <_strtod_l+0x93a>
   b8eb0:	f7ff fb5c 	bl	b856c <sulp>
   b8eb4:	4602      	mov	r2, r0
   b8eb6:	460b      	mov	r3, r1
   b8eb8:	ec51 0b18 	vmov	r0, r1, d8
   b8ebc:	f7fb f8b6 	bl	b402c <__adddf3>
   b8ec0:	4682      	mov	sl, r0
   b8ec2:	468b      	mov	fp, r1
   b8ec4:	e7df      	b.n	b8e86 <_strtod_l+0x8de>
   b8ec6:	4013      	ands	r3, r2
   b8ec8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   b8ecc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   b8ed0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   b8ed4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   b8ed8:	e7d5      	b.n	b8e86 <_strtod_l+0x8de>
   b8eda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b8edc:	ea13 0f0a 	tst.w	r3, sl
   b8ee0:	e7e0      	b.n	b8ea4 <_strtod_l+0x8fc>
   b8ee2:	f7ff fb43 	bl	b856c <sulp>
   b8ee6:	4602      	mov	r2, r0
   b8ee8:	460b      	mov	r3, r1
   b8eea:	ec51 0b18 	vmov	r0, r1, d8
   b8eee:	f7fb f89b 	bl	b4028 <__aeabi_dsub>
   b8ef2:	2200      	movs	r2, #0
   b8ef4:	2300      	movs	r3, #0
   b8ef6:	4682      	mov	sl, r0
   b8ef8:	468b      	mov	fp, r1
   b8efa:	f7fb fcb5 	bl	b4868 <__aeabi_dcmpeq>
   b8efe:	2800      	cmp	r0, #0
   b8f00:	d0c1      	beq.n	b8e86 <_strtod_l+0x8de>
   b8f02:	e611      	b.n	b8b28 <_strtod_l+0x580>
   b8f04:	fffffc02 	.word	0xfffffc02
   b8f08:	7ff00000 	.word	0x7ff00000
   b8f0c:	39500000 	.word	0x39500000
   b8f10:	000fffff 	.word	0x000fffff
   b8f14:	7fefffff 	.word	0x7fefffff
   b8f18:	000bb2c8 	.word	0x000bb2c8
   b8f1c:	4631      	mov	r1, r6
   b8f1e:	4628      	mov	r0, r5
   b8f20:	f001 f986 	bl	ba230 <__ratio>
   b8f24:	ec59 8b10 	vmov	r8, r9, d0
   b8f28:	ee10 0a10 	vmov	r0, s0
   b8f2c:	2200      	movs	r2, #0
   b8f2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b8f32:	4649      	mov	r1, r9
   b8f34:	f7fb fcac 	bl	b4890 <__aeabi_dcmple>
   b8f38:	2800      	cmp	r0, #0
   b8f3a:	d07a      	beq.n	b9032 <_strtod_l+0xa8a>
   b8f3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8f3e:	2b00      	cmp	r3, #0
   b8f40:	d04a      	beq.n	b8fd8 <_strtod_l+0xa30>
   b8f42:	4b95      	ldr	r3, [pc, #596]	; (b9198 <_strtod_l+0xbf0>)
   b8f44:	2200      	movs	r2, #0
   b8f46:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b8f4a:	f8df 924c 	ldr.w	r9, [pc, #588]	; b9198 <_strtod_l+0xbf0>
   b8f4e:	f04f 0800 	mov.w	r8, #0
   b8f52:	4b92      	ldr	r3, [pc, #584]	; (b919c <_strtod_l+0xbf4>)
   b8f54:	403b      	ands	r3, r7
   b8f56:	930d      	str	r3, [sp, #52]	; 0x34
   b8f58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b8f5a:	4b91      	ldr	r3, [pc, #580]	; (b91a0 <_strtod_l+0xbf8>)
   b8f5c:	429a      	cmp	r2, r3
   b8f5e:	f040 80b0 	bne.w	b90c2 <_strtod_l+0xb1a>
   b8f62:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b8f66:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   b8f6a:	ec4b ab10 	vmov	d0, sl, fp
   b8f6e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b8f72:	f001 f885 	bl	ba080 <__ulp>
   b8f76:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b8f7a:	ec53 2b10 	vmov	r2, r3, d0
   b8f7e:	f7fb fa0b 	bl	b4398 <__aeabi_dmul>
   b8f82:	4652      	mov	r2, sl
   b8f84:	465b      	mov	r3, fp
   b8f86:	f7fb f851 	bl	b402c <__adddf3>
   b8f8a:	460b      	mov	r3, r1
   b8f8c:	4983      	ldr	r1, [pc, #524]	; (b919c <_strtod_l+0xbf4>)
   b8f8e:	4a85      	ldr	r2, [pc, #532]	; (b91a4 <_strtod_l+0xbfc>)
   b8f90:	4019      	ands	r1, r3
   b8f92:	4291      	cmp	r1, r2
   b8f94:	4682      	mov	sl, r0
   b8f96:	d960      	bls.n	b905a <_strtod_l+0xab2>
   b8f98:	ee18 3a90 	vmov	r3, s17
   b8f9c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   b8fa0:	4293      	cmp	r3, r2
   b8fa2:	d104      	bne.n	b8fae <_strtod_l+0xa06>
   b8fa4:	ee18 3a10 	vmov	r3, s16
   b8fa8:	3301      	adds	r3, #1
   b8faa:	f43f ad45 	beq.w	b8a38 <_strtod_l+0x490>
   b8fae:	f8df b200 	ldr.w	fp, [pc, #512]	; b91b0 <_strtod_l+0xc08>
   b8fb2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   b8fb6:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8fb8:	4620      	mov	r0, r4
   b8fba:	f000 fd2f 	bl	b9a1c <_Bfree>
   b8fbe:	9905      	ldr	r1, [sp, #20]
   b8fc0:	4620      	mov	r0, r4
   b8fc2:	f000 fd2b 	bl	b9a1c <_Bfree>
   b8fc6:	4631      	mov	r1, r6
   b8fc8:	4620      	mov	r0, r4
   b8fca:	f000 fd27 	bl	b9a1c <_Bfree>
   b8fce:	4629      	mov	r1, r5
   b8fd0:	4620      	mov	r0, r4
   b8fd2:	f000 fd23 	bl	b9a1c <_Bfree>
   b8fd6:	e61a      	b.n	b8c0e <_strtod_l+0x666>
   b8fd8:	f1ba 0f00 	cmp.w	sl, #0
   b8fdc:	d11b      	bne.n	b9016 <_strtod_l+0xa6e>
   b8fde:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b8fe2:	b9f3      	cbnz	r3, b9022 <_strtod_l+0xa7a>
   b8fe4:	4b6c      	ldr	r3, [pc, #432]	; (b9198 <_strtod_l+0xbf0>)
   b8fe6:	2200      	movs	r2, #0
   b8fe8:	4640      	mov	r0, r8
   b8fea:	4649      	mov	r1, r9
   b8fec:	f7fb fc46 	bl	b487c <__aeabi_dcmplt>
   b8ff0:	b9d0      	cbnz	r0, b9028 <_strtod_l+0xa80>
   b8ff2:	4640      	mov	r0, r8
   b8ff4:	4649      	mov	r1, r9
   b8ff6:	4b6c      	ldr	r3, [pc, #432]	; (b91a8 <_strtod_l+0xc00>)
   b8ff8:	2200      	movs	r2, #0
   b8ffa:	f7fb f9cd 	bl	b4398 <__aeabi_dmul>
   b8ffe:	4680      	mov	r8, r0
   b9000:	4689      	mov	r9, r1
   b9002:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   b9006:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   b900a:	9315      	str	r3, [sp, #84]	; 0x54
   b900c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   b9010:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b9014:	e79d      	b.n	b8f52 <_strtod_l+0x9aa>
   b9016:	f1ba 0f01 	cmp.w	sl, #1
   b901a:	d102      	bne.n	b9022 <_strtod_l+0xa7a>
   b901c:	2f00      	cmp	r7, #0
   b901e:	f43f ad83 	beq.w	b8b28 <_strtod_l+0x580>
   b9022:	4b62      	ldr	r3, [pc, #392]	; (b91ac <_strtod_l+0xc04>)
   b9024:	2200      	movs	r2, #0
   b9026:	e78e      	b.n	b8f46 <_strtod_l+0x99e>
   b9028:	f8df 917c 	ldr.w	r9, [pc, #380]	; b91a8 <_strtod_l+0xc00>
   b902c:	f04f 0800 	mov.w	r8, #0
   b9030:	e7e7      	b.n	b9002 <_strtod_l+0xa5a>
   b9032:	4b5d      	ldr	r3, [pc, #372]	; (b91a8 <_strtod_l+0xc00>)
   b9034:	4640      	mov	r0, r8
   b9036:	4649      	mov	r1, r9
   b9038:	2200      	movs	r2, #0
   b903a:	f7fb f9ad 	bl	b4398 <__aeabi_dmul>
   b903e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9040:	4680      	mov	r8, r0
   b9042:	4689      	mov	r9, r1
   b9044:	b933      	cbnz	r3, b9054 <_strtod_l+0xaac>
   b9046:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b904a:	900e      	str	r0, [sp, #56]	; 0x38
   b904c:	930f      	str	r3, [sp, #60]	; 0x3c
   b904e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   b9052:	e7dd      	b.n	b9010 <_strtod_l+0xa68>
   b9054:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   b9058:	e7f9      	b.n	b904e <_strtod_l+0xaa6>
   b905a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   b905e:	9b04      	ldr	r3, [sp, #16]
   b9060:	2b00      	cmp	r3, #0
   b9062:	d1a8      	bne.n	b8fb6 <_strtod_l+0xa0e>
   b9064:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b9068:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b906a:	0d1b      	lsrs	r3, r3, #20
   b906c:	051b      	lsls	r3, r3, #20
   b906e:	429a      	cmp	r2, r3
   b9070:	d1a1      	bne.n	b8fb6 <_strtod_l+0xa0e>
   b9072:	4640      	mov	r0, r8
   b9074:	4649      	mov	r1, r9
   b9076:	f7fb fcc9 	bl	b4a0c <__aeabi_d2lz>
   b907a:	f7fb f95f 	bl	b433c <__aeabi_l2d>
   b907e:	4602      	mov	r2, r0
   b9080:	460b      	mov	r3, r1
   b9082:	4640      	mov	r0, r8
   b9084:	4649      	mov	r1, r9
   b9086:	f7fa ffcf 	bl	b4028 <__aeabi_dsub>
   b908a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b908c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b9090:	ea43 030a 	orr.w	r3, r3, sl
   b9094:	4313      	orrs	r3, r2
   b9096:	4680      	mov	r8, r0
   b9098:	4689      	mov	r9, r1
   b909a:	d055      	beq.n	b9148 <_strtod_l+0xba0>
   b909c:	a336      	add	r3, pc, #216	; (adr r3, b9178 <_strtod_l+0xbd0>)
   b909e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b90a2:	f7fb fbeb 	bl	b487c <__aeabi_dcmplt>
   b90a6:	2800      	cmp	r0, #0
   b90a8:	f47f acd0 	bne.w	b8a4c <_strtod_l+0x4a4>
   b90ac:	a334      	add	r3, pc, #208	; (adr r3, b9180 <_strtod_l+0xbd8>)
   b90ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   b90b2:	4640      	mov	r0, r8
   b90b4:	4649      	mov	r1, r9
   b90b6:	f7fb fbff 	bl	b48b8 <__aeabi_dcmpgt>
   b90ba:	2800      	cmp	r0, #0
   b90bc:	f43f af7b 	beq.w	b8fb6 <_strtod_l+0xa0e>
   b90c0:	e4c4      	b.n	b8a4c <_strtod_l+0x4a4>
   b90c2:	9b04      	ldr	r3, [sp, #16]
   b90c4:	b333      	cbz	r3, b9114 <_strtod_l+0xb6c>
   b90c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b90c8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b90cc:	d822      	bhi.n	b9114 <_strtod_l+0xb6c>
   b90ce:	a32e      	add	r3, pc, #184	; (adr r3, b9188 <_strtod_l+0xbe0>)
   b90d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b90d4:	4640      	mov	r0, r8
   b90d6:	4649      	mov	r1, r9
   b90d8:	f7fb fbda 	bl	b4890 <__aeabi_dcmple>
   b90dc:	b1a0      	cbz	r0, b9108 <_strtod_l+0xb60>
   b90de:	4649      	mov	r1, r9
   b90e0:	4640      	mov	r0, r8
   b90e2:	f7fb fbf3 	bl	b48cc <__aeabi_d2uiz>
   b90e6:	2801      	cmp	r0, #1
   b90e8:	bf38      	it	cc
   b90ea:	2001      	movcc	r0, #1
   b90ec:	f7fb f8da 	bl	b42a4 <__aeabi_ui2d>
   b90f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b90f2:	4680      	mov	r8, r0
   b90f4:	4689      	mov	r9, r1
   b90f6:	bb23      	cbnz	r3, b9142 <_strtod_l+0xb9a>
   b90f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b90fc:	9010      	str	r0, [sp, #64]	; 0x40
   b90fe:	9311      	str	r3, [sp, #68]	; 0x44
   b9100:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   b9104:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b9108:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b910a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b910c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   b9110:	1a9b      	subs	r3, r3, r2
   b9112:	9309      	str	r3, [sp, #36]	; 0x24
   b9114:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b9118:	eeb0 0a48 	vmov.f32	s0, s16
   b911c:	eef0 0a68 	vmov.f32	s1, s17
   b9120:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b9124:	f000 ffac 	bl	ba080 <__ulp>
   b9128:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b912c:	ec53 2b10 	vmov	r2, r3, d0
   b9130:	f7fb f932 	bl	b4398 <__aeabi_dmul>
   b9134:	ec53 2b18 	vmov	r2, r3, d8
   b9138:	f7fa ff78 	bl	b402c <__adddf3>
   b913c:	4682      	mov	sl, r0
   b913e:	468b      	mov	fp, r1
   b9140:	e78d      	b.n	b905e <_strtod_l+0xab6>
   b9142:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   b9146:	e7db      	b.n	b9100 <_strtod_l+0xb58>
   b9148:	a311      	add	r3, pc, #68	; (adr r3, b9190 <_strtod_l+0xbe8>)
   b914a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b914e:	f7fb fb95 	bl	b487c <__aeabi_dcmplt>
   b9152:	e7b2      	b.n	b90ba <_strtod_l+0xb12>
   b9154:	2300      	movs	r3, #0
   b9156:	930a      	str	r3, [sp, #40]	; 0x28
   b9158:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b915a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b915c:	6013      	str	r3, [r2, #0]
   b915e:	f7ff ba6b 	b.w	b8638 <_strtod_l+0x90>
   b9162:	2a65      	cmp	r2, #101	; 0x65
   b9164:	f43f ab5f 	beq.w	b8826 <_strtod_l+0x27e>
   b9168:	2a45      	cmp	r2, #69	; 0x45
   b916a:	f43f ab5c 	beq.w	b8826 <_strtod_l+0x27e>
   b916e:	2301      	movs	r3, #1
   b9170:	f7ff bb94 	b.w	b889c <_strtod_l+0x2f4>
   b9174:	f3af 8000 	nop.w
   b9178:	94a03595 	.word	0x94a03595
   b917c:	3fdfffff 	.word	0x3fdfffff
   b9180:	35afe535 	.word	0x35afe535
   b9184:	3fe00000 	.word	0x3fe00000
   b9188:	ffc00000 	.word	0xffc00000
   b918c:	41dfffff 	.word	0x41dfffff
   b9190:	94a03595 	.word	0x94a03595
   b9194:	3fcfffff 	.word	0x3fcfffff
   b9198:	3ff00000 	.word	0x3ff00000
   b919c:	7ff00000 	.word	0x7ff00000
   b91a0:	7fe00000 	.word	0x7fe00000
   b91a4:	7c9fffff 	.word	0x7c9fffff
   b91a8:	3fe00000 	.word	0x3fe00000
   b91ac:	bff00000 	.word	0xbff00000
   b91b0:	7fefffff 	.word	0x7fefffff

000b91b4 <strtod>:
   b91b4:	460a      	mov	r2, r1
   b91b6:	4601      	mov	r1, r0
   b91b8:	4802      	ldr	r0, [pc, #8]	; (b91c4 <strtod+0x10>)
   b91ba:	4b03      	ldr	r3, [pc, #12]	; (b91c8 <strtod+0x14>)
   b91bc:	6800      	ldr	r0, [r0, #0]
   b91be:	f7ff b9f3 	b.w	b85a8 <_strtod_l>
   b91c2:	bf00      	nop
   b91c4:	2003e388 	.word	0x2003e388
   b91c8:	2003e3f4 	.word	0x2003e3f4

000b91cc <__register_exitproc>:
   b91cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b91d0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b928c <__register_exitproc+0xc0>
   b91d4:	4606      	mov	r6, r0
   b91d6:	f8d8 0000 	ldr.w	r0, [r8]
   b91da:	461f      	mov	r7, r3
   b91dc:	460d      	mov	r5, r1
   b91de:	4691      	mov	r9, r2
   b91e0:	f000 fbc6 	bl	b9970 <__retarget_lock_acquire_recursive>
   b91e4:	4b25      	ldr	r3, [pc, #148]	; (b927c <__register_exitproc+0xb0>)
   b91e6:	681c      	ldr	r4, [r3, #0]
   b91e8:	b934      	cbnz	r4, b91f8 <__register_exitproc+0x2c>
   b91ea:	4c25      	ldr	r4, [pc, #148]	; (b9280 <__register_exitproc+0xb4>)
   b91ec:	601c      	str	r4, [r3, #0]
   b91ee:	4b25      	ldr	r3, [pc, #148]	; (b9284 <__register_exitproc+0xb8>)
   b91f0:	b113      	cbz	r3, b91f8 <__register_exitproc+0x2c>
   b91f2:	681b      	ldr	r3, [r3, #0]
   b91f4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b91f8:	6863      	ldr	r3, [r4, #4]
   b91fa:	2b1f      	cmp	r3, #31
   b91fc:	dd07      	ble.n	b920e <__register_exitproc+0x42>
   b91fe:	f8d8 0000 	ldr.w	r0, [r8]
   b9202:	f000 fbb7 	bl	b9974 <__retarget_lock_release_recursive>
   b9206:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b920a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b920e:	b34e      	cbz	r6, b9264 <__register_exitproc+0x98>
   b9210:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b9214:	b988      	cbnz	r0, b923a <__register_exitproc+0x6e>
   b9216:	4b1c      	ldr	r3, [pc, #112]	; (b9288 <__register_exitproc+0xbc>)
   b9218:	b923      	cbnz	r3, b9224 <__register_exitproc+0x58>
   b921a:	f8d8 0000 	ldr.w	r0, [r8]
   b921e:	f000 fba8 	bl	b9972 <__retarget_lock_release>
   b9222:	e7f0      	b.n	b9206 <__register_exitproc+0x3a>
   b9224:	f44f 7084 	mov.w	r0, #264	; 0x108
   b9228:	f7fd fe8c 	bl	b6f44 <malloc>
   b922c:	2800      	cmp	r0, #0
   b922e:	d0f4      	beq.n	b921a <__register_exitproc+0x4e>
   b9230:	2300      	movs	r3, #0
   b9232:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b9236:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b923a:	6863      	ldr	r3, [r4, #4]
   b923c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b9240:	2201      	movs	r2, #1
   b9242:	409a      	lsls	r2, r3
   b9244:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b9248:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b924c:	4313      	orrs	r3, r2
   b924e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b9252:	2e02      	cmp	r6, #2
   b9254:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b9258:	bf02      	ittt	eq
   b925a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b925e:	4313      	orreq	r3, r2
   b9260:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b9264:	6863      	ldr	r3, [r4, #4]
   b9266:	f8d8 0000 	ldr.w	r0, [r8]
   b926a:	1c5a      	adds	r2, r3, #1
   b926c:	3302      	adds	r3, #2
   b926e:	6062      	str	r2, [r4, #4]
   b9270:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b9274:	f000 fb7e 	bl	b9974 <__retarget_lock_release_recursive>
   b9278:	2000      	movs	r0, #0
   b927a:	e7c6      	b.n	b920a <__register_exitproc+0x3e>
   b927c:	2003e7e8 	.word	0x2003e7e8
   b9280:	2003e75c 	.word	0x2003e75c
   b9284:	00000000 	.word	0x00000000
   b9288:	000b6f45 	.word	0x000b6f45
   b928c:	2003e3ec 	.word	0x2003e3ec

000b9290 <rshift>:
   b9290:	6903      	ldr	r3, [r0, #16]
   b9292:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   b9296:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b929a:	ea4f 1261 	mov.w	r2, r1, asr #5
   b929e:	f100 0414 	add.w	r4, r0, #20
   b92a2:	dd45      	ble.n	b9330 <rshift+0xa0>
   b92a4:	f011 011f 	ands.w	r1, r1, #31
   b92a8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   b92ac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   b92b0:	d10c      	bne.n	b92cc <rshift+0x3c>
   b92b2:	f100 0710 	add.w	r7, r0, #16
   b92b6:	4629      	mov	r1, r5
   b92b8:	42b1      	cmp	r1, r6
   b92ba:	d334      	bcc.n	b9326 <rshift+0x96>
   b92bc:	1a9b      	subs	r3, r3, r2
   b92be:	009b      	lsls	r3, r3, #2
   b92c0:	1eea      	subs	r2, r5, #3
   b92c2:	4296      	cmp	r6, r2
   b92c4:	bf38      	it	cc
   b92c6:	2300      	movcc	r3, #0
   b92c8:	4423      	add	r3, r4
   b92ca:	e015      	b.n	b92f8 <rshift+0x68>
   b92cc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   b92d0:	f1c1 0820 	rsb	r8, r1, #32
   b92d4:	40cf      	lsrs	r7, r1
   b92d6:	f105 0e04 	add.w	lr, r5, #4
   b92da:	46a1      	mov	r9, r4
   b92dc:	4576      	cmp	r6, lr
   b92de:	46f4      	mov	ip, lr
   b92e0:	d815      	bhi.n	b930e <rshift+0x7e>
   b92e2:	1a9a      	subs	r2, r3, r2
   b92e4:	0092      	lsls	r2, r2, #2
   b92e6:	3a04      	subs	r2, #4
   b92e8:	3501      	adds	r5, #1
   b92ea:	42ae      	cmp	r6, r5
   b92ec:	bf38      	it	cc
   b92ee:	2200      	movcc	r2, #0
   b92f0:	18a3      	adds	r3, r4, r2
   b92f2:	50a7      	str	r7, [r4, r2]
   b92f4:	b107      	cbz	r7, b92f8 <rshift+0x68>
   b92f6:	3304      	adds	r3, #4
   b92f8:	1b1a      	subs	r2, r3, r4
   b92fa:	42a3      	cmp	r3, r4
   b92fc:	ea4f 02a2 	mov.w	r2, r2, asr #2
   b9300:	bf08      	it	eq
   b9302:	2300      	moveq	r3, #0
   b9304:	6102      	str	r2, [r0, #16]
   b9306:	bf08      	it	eq
   b9308:	6143      	streq	r3, [r0, #20]
   b930a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b930e:	f8dc c000 	ldr.w	ip, [ip]
   b9312:	fa0c fc08 	lsl.w	ip, ip, r8
   b9316:	ea4c 0707 	orr.w	r7, ip, r7
   b931a:	f849 7b04 	str.w	r7, [r9], #4
   b931e:	f85e 7b04 	ldr.w	r7, [lr], #4
   b9322:	40cf      	lsrs	r7, r1
   b9324:	e7da      	b.n	b92dc <rshift+0x4c>
   b9326:	f851 cb04 	ldr.w	ip, [r1], #4
   b932a:	f847 cf04 	str.w	ip, [r7, #4]!
   b932e:	e7c3      	b.n	b92b8 <rshift+0x28>
   b9330:	4623      	mov	r3, r4
   b9332:	e7e1      	b.n	b92f8 <rshift+0x68>

000b9334 <__hexdig_fun>:
   b9334:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b9338:	2b09      	cmp	r3, #9
   b933a:	d802      	bhi.n	b9342 <__hexdig_fun+0xe>
   b933c:	3820      	subs	r0, #32
   b933e:	b2c0      	uxtb	r0, r0
   b9340:	4770      	bx	lr
   b9342:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b9346:	2b05      	cmp	r3, #5
   b9348:	d801      	bhi.n	b934e <__hexdig_fun+0x1a>
   b934a:	3847      	subs	r0, #71	; 0x47
   b934c:	e7f7      	b.n	b933e <__hexdig_fun+0xa>
   b934e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b9352:	2b05      	cmp	r3, #5
   b9354:	d801      	bhi.n	b935a <__hexdig_fun+0x26>
   b9356:	3827      	subs	r0, #39	; 0x27
   b9358:	e7f1      	b.n	b933e <__hexdig_fun+0xa>
   b935a:	2000      	movs	r0, #0
   b935c:	4770      	bx	lr
	...

000b9360 <__gethex>:
   b9360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9364:	ed2d 8b02 	vpush	{d8}
   b9368:	b089      	sub	sp, #36	; 0x24
   b936a:	ee08 0a10 	vmov	s16, r0
   b936e:	9304      	str	r3, [sp, #16]
   b9370:	4bb4      	ldr	r3, [pc, #720]	; (b9644 <__gethex+0x2e4>)
   b9372:	681b      	ldr	r3, [r3, #0]
   b9374:	9301      	str	r3, [sp, #4]
   b9376:	4618      	mov	r0, r3
   b9378:	468b      	mov	fp, r1
   b937a:	4690      	mov	r8, r2
   b937c:	f7fb fb3e 	bl	b49fc <strlen>
   b9380:	9b01      	ldr	r3, [sp, #4]
   b9382:	f8db 2000 	ldr.w	r2, [fp]
   b9386:	4403      	add	r3, r0
   b9388:	4682      	mov	sl, r0
   b938a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b938e:	9305      	str	r3, [sp, #20]
   b9390:	1c93      	adds	r3, r2, #2
   b9392:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   b9396:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   b939a:	32fe      	adds	r2, #254	; 0xfe
   b939c:	18d1      	adds	r1, r2, r3
   b939e:	461f      	mov	r7, r3
   b93a0:	f813 0b01 	ldrb.w	r0, [r3], #1
   b93a4:	9100      	str	r1, [sp, #0]
   b93a6:	2830      	cmp	r0, #48	; 0x30
   b93a8:	d0f8      	beq.n	b939c <__gethex+0x3c>
   b93aa:	f7ff ffc3 	bl	b9334 <__hexdig_fun>
   b93ae:	4604      	mov	r4, r0
   b93b0:	2800      	cmp	r0, #0
   b93b2:	d13a      	bne.n	b942a <__gethex+0xca>
   b93b4:	9901      	ldr	r1, [sp, #4]
   b93b6:	4652      	mov	r2, sl
   b93b8:	4638      	mov	r0, r7
   b93ba:	f7ff f8c3 	bl	b8544 <strncmp>
   b93be:	4605      	mov	r5, r0
   b93c0:	2800      	cmp	r0, #0
   b93c2:	d168      	bne.n	b9496 <__gethex+0x136>
   b93c4:	f817 000a 	ldrb.w	r0, [r7, sl]
   b93c8:	eb07 060a 	add.w	r6, r7, sl
   b93cc:	f7ff ffb2 	bl	b9334 <__hexdig_fun>
   b93d0:	2800      	cmp	r0, #0
   b93d2:	d062      	beq.n	b949a <__gethex+0x13a>
   b93d4:	4633      	mov	r3, r6
   b93d6:	7818      	ldrb	r0, [r3, #0]
   b93d8:	2830      	cmp	r0, #48	; 0x30
   b93da:	461f      	mov	r7, r3
   b93dc:	f103 0301 	add.w	r3, r3, #1
   b93e0:	d0f9      	beq.n	b93d6 <__gethex+0x76>
   b93e2:	f7ff ffa7 	bl	b9334 <__hexdig_fun>
   b93e6:	2301      	movs	r3, #1
   b93e8:	fab0 f480 	clz	r4, r0
   b93ec:	0964      	lsrs	r4, r4, #5
   b93ee:	4635      	mov	r5, r6
   b93f0:	9300      	str	r3, [sp, #0]
   b93f2:	463a      	mov	r2, r7
   b93f4:	4616      	mov	r6, r2
   b93f6:	3201      	adds	r2, #1
   b93f8:	7830      	ldrb	r0, [r6, #0]
   b93fa:	f7ff ff9b 	bl	b9334 <__hexdig_fun>
   b93fe:	2800      	cmp	r0, #0
   b9400:	d1f8      	bne.n	b93f4 <__gethex+0x94>
   b9402:	9901      	ldr	r1, [sp, #4]
   b9404:	4652      	mov	r2, sl
   b9406:	4630      	mov	r0, r6
   b9408:	f7ff f89c 	bl	b8544 <strncmp>
   b940c:	b980      	cbnz	r0, b9430 <__gethex+0xd0>
   b940e:	b94d      	cbnz	r5, b9424 <__gethex+0xc4>
   b9410:	eb06 050a 	add.w	r5, r6, sl
   b9414:	462a      	mov	r2, r5
   b9416:	4616      	mov	r6, r2
   b9418:	3201      	adds	r2, #1
   b941a:	7830      	ldrb	r0, [r6, #0]
   b941c:	f7ff ff8a 	bl	b9334 <__hexdig_fun>
   b9420:	2800      	cmp	r0, #0
   b9422:	d1f8      	bne.n	b9416 <__gethex+0xb6>
   b9424:	1bad      	subs	r5, r5, r6
   b9426:	00ad      	lsls	r5, r5, #2
   b9428:	e004      	b.n	b9434 <__gethex+0xd4>
   b942a:	2400      	movs	r4, #0
   b942c:	4625      	mov	r5, r4
   b942e:	e7e0      	b.n	b93f2 <__gethex+0x92>
   b9430:	2d00      	cmp	r5, #0
   b9432:	d1f7      	bne.n	b9424 <__gethex+0xc4>
   b9434:	7833      	ldrb	r3, [r6, #0]
   b9436:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b943a:	2b50      	cmp	r3, #80	; 0x50
   b943c:	d13b      	bne.n	b94b6 <__gethex+0x156>
   b943e:	7873      	ldrb	r3, [r6, #1]
   b9440:	2b2b      	cmp	r3, #43	; 0x2b
   b9442:	d02c      	beq.n	b949e <__gethex+0x13e>
   b9444:	2b2d      	cmp	r3, #45	; 0x2d
   b9446:	d02e      	beq.n	b94a6 <__gethex+0x146>
   b9448:	1c71      	adds	r1, r6, #1
   b944a:	f04f 0900 	mov.w	r9, #0
   b944e:	7808      	ldrb	r0, [r1, #0]
   b9450:	f7ff ff70 	bl	b9334 <__hexdig_fun>
   b9454:	1e43      	subs	r3, r0, #1
   b9456:	b2db      	uxtb	r3, r3
   b9458:	2b18      	cmp	r3, #24
   b945a:	d82c      	bhi.n	b94b6 <__gethex+0x156>
   b945c:	f1a0 0210 	sub.w	r2, r0, #16
   b9460:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   b9464:	f7ff ff66 	bl	b9334 <__hexdig_fun>
   b9468:	1e43      	subs	r3, r0, #1
   b946a:	b2db      	uxtb	r3, r3
   b946c:	2b18      	cmp	r3, #24
   b946e:	d91d      	bls.n	b94ac <__gethex+0x14c>
   b9470:	f1b9 0f00 	cmp.w	r9, #0
   b9474:	d000      	beq.n	b9478 <__gethex+0x118>
   b9476:	4252      	negs	r2, r2
   b9478:	4415      	add	r5, r2
   b947a:	f8cb 1000 	str.w	r1, [fp]
   b947e:	b1e4      	cbz	r4, b94ba <__gethex+0x15a>
   b9480:	9b00      	ldr	r3, [sp, #0]
   b9482:	2b00      	cmp	r3, #0
   b9484:	bf14      	ite	ne
   b9486:	2700      	movne	r7, #0
   b9488:	2706      	moveq	r7, #6
   b948a:	4638      	mov	r0, r7
   b948c:	b009      	add	sp, #36	; 0x24
   b948e:	ecbd 8b02 	vpop	{d8}
   b9492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9496:	463e      	mov	r6, r7
   b9498:	4625      	mov	r5, r4
   b949a:	2401      	movs	r4, #1
   b949c:	e7ca      	b.n	b9434 <__gethex+0xd4>
   b949e:	f04f 0900 	mov.w	r9, #0
   b94a2:	1cb1      	adds	r1, r6, #2
   b94a4:	e7d3      	b.n	b944e <__gethex+0xee>
   b94a6:	f04f 0901 	mov.w	r9, #1
   b94aa:	e7fa      	b.n	b94a2 <__gethex+0x142>
   b94ac:	230a      	movs	r3, #10
   b94ae:	fb03 0202 	mla	r2, r3, r2, r0
   b94b2:	3a10      	subs	r2, #16
   b94b4:	e7d4      	b.n	b9460 <__gethex+0x100>
   b94b6:	4631      	mov	r1, r6
   b94b8:	e7df      	b.n	b947a <__gethex+0x11a>
   b94ba:	1bf3      	subs	r3, r6, r7
   b94bc:	3b01      	subs	r3, #1
   b94be:	4621      	mov	r1, r4
   b94c0:	2b07      	cmp	r3, #7
   b94c2:	dc0b      	bgt.n	b94dc <__gethex+0x17c>
   b94c4:	ee18 0a10 	vmov	r0, s16
   b94c8:	f000 fa68 	bl	b999c <_Balloc>
   b94cc:	4604      	mov	r4, r0
   b94ce:	b940      	cbnz	r0, b94e2 <__gethex+0x182>
   b94d0:	4b5d      	ldr	r3, [pc, #372]	; (b9648 <__gethex+0x2e8>)
   b94d2:	4602      	mov	r2, r0
   b94d4:	21de      	movs	r1, #222	; 0xde
   b94d6:	485d      	ldr	r0, [pc, #372]	; (b964c <__gethex+0x2ec>)
   b94d8:	f7fd fd64 	bl	b6fa4 <__assert_func>
   b94dc:	3101      	adds	r1, #1
   b94de:	105b      	asrs	r3, r3, #1
   b94e0:	e7ee      	b.n	b94c0 <__gethex+0x160>
   b94e2:	f100 0914 	add.w	r9, r0, #20
   b94e6:	f04f 0b00 	mov.w	fp, #0
   b94ea:	f1ca 0301 	rsb	r3, sl, #1
   b94ee:	f8cd 9008 	str.w	r9, [sp, #8]
   b94f2:	f8cd b000 	str.w	fp, [sp]
   b94f6:	9306      	str	r3, [sp, #24]
   b94f8:	42b7      	cmp	r7, r6
   b94fa:	d340      	bcc.n	b957e <__gethex+0x21e>
   b94fc:	9802      	ldr	r0, [sp, #8]
   b94fe:	9b00      	ldr	r3, [sp, #0]
   b9500:	f840 3b04 	str.w	r3, [r0], #4
   b9504:	eba0 0009 	sub.w	r0, r0, r9
   b9508:	1080      	asrs	r0, r0, #2
   b950a:	0146      	lsls	r6, r0, #5
   b950c:	6120      	str	r0, [r4, #16]
   b950e:	4618      	mov	r0, r3
   b9510:	f000 fb36 	bl	b9b80 <__hi0bits>
   b9514:	1a30      	subs	r0, r6, r0
   b9516:	f8d8 6000 	ldr.w	r6, [r8]
   b951a:	42b0      	cmp	r0, r6
   b951c:	dd63      	ble.n	b95e6 <__gethex+0x286>
   b951e:	1b87      	subs	r7, r0, r6
   b9520:	4639      	mov	r1, r7
   b9522:	4620      	mov	r0, r4
   b9524:	f000 feda 	bl	ba2dc <__any_on>
   b9528:	4682      	mov	sl, r0
   b952a:	b1a8      	cbz	r0, b9558 <__gethex+0x1f8>
   b952c:	1e7b      	subs	r3, r7, #1
   b952e:	1159      	asrs	r1, r3, #5
   b9530:	f003 021f 	and.w	r2, r3, #31
   b9534:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   b9538:	f04f 0a01 	mov.w	sl, #1
   b953c:	fa0a f202 	lsl.w	r2, sl, r2
   b9540:	420a      	tst	r2, r1
   b9542:	d009      	beq.n	b9558 <__gethex+0x1f8>
   b9544:	4553      	cmp	r3, sl
   b9546:	dd05      	ble.n	b9554 <__gethex+0x1f4>
   b9548:	1eb9      	subs	r1, r7, #2
   b954a:	4620      	mov	r0, r4
   b954c:	f000 fec6 	bl	ba2dc <__any_on>
   b9550:	2800      	cmp	r0, #0
   b9552:	d145      	bne.n	b95e0 <__gethex+0x280>
   b9554:	f04f 0a02 	mov.w	sl, #2
   b9558:	4639      	mov	r1, r7
   b955a:	4620      	mov	r0, r4
   b955c:	f7ff fe98 	bl	b9290 <rshift>
   b9560:	443d      	add	r5, r7
   b9562:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b9566:	42ab      	cmp	r3, r5
   b9568:	da4c      	bge.n	b9604 <__gethex+0x2a4>
   b956a:	ee18 0a10 	vmov	r0, s16
   b956e:	4621      	mov	r1, r4
   b9570:	f000 fa54 	bl	b9a1c <_Bfree>
   b9574:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b9576:	2300      	movs	r3, #0
   b9578:	6013      	str	r3, [r2, #0]
   b957a:	27a3      	movs	r7, #163	; 0xa3
   b957c:	e785      	b.n	b948a <__gethex+0x12a>
   b957e:	1e73      	subs	r3, r6, #1
   b9580:	9a05      	ldr	r2, [sp, #20]
   b9582:	9303      	str	r3, [sp, #12]
   b9584:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   b9588:	4293      	cmp	r3, r2
   b958a:	d019      	beq.n	b95c0 <__gethex+0x260>
   b958c:	f1bb 0f20 	cmp.w	fp, #32
   b9590:	d107      	bne.n	b95a2 <__gethex+0x242>
   b9592:	9b02      	ldr	r3, [sp, #8]
   b9594:	9a00      	ldr	r2, [sp, #0]
   b9596:	f843 2b04 	str.w	r2, [r3], #4
   b959a:	9302      	str	r3, [sp, #8]
   b959c:	2300      	movs	r3, #0
   b959e:	9300      	str	r3, [sp, #0]
   b95a0:	469b      	mov	fp, r3
   b95a2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   b95a6:	f7ff fec5 	bl	b9334 <__hexdig_fun>
   b95aa:	9b00      	ldr	r3, [sp, #0]
   b95ac:	f000 000f 	and.w	r0, r0, #15
   b95b0:	fa00 f00b 	lsl.w	r0, r0, fp
   b95b4:	4303      	orrs	r3, r0
   b95b6:	9300      	str	r3, [sp, #0]
   b95b8:	f10b 0b04 	add.w	fp, fp, #4
   b95bc:	9b03      	ldr	r3, [sp, #12]
   b95be:	e00d      	b.n	b95dc <__gethex+0x27c>
   b95c0:	9b03      	ldr	r3, [sp, #12]
   b95c2:	9a06      	ldr	r2, [sp, #24]
   b95c4:	4413      	add	r3, r2
   b95c6:	42bb      	cmp	r3, r7
   b95c8:	d3e0      	bcc.n	b958c <__gethex+0x22c>
   b95ca:	4618      	mov	r0, r3
   b95cc:	9901      	ldr	r1, [sp, #4]
   b95ce:	9307      	str	r3, [sp, #28]
   b95d0:	4652      	mov	r2, sl
   b95d2:	f7fe ffb7 	bl	b8544 <strncmp>
   b95d6:	9b07      	ldr	r3, [sp, #28]
   b95d8:	2800      	cmp	r0, #0
   b95da:	d1d7      	bne.n	b958c <__gethex+0x22c>
   b95dc:	461e      	mov	r6, r3
   b95de:	e78b      	b.n	b94f8 <__gethex+0x198>
   b95e0:	f04f 0a03 	mov.w	sl, #3
   b95e4:	e7b8      	b.n	b9558 <__gethex+0x1f8>
   b95e6:	da0a      	bge.n	b95fe <__gethex+0x29e>
   b95e8:	1a37      	subs	r7, r6, r0
   b95ea:	4621      	mov	r1, r4
   b95ec:	ee18 0a10 	vmov	r0, s16
   b95f0:	463a      	mov	r2, r7
   b95f2:	f000 fc2f 	bl	b9e54 <__lshift>
   b95f6:	1bed      	subs	r5, r5, r7
   b95f8:	4604      	mov	r4, r0
   b95fa:	f100 0914 	add.w	r9, r0, #20
   b95fe:	f04f 0a00 	mov.w	sl, #0
   b9602:	e7ae      	b.n	b9562 <__gethex+0x202>
   b9604:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b9608:	42a8      	cmp	r0, r5
   b960a:	dd72      	ble.n	b96f2 <__gethex+0x392>
   b960c:	1b45      	subs	r5, r0, r5
   b960e:	42ae      	cmp	r6, r5
   b9610:	dc36      	bgt.n	b9680 <__gethex+0x320>
   b9612:	f8d8 300c 	ldr.w	r3, [r8, #12]
   b9616:	2b02      	cmp	r3, #2
   b9618:	d02a      	beq.n	b9670 <__gethex+0x310>
   b961a:	2b03      	cmp	r3, #3
   b961c:	d02c      	beq.n	b9678 <__gethex+0x318>
   b961e:	2b01      	cmp	r3, #1
   b9620:	d11c      	bne.n	b965c <__gethex+0x2fc>
   b9622:	42ae      	cmp	r6, r5
   b9624:	d11a      	bne.n	b965c <__gethex+0x2fc>
   b9626:	2e01      	cmp	r6, #1
   b9628:	d112      	bne.n	b9650 <__gethex+0x2f0>
   b962a:	9a04      	ldr	r2, [sp, #16]
   b962c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b9630:	6013      	str	r3, [r2, #0]
   b9632:	2301      	movs	r3, #1
   b9634:	6123      	str	r3, [r4, #16]
   b9636:	f8c9 3000 	str.w	r3, [r9]
   b963a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b963c:	2762      	movs	r7, #98	; 0x62
   b963e:	601c      	str	r4, [r3, #0]
   b9640:	e723      	b.n	b948a <__gethex+0x12a>
   b9642:	bf00      	nop
   b9644:	000bb468 	.word	0x000bb468
   b9648:	000bb3f1 	.word	0x000bb3f1
   b964c:	000bb402 	.word	0x000bb402
   b9650:	1e71      	subs	r1, r6, #1
   b9652:	4620      	mov	r0, r4
   b9654:	f000 fe42 	bl	ba2dc <__any_on>
   b9658:	2800      	cmp	r0, #0
   b965a:	d1e6      	bne.n	b962a <__gethex+0x2ca>
   b965c:	ee18 0a10 	vmov	r0, s16
   b9660:	4621      	mov	r1, r4
   b9662:	f000 f9db 	bl	b9a1c <_Bfree>
   b9666:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b9668:	2300      	movs	r3, #0
   b966a:	6013      	str	r3, [r2, #0]
   b966c:	2750      	movs	r7, #80	; 0x50
   b966e:	e70c      	b.n	b948a <__gethex+0x12a>
   b9670:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b9672:	2b00      	cmp	r3, #0
   b9674:	d1f2      	bne.n	b965c <__gethex+0x2fc>
   b9676:	e7d8      	b.n	b962a <__gethex+0x2ca>
   b9678:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b967a:	2b00      	cmp	r3, #0
   b967c:	d1d5      	bne.n	b962a <__gethex+0x2ca>
   b967e:	e7ed      	b.n	b965c <__gethex+0x2fc>
   b9680:	1e6f      	subs	r7, r5, #1
   b9682:	f1ba 0f00 	cmp.w	sl, #0
   b9686:	d131      	bne.n	b96ec <__gethex+0x38c>
   b9688:	b127      	cbz	r7, b9694 <__gethex+0x334>
   b968a:	4639      	mov	r1, r7
   b968c:	4620      	mov	r0, r4
   b968e:	f000 fe25 	bl	ba2dc <__any_on>
   b9692:	4682      	mov	sl, r0
   b9694:	117b      	asrs	r3, r7, #5
   b9696:	2101      	movs	r1, #1
   b9698:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   b969c:	f007 071f 	and.w	r7, r7, #31
   b96a0:	fa01 f707 	lsl.w	r7, r1, r7
   b96a4:	421f      	tst	r7, r3
   b96a6:	4629      	mov	r1, r5
   b96a8:	4620      	mov	r0, r4
   b96aa:	bf18      	it	ne
   b96ac:	f04a 0a02 	orrne.w	sl, sl, #2
   b96b0:	1b76      	subs	r6, r6, r5
   b96b2:	f7ff fded 	bl	b9290 <rshift>
   b96b6:	f8d8 5004 	ldr.w	r5, [r8, #4]
   b96ba:	2702      	movs	r7, #2
   b96bc:	f1ba 0f00 	cmp.w	sl, #0
   b96c0:	d048      	beq.n	b9754 <__gethex+0x3f4>
   b96c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   b96c6:	2b02      	cmp	r3, #2
   b96c8:	d015      	beq.n	b96f6 <__gethex+0x396>
   b96ca:	2b03      	cmp	r3, #3
   b96cc:	d017      	beq.n	b96fe <__gethex+0x39e>
   b96ce:	2b01      	cmp	r3, #1
   b96d0:	d109      	bne.n	b96e6 <__gethex+0x386>
   b96d2:	f01a 0f02 	tst.w	sl, #2
   b96d6:	d006      	beq.n	b96e6 <__gethex+0x386>
   b96d8:	f8d9 0000 	ldr.w	r0, [r9]
   b96dc:	ea4a 0a00 	orr.w	sl, sl, r0
   b96e0:	f01a 0f01 	tst.w	sl, #1
   b96e4:	d10e      	bne.n	b9704 <__gethex+0x3a4>
   b96e6:	f047 0710 	orr.w	r7, r7, #16
   b96ea:	e033      	b.n	b9754 <__gethex+0x3f4>
   b96ec:	f04f 0a01 	mov.w	sl, #1
   b96f0:	e7d0      	b.n	b9694 <__gethex+0x334>
   b96f2:	2701      	movs	r7, #1
   b96f4:	e7e2      	b.n	b96bc <__gethex+0x35c>
   b96f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b96f8:	f1c3 0301 	rsb	r3, r3, #1
   b96fc:	9315      	str	r3, [sp, #84]	; 0x54
   b96fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b9700:	2b00      	cmp	r3, #0
   b9702:	d0f0      	beq.n	b96e6 <__gethex+0x386>
   b9704:	f8d4 b010 	ldr.w	fp, [r4, #16]
   b9708:	f104 0314 	add.w	r3, r4, #20
   b970c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   b9710:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   b9714:	f04f 0c00 	mov.w	ip, #0
   b9718:	4618      	mov	r0, r3
   b971a:	f853 2b04 	ldr.w	r2, [r3], #4
   b971e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   b9722:	d01c      	beq.n	b975e <__gethex+0x3fe>
   b9724:	3201      	adds	r2, #1
   b9726:	6002      	str	r2, [r0, #0]
   b9728:	2f02      	cmp	r7, #2
   b972a:	f104 0314 	add.w	r3, r4, #20
   b972e:	d13f      	bne.n	b97b0 <__gethex+0x450>
   b9730:	f8d8 2000 	ldr.w	r2, [r8]
   b9734:	3a01      	subs	r2, #1
   b9736:	42b2      	cmp	r2, r6
   b9738:	d10a      	bne.n	b9750 <__gethex+0x3f0>
   b973a:	1171      	asrs	r1, r6, #5
   b973c:	2201      	movs	r2, #1
   b973e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   b9742:	f006 061f 	and.w	r6, r6, #31
   b9746:	fa02 f606 	lsl.w	r6, r2, r6
   b974a:	421e      	tst	r6, r3
   b974c:	bf18      	it	ne
   b974e:	4617      	movne	r7, r2
   b9750:	f047 0720 	orr.w	r7, r7, #32
   b9754:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b9756:	601c      	str	r4, [r3, #0]
   b9758:	9b04      	ldr	r3, [sp, #16]
   b975a:	601d      	str	r5, [r3, #0]
   b975c:	e695      	b.n	b948a <__gethex+0x12a>
   b975e:	4299      	cmp	r1, r3
   b9760:	f843 cc04 	str.w	ip, [r3, #-4]
   b9764:	d8d8      	bhi.n	b9718 <__gethex+0x3b8>
   b9766:	68a3      	ldr	r3, [r4, #8]
   b9768:	459b      	cmp	fp, r3
   b976a:	db19      	blt.n	b97a0 <__gethex+0x440>
   b976c:	6861      	ldr	r1, [r4, #4]
   b976e:	ee18 0a10 	vmov	r0, s16
   b9772:	3101      	adds	r1, #1
   b9774:	f000 f912 	bl	b999c <_Balloc>
   b9778:	4681      	mov	r9, r0
   b977a:	b918      	cbnz	r0, b9784 <__gethex+0x424>
   b977c:	4b1a      	ldr	r3, [pc, #104]	; (b97e8 <__gethex+0x488>)
   b977e:	4602      	mov	r2, r0
   b9780:	2184      	movs	r1, #132	; 0x84
   b9782:	e6a8      	b.n	b94d6 <__gethex+0x176>
   b9784:	6922      	ldr	r2, [r4, #16]
   b9786:	3202      	adds	r2, #2
   b9788:	f104 010c 	add.w	r1, r4, #12
   b978c:	0092      	lsls	r2, r2, #2
   b978e:	300c      	adds	r0, #12
   b9790:	f7fe fe93 	bl	b84ba <memcpy>
   b9794:	4621      	mov	r1, r4
   b9796:	ee18 0a10 	vmov	r0, s16
   b979a:	f000 f93f 	bl	b9a1c <_Bfree>
   b979e:	464c      	mov	r4, r9
   b97a0:	6923      	ldr	r3, [r4, #16]
   b97a2:	1c5a      	adds	r2, r3, #1
   b97a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   b97a8:	6122      	str	r2, [r4, #16]
   b97aa:	2201      	movs	r2, #1
   b97ac:	615a      	str	r2, [r3, #20]
   b97ae:	e7bb      	b.n	b9728 <__gethex+0x3c8>
   b97b0:	6922      	ldr	r2, [r4, #16]
   b97b2:	455a      	cmp	r2, fp
   b97b4:	dd0b      	ble.n	b97ce <__gethex+0x46e>
   b97b6:	2101      	movs	r1, #1
   b97b8:	4620      	mov	r0, r4
   b97ba:	f7ff fd69 	bl	b9290 <rshift>
   b97be:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b97c2:	3501      	adds	r5, #1
   b97c4:	42ab      	cmp	r3, r5
   b97c6:	f6ff aed0 	blt.w	b956a <__gethex+0x20a>
   b97ca:	2701      	movs	r7, #1
   b97cc:	e7c0      	b.n	b9750 <__gethex+0x3f0>
   b97ce:	f016 061f 	ands.w	r6, r6, #31
   b97d2:	d0fa      	beq.n	b97ca <__gethex+0x46a>
   b97d4:	4453      	add	r3, sl
   b97d6:	f1c6 0620 	rsb	r6, r6, #32
   b97da:	f853 0c04 	ldr.w	r0, [r3, #-4]
   b97de:	f000 f9cf 	bl	b9b80 <__hi0bits>
   b97e2:	42b0      	cmp	r0, r6
   b97e4:	dbe7      	blt.n	b97b6 <__gethex+0x456>
   b97e6:	e7f0      	b.n	b97ca <__gethex+0x46a>
   b97e8:	000bb3f1 	.word	0x000bb3f1

000b97ec <L_shift>:
   b97ec:	f1c2 0208 	rsb	r2, r2, #8
   b97f0:	0092      	lsls	r2, r2, #2
   b97f2:	b570      	push	{r4, r5, r6, lr}
   b97f4:	f1c2 0620 	rsb	r6, r2, #32
   b97f8:	6843      	ldr	r3, [r0, #4]
   b97fa:	6804      	ldr	r4, [r0, #0]
   b97fc:	fa03 f506 	lsl.w	r5, r3, r6
   b9800:	432c      	orrs	r4, r5
   b9802:	40d3      	lsrs	r3, r2
   b9804:	6004      	str	r4, [r0, #0]
   b9806:	f840 3f04 	str.w	r3, [r0, #4]!
   b980a:	4288      	cmp	r0, r1
   b980c:	d3f4      	bcc.n	b97f8 <L_shift+0xc>
   b980e:	bd70      	pop	{r4, r5, r6, pc}

000b9810 <__match>:
   b9810:	b530      	push	{r4, r5, lr}
   b9812:	6803      	ldr	r3, [r0, #0]
   b9814:	3301      	adds	r3, #1
   b9816:	f811 4b01 	ldrb.w	r4, [r1], #1
   b981a:	b914      	cbnz	r4, b9822 <__match+0x12>
   b981c:	6003      	str	r3, [r0, #0]
   b981e:	2001      	movs	r0, #1
   b9820:	bd30      	pop	{r4, r5, pc}
   b9822:	f813 2b01 	ldrb.w	r2, [r3], #1
   b9826:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   b982a:	2d19      	cmp	r5, #25
   b982c:	bf98      	it	ls
   b982e:	3220      	addls	r2, #32
   b9830:	42a2      	cmp	r2, r4
   b9832:	d0f0      	beq.n	b9816 <__match+0x6>
   b9834:	2000      	movs	r0, #0
   b9836:	e7f3      	b.n	b9820 <__match+0x10>

000b9838 <__hexnan>:
   b9838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b983c:	680b      	ldr	r3, [r1, #0]
   b983e:	115e      	asrs	r6, r3, #5
   b9840:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   b9844:	f013 031f 	ands.w	r3, r3, #31
   b9848:	b087      	sub	sp, #28
   b984a:	bf18      	it	ne
   b984c:	3604      	addne	r6, #4
   b984e:	2500      	movs	r5, #0
   b9850:	1f37      	subs	r7, r6, #4
   b9852:	4690      	mov	r8, r2
   b9854:	6802      	ldr	r2, [r0, #0]
   b9856:	9301      	str	r3, [sp, #4]
   b9858:	4682      	mov	sl, r0
   b985a:	f846 5c04 	str.w	r5, [r6, #-4]
   b985e:	46b9      	mov	r9, r7
   b9860:	463c      	mov	r4, r7
   b9862:	9502      	str	r5, [sp, #8]
   b9864:	46ab      	mov	fp, r5
   b9866:	7851      	ldrb	r1, [r2, #1]
   b9868:	1c53      	adds	r3, r2, #1
   b986a:	9303      	str	r3, [sp, #12]
   b986c:	b341      	cbz	r1, b98c0 <__hexnan+0x88>
   b986e:	4608      	mov	r0, r1
   b9870:	9205      	str	r2, [sp, #20]
   b9872:	9104      	str	r1, [sp, #16]
   b9874:	f7ff fd5e 	bl	b9334 <__hexdig_fun>
   b9878:	2800      	cmp	r0, #0
   b987a:	d14f      	bne.n	b991c <__hexnan+0xe4>
   b987c:	9904      	ldr	r1, [sp, #16]
   b987e:	9a05      	ldr	r2, [sp, #20]
   b9880:	2920      	cmp	r1, #32
   b9882:	d818      	bhi.n	b98b6 <__hexnan+0x7e>
   b9884:	9b02      	ldr	r3, [sp, #8]
   b9886:	459b      	cmp	fp, r3
   b9888:	dd13      	ble.n	b98b2 <__hexnan+0x7a>
   b988a:	454c      	cmp	r4, r9
   b988c:	d206      	bcs.n	b989c <__hexnan+0x64>
   b988e:	2d07      	cmp	r5, #7
   b9890:	dc04      	bgt.n	b989c <__hexnan+0x64>
   b9892:	462a      	mov	r2, r5
   b9894:	4649      	mov	r1, r9
   b9896:	4620      	mov	r0, r4
   b9898:	f7ff ffa8 	bl	b97ec <L_shift>
   b989c:	4544      	cmp	r4, r8
   b989e:	d950      	bls.n	b9942 <__hexnan+0x10a>
   b98a0:	2300      	movs	r3, #0
   b98a2:	f1a4 0904 	sub.w	r9, r4, #4
   b98a6:	f844 3c04 	str.w	r3, [r4, #-4]
   b98aa:	f8cd b008 	str.w	fp, [sp, #8]
   b98ae:	464c      	mov	r4, r9
   b98b0:	461d      	mov	r5, r3
   b98b2:	9a03      	ldr	r2, [sp, #12]
   b98b4:	e7d7      	b.n	b9866 <__hexnan+0x2e>
   b98b6:	2929      	cmp	r1, #41	; 0x29
   b98b8:	d156      	bne.n	b9968 <__hexnan+0x130>
   b98ba:	3202      	adds	r2, #2
   b98bc:	f8ca 2000 	str.w	r2, [sl]
   b98c0:	f1bb 0f00 	cmp.w	fp, #0
   b98c4:	d050      	beq.n	b9968 <__hexnan+0x130>
   b98c6:	454c      	cmp	r4, r9
   b98c8:	d206      	bcs.n	b98d8 <__hexnan+0xa0>
   b98ca:	2d07      	cmp	r5, #7
   b98cc:	dc04      	bgt.n	b98d8 <__hexnan+0xa0>
   b98ce:	462a      	mov	r2, r5
   b98d0:	4649      	mov	r1, r9
   b98d2:	4620      	mov	r0, r4
   b98d4:	f7ff ff8a 	bl	b97ec <L_shift>
   b98d8:	4544      	cmp	r4, r8
   b98da:	d934      	bls.n	b9946 <__hexnan+0x10e>
   b98dc:	f1a8 0204 	sub.w	r2, r8, #4
   b98e0:	4623      	mov	r3, r4
   b98e2:	f853 1b04 	ldr.w	r1, [r3], #4
   b98e6:	f842 1f04 	str.w	r1, [r2, #4]!
   b98ea:	429f      	cmp	r7, r3
   b98ec:	d2f9      	bcs.n	b98e2 <__hexnan+0xaa>
   b98ee:	1b3b      	subs	r3, r7, r4
   b98f0:	f023 0303 	bic.w	r3, r3, #3
   b98f4:	3304      	adds	r3, #4
   b98f6:	3401      	adds	r4, #1
   b98f8:	3e03      	subs	r6, #3
   b98fa:	42b4      	cmp	r4, r6
   b98fc:	bf88      	it	hi
   b98fe:	2304      	movhi	r3, #4
   b9900:	4443      	add	r3, r8
   b9902:	2200      	movs	r2, #0
   b9904:	f843 2b04 	str.w	r2, [r3], #4
   b9908:	429f      	cmp	r7, r3
   b990a:	d2fb      	bcs.n	b9904 <__hexnan+0xcc>
   b990c:	683b      	ldr	r3, [r7, #0]
   b990e:	b91b      	cbnz	r3, b9918 <__hexnan+0xe0>
   b9910:	4547      	cmp	r7, r8
   b9912:	d127      	bne.n	b9964 <__hexnan+0x12c>
   b9914:	2301      	movs	r3, #1
   b9916:	603b      	str	r3, [r7, #0]
   b9918:	2005      	movs	r0, #5
   b991a:	e026      	b.n	b996a <__hexnan+0x132>
   b991c:	3501      	adds	r5, #1
   b991e:	2d08      	cmp	r5, #8
   b9920:	f10b 0b01 	add.w	fp, fp, #1
   b9924:	dd06      	ble.n	b9934 <__hexnan+0xfc>
   b9926:	4544      	cmp	r4, r8
   b9928:	d9c3      	bls.n	b98b2 <__hexnan+0x7a>
   b992a:	2300      	movs	r3, #0
   b992c:	f844 3c04 	str.w	r3, [r4, #-4]
   b9930:	2501      	movs	r5, #1
   b9932:	3c04      	subs	r4, #4
   b9934:	6822      	ldr	r2, [r4, #0]
   b9936:	f000 000f 	and.w	r0, r0, #15
   b993a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   b993e:	6022      	str	r2, [r4, #0]
   b9940:	e7b7      	b.n	b98b2 <__hexnan+0x7a>
   b9942:	2508      	movs	r5, #8
   b9944:	e7b5      	b.n	b98b2 <__hexnan+0x7a>
   b9946:	9b01      	ldr	r3, [sp, #4]
   b9948:	2b00      	cmp	r3, #0
   b994a:	d0df      	beq.n	b990c <__hexnan+0xd4>
   b994c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9950:	f1c3 0320 	rsb	r3, r3, #32
   b9954:	fa22 f303 	lsr.w	r3, r2, r3
   b9958:	f856 2c04 	ldr.w	r2, [r6, #-4]
   b995c:	401a      	ands	r2, r3
   b995e:	f846 2c04 	str.w	r2, [r6, #-4]
   b9962:	e7d3      	b.n	b990c <__hexnan+0xd4>
   b9964:	3f04      	subs	r7, #4
   b9966:	e7d1      	b.n	b990c <__hexnan+0xd4>
   b9968:	2004      	movs	r0, #4
   b996a:	b007      	add	sp, #28
   b996c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b9970 <__retarget_lock_acquire_recursive>:
   b9970:	4770      	bx	lr

000b9972 <__retarget_lock_release>:
   b9972:	4770      	bx	lr

000b9974 <__retarget_lock_release_recursive>:
   b9974:	4770      	bx	lr

000b9976 <__ascii_mbtowc>:
   b9976:	b082      	sub	sp, #8
   b9978:	b901      	cbnz	r1, b997c <__ascii_mbtowc+0x6>
   b997a:	a901      	add	r1, sp, #4
   b997c:	b142      	cbz	r2, b9990 <__ascii_mbtowc+0x1a>
   b997e:	b14b      	cbz	r3, b9994 <__ascii_mbtowc+0x1e>
   b9980:	7813      	ldrb	r3, [r2, #0]
   b9982:	600b      	str	r3, [r1, #0]
   b9984:	7812      	ldrb	r2, [r2, #0]
   b9986:	1e10      	subs	r0, r2, #0
   b9988:	bf18      	it	ne
   b998a:	2001      	movne	r0, #1
   b998c:	b002      	add	sp, #8
   b998e:	4770      	bx	lr
   b9990:	4610      	mov	r0, r2
   b9992:	e7fb      	b.n	b998c <__ascii_mbtowc+0x16>
   b9994:	f06f 0001 	mvn.w	r0, #1
   b9998:	e7f8      	b.n	b998c <__ascii_mbtowc+0x16>
	...

000b999c <_Balloc>:
   b999c:	b570      	push	{r4, r5, r6, lr}
   b999e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b99a0:	4604      	mov	r4, r0
   b99a2:	460d      	mov	r5, r1
   b99a4:	b976      	cbnz	r6, b99c4 <_Balloc+0x28>
   b99a6:	2010      	movs	r0, #16
   b99a8:	f7fd facc 	bl	b6f44 <malloc>
   b99ac:	4602      	mov	r2, r0
   b99ae:	6260      	str	r0, [r4, #36]	; 0x24
   b99b0:	b920      	cbnz	r0, b99bc <_Balloc+0x20>
   b99b2:	4b18      	ldr	r3, [pc, #96]	; (b9a14 <_Balloc+0x78>)
   b99b4:	4818      	ldr	r0, [pc, #96]	; (b9a18 <_Balloc+0x7c>)
   b99b6:	2166      	movs	r1, #102	; 0x66
   b99b8:	f7fd faf4 	bl	b6fa4 <__assert_func>
   b99bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   b99c0:	6006      	str	r6, [r0, #0]
   b99c2:	60c6      	str	r6, [r0, #12]
   b99c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
   b99c6:	68f3      	ldr	r3, [r6, #12]
   b99c8:	b183      	cbz	r3, b99ec <_Balloc+0x50>
   b99ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b99cc:	68db      	ldr	r3, [r3, #12]
   b99ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   b99d2:	b9b8      	cbnz	r0, b9a04 <_Balloc+0x68>
   b99d4:	2101      	movs	r1, #1
   b99d6:	fa01 f605 	lsl.w	r6, r1, r5
   b99da:	1d72      	adds	r2, r6, #5
   b99dc:	0092      	lsls	r2, r2, #2
   b99de:	4620      	mov	r0, r4
   b99e0:	f000 fc9d 	bl	ba31e <_calloc_r>
   b99e4:	b160      	cbz	r0, b9a00 <_Balloc+0x64>
   b99e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
   b99ea:	e00e      	b.n	b9a0a <_Balloc+0x6e>
   b99ec:	2221      	movs	r2, #33	; 0x21
   b99ee:	2104      	movs	r1, #4
   b99f0:	4620      	mov	r0, r4
   b99f2:	f000 fc94 	bl	ba31e <_calloc_r>
   b99f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b99f8:	60f0      	str	r0, [r6, #12]
   b99fa:	68db      	ldr	r3, [r3, #12]
   b99fc:	2b00      	cmp	r3, #0
   b99fe:	d1e4      	bne.n	b99ca <_Balloc+0x2e>
   b9a00:	2000      	movs	r0, #0
   b9a02:	bd70      	pop	{r4, r5, r6, pc}
   b9a04:	6802      	ldr	r2, [r0, #0]
   b9a06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   b9a0a:	2300      	movs	r3, #0
   b9a0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   b9a10:	e7f7      	b.n	b9a02 <_Balloc+0x66>
   b9a12:	bf00      	nop
   b9a14:	000bb221 	.word	0x000bb221
   b9a18:	000bb47c 	.word	0x000bb47c

000b9a1c <_Bfree>:
   b9a1c:	b570      	push	{r4, r5, r6, lr}
   b9a1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b9a20:	4605      	mov	r5, r0
   b9a22:	460c      	mov	r4, r1
   b9a24:	b976      	cbnz	r6, b9a44 <_Bfree+0x28>
   b9a26:	2010      	movs	r0, #16
   b9a28:	f7fd fa8c 	bl	b6f44 <malloc>
   b9a2c:	4602      	mov	r2, r0
   b9a2e:	6268      	str	r0, [r5, #36]	; 0x24
   b9a30:	b920      	cbnz	r0, b9a3c <_Bfree+0x20>
   b9a32:	4b09      	ldr	r3, [pc, #36]	; (b9a58 <_Bfree+0x3c>)
   b9a34:	4809      	ldr	r0, [pc, #36]	; (b9a5c <_Bfree+0x40>)
   b9a36:	218a      	movs	r1, #138	; 0x8a
   b9a38:	f7fd fab4 	bl	b6fa4 <__assert_func>
   b9a3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   b9a40:	6006      	str	r6, [r0, #0]
   b9a42:	60c6      	str	r6, [r0, #12]
   b9a44:	b13c      	cbz	r4, b9a56 <_Bfree+0x3a>
   b9a46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b9a48:	6862      	ldr	r2, [r4, #4]
   b9a4a:	68db      	ldr	r3, [r3, #12]
   b9a4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   b9a50:	6021      	str	r1, [r4, #0]
   b9a52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   b9a56:	bd70      	pop	{r4, r5, r6, pc}
   b9a58:	000bb221 	.word	0x000bb221
   b9a5c:	000bb47c 	.word	0x000bb47c

000b9a60 <__multadd>:
   b9a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9a64:	690d      	ldr	r5, [r1, #16]
   b9a66:	4607      	mov	r7, r0
   b9a68:	460c      	mov	r4, r1
   b9a6a:	461e      	mov	r6, r3
   b9a6c:	f101 0c14 	add.w	ip, r1, #20
   b9a70:	2000      	movs	r0, #0
   b9a72:	f8dc 3000 	ldr.w	r3, [ip]
   b9a76:	b299      	uxth	r1, r3
   b9a78:	fb02 6101 	mla	r1, r2, r1, r6
   b9a7c:	0c1e      	lsrs	r6, r3, #16
   b9a7e:	0c0b      	lsrs	r3, r1, #16
   b9a80:	fb02 3306 	mla	r3, r2, r6, r3
   b9a84:	b289      	uxth	r1, r1
   b9a86:	3001      	adds	r0, #1
   b9a88:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   b9a8c:	4285      	cmp	r5, r0
   b9a8e:	f84c 1b04 	str.w	r1, [ip], #4
   b9a92:	ea4f 4613 	mov.w	r6, r3, lsr #16
   b9a96:	dcec      	bgt.n	b9a72 <__multadd+0x12>
   b9a98:	b30e      	cbz	r6, b9ade <__multadd+0x7e>
   b9a9a:	68a3      	ldr	r3, [r4, #8]
   b9a9c:	42ab      	cmp	r3, r5
   b9a9e:	dc19      	bgt.n	b9ad4 <__multadd+0x74>
   b9aa0:	6861      	ldr	r1, [r4, #4]
   b9aa2:	4638      	mov	r0, r7
   b9aa4:	3101      	adds	r1, #1
   b9aa6:	f7ff ff79 	bl	b999c <_Balloc>
   b9aaa:	4680      	mov	r8, r0
   b9aac:	b928      	cbnz	r0, b9aba <__multadd+0x5a>
   b9aae:	4602      	mov	r2, r0
   b9ab0:	4b0c      	ldr	r3, [pc, #48]	; (b9ae4 <__multadd+0x84>)
   b9ab2:	480d      	ldr	r0, [pc, #52]	; (b9ae8 <__multadd+0x88>)
   b9ab4:	21b5      	movs	r1, #181	; 0xb5
   b9ab6:	f7fd fa75 	bl	b6fa4 <__assert_func>
   b9aba:	6922      	ldr	r2, [r4, #16]
   b9abc:	3202      	adds	r2, #2
   b9abe:	f104 010c 	add.w	r1, r4, #12
   b9ac2:	0092      	lsls	r2, r2, #2
   b9ac4:	300c      	adds	r0, #12
   b9ac6:	f7fe fcf8 	bl	b84ba <memcpy>
   b9aca:	4621      	mov	r1, r4
   b9acc:	4638      	mov	r0, r7
   b9ace:	f7ff ffa5 	bl	b9a1c <_Bfree>
   b9ad2:	4644      	mov	r4, r8
   b9ad4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   b9ad8:	3501      	adds	r5, #1
   b9ada:	615e      	str	r6, [r3, #20]
   b9adc:	6125      	str	r5, [r4, #16]
   b9ade:	4620      	mov	r0, r4
   b9ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9ae4:	000bb3f1 	.word	0x000bb3f1
   b9ae8:	000bb47c 	.word	0x000bb47c

000b9aec <__s2b>:
   b9aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9af0:	460c      	mov	r4, r1
   b9af2:	4615      	mov	r5, r2
   b9af4:	461f      	mov	r7, r3
   b9af6:	2209      	movs	r2, #9
   b9af8:	3308      	adds	r3, #8
   b9afa:	4606      	mov	r6, r0
   b9afc:	fb93 f3f2 	sdiv	r3, r3, r2
   b9b00:	2100      	movs	r1, #0
   b9b02:	2201      	movs	r2, #1
   b9b04:	429a      	cmp	r2, r3
   b9b06:	db09      	blt.n	b9b1c <__s2b+0x30>
   b9b08:	4630      	mov	r0, r6
   b9b0a:	f7ff ff47 	bl	b999c <_Balloc>
   b9b0e:	b940      	cbnz	r0, b9b22 <__s2b+0x36>
   b9b10:	4602      	mov	r2, r0
   b9b12:	4b19      	ldr	r3, [pc, #100]	; (b9b78 <__s2b+0x8c>)
   b9b14:	4819      	ldr	r0, [pc, #100]	; (b9b7c <__s2b+0x90>)
   b9b16:	21ce      	movs	r1, #206	; 0xce
   b9b18:	f7fd fa44 	bl	b6fa4 <__assert_func>
   b9b1c:	0052      	lsls	r2, r2, #1
   b9b1e:	3101      	adds	r1, #1
   b9b20:	e7f0      	b.n	b9b04 <__s2b+0x18>
   b9b22:	9b08      	ldr	r3, [sp, #32]
   b9b24:	6143      	str	r3, [r0, #20]
   b9b26:	2d09      	cmp	r5, #9
   b9b28:	f04f 0301 	mov.w	r3, #1
   b9b2c:	6103      	str	r3, [r0, #16]
   b9b2e:	dd16      	ble.n	b9b5e <__s2b+0x72>
   b9b30:	f104 0909 	add.w	r9, r4, #9
   b9b34:	46c8      	mov	r8, r9
   b9b36:	442c      	add	r4, r5
   b9b38:	f818 3b01 	ldrb.w	r3, [r8], #1
   b9b3c:	4601      	mov	r1, r0
   b9b3e:	3b30      	subs	r3, #48	; 0x30
   b9b40:	220a      	movs	r2, #10
   b9b42:	4630      	mov	r0, r6
   b9b44:	f7ff ff8c 	bl	b9a60 <__multadd>
   b9b48:	45a0      	cmp	r8, r4
   b9b4a:	d1f5      	bne.n	b9b38 <__s2b+0x4c>
   b9b4c:	f1a5 0408 	sub.w	r4, r5, #8
   b9b50:	444c      	add	r4, r9
   b9b52:	1b2d      	subs	r5, r5, r4
   b9b54:	1963      	adds	r3, r4, r5
   b9b56:	42bb      	cmp	r3, r7
   b9b58:	db04      	blt.n	b9b64 <__s2b+0x78>
   b9b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9b5e:	340a      	adds	r4, #10
   b9b60:	2509      	movs	r5, #9
   b9b62:	e7f6      	b.n	b9b52 <__s2b+0x66>
   b9b64:	f814 3b01 	ldrb.w	r3, [r4], #1
   b9b68:	4601      	mov	r1, r0
   b9b6a:	3b30      	subs	r3, #48	; 0x30
   b9b6c:	220a      	movs	r2, #10
   b9b6e:	4630      	mov	r0, r6
   b9b70:	f7ff ff76 	bl	b9a60 <__multadd>
   b9b74:	e7ee      	b.n	b9b54 <__s2b+0x68>
   b9b76:	bf00      	nop
   b9b78:	000bb3f1 	.word	0x000bb3f1
   b9b7c:	000bb47c 	.word	0x000bb47c

000b9b80 <__hi0bits>:
   b9b80:	0c03      	lsrs	r3, r0, #16
   b9b82:	041b      	lsls	r3, r3, #16
   b9b84:	b9d3      	cbnz	r3, b9bbc <__hi0bits+0x3c>
   b9b86:	0400      	lsls	r0, r0, #16
   b9b88:	2310      	movs	r3, #16
   b9b8a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   b9b8e:	bf04      	itt	eq
   b9b90:	0200      	lsleq	r0, r0, #8
   b9b92:	3308      	addeq	r3, #8
   b9b94:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   b9b98:	bf04      	itt	eq
   b9b9a:	0100      	lsleq	r0, r0, #4
   b9b9c:	3304      	addeq	r3, #4
   b9b9e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   b9ba2:	bf04      	itt	eq
   b9ba4:	0080      	lsleq	r0, r0, #2
   b9ba6:	3302      	addeq	r3, #2
   b9ba8:	2800      	cmp	r0, #0
   b9baa:	db05      	blt.n	b9bb8 <__hi0bits+0x38>
   b9bac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   b9bb0:	f103 0301 	add.w	r3, r3, #1
   b9bb4:	bf08      	it	eq
   b9bb6:	2320      	moveq	r3, #32
   b9bb8:	4618      	mov	r0, r3
   b9bba:	4770      	bx	lr
   b9bbc:	2300      	movs	r3, #0
   b9bbe:	e7e4      	b.n	b9b8a <__hi0bits+0xa>

000b9bc0 <__lo0bits>:
   b9bc0:	6803      	ldr	r3, [r0, #0]
   b9bc2:	f013 0207 	ands.w	r2, r3, #7
   b9bc6:	4601      	mov	r1, r0
   b9bc8:	d00b      	beq.n	b9be2 <__lo0bits+0x22>
   b9bca:	07da      	lsls	r2, r3, #31
   b9bcc:	d423      	bmi.n	b9c16 <__lo0bits+0x56>
   b9bce:	0798      	lsls	r0, r3, #30
   b9bd0:	bf49      	itett	mi
   b9bd2:	085b      	lsrmi	r3, r3, #1
   b9bd4:	089b      	lsrpl	r3, r3, #2
   b9bd6:	2001      	movmi	r0, #1
   b9bd8:	600b      	strmi	r3, [r1, #0]
   b9bda:	bf5c      	itt	pl
   b9bdc:	600b      	strpl	r3, [r1, #0]
   b9bde:	2002      	movpl	r0, #2
   b9be0:	4770      	bx	lr
   b9be2:	b298      	uxth	r0, r3
   b9be4:	b9a8      	cbnz	r0, b9c12 <__lo0bits+0x52>
   b9be6:	0c1b      	lsrs	r3, r3, #16
   b9be8:	2010      	movs	r0, #16
   b9bea:	b2da      	uxtb	r2, r3
   b9bec:	b90a      	cbnz	r2, b9bf2 <__lo0bits+0x32>
   b9bee:	3008      	adds	r0, #8
   b9bf0:	0a1b      	lsrs	r3, r3, #8
   b9bf2:	071a      	lsls	r2, r3, #28
   b9bf4:	bf04      	itt	eq
   b9bf6:	091b      	lsreq	r3, r3, #4
   b9bf8:	3004      	addeq	r0, #4
   b9bfa:	079a      	lsls	r2, r3, #30
   b9bfc:	bf04      	itt	eq
   b9bfe:	089b      	lsreq	r3, r3, #2
   b9c00:	3002      	addeq	r0, #2
   b9c02:	07da      	lsls	r2, r3, #31
   b9c04:	d403      	bmi.n	b9c0e <__lo0bits+0x4e>
   b9c06:	085b      	lsrs	r3, r3, #1
   b9c08:	f100 0001 	add.w	r0, r0, #1
   b9c0c:	d005      	beq.n	b9c1a <__lo0bits+0x5a>
   b9c0e:	600b      	str	r3, [r1, #0]
   b9c10:	4770      	bx	lr
   b9c12:	4610      	mov	r0, r2
   b9c14:	e7e9      	b.n	b9bea <__lo0bits+0x2a>
   b9c16:	2000      	movs	r0, #0
   b9c18:	4770      	bx	lr
   b9c1a:	2020      	movs	r0, #32
   b9c1c:	4770      	bx	lr
	...

000b9c20 <__i2b>:
   b9c20:	b510      	push	{r4, lr}
   b9c22:	460c      	mov	r4, r1
   b9c24:	2101      	movs	r1, #1
   b9c26:	f7ff feb9 	bl	b999c <_Balloc>
   b9c2a:	4602      	mov	r2, r0
   b9c2c:	b928      	cbnz	r0, b9c3a <__i2b+0x1a>
   b9c2e:	4b05      	ldr	r3, [pc, #20]	; (b9c44 <__i2b+0x24>)
   b9c30:	4805      	ldr	r0, [pc, #20]	; (b9c48 <__i2b+0x28>)
   b9c32:	f44f 71a0 	mov.w	r1, #320	; 0x140
   b9c36:	f7fd f9b5 	bl	b6fa4 <__assert_func>
   b9c3a:	2301      	movs	r3, #1
   b9c3c:	6144      	str	r4, [r0, #20]
   b9c3e:	6103      	str	r3, [r0, #16]
   b9c40:	bd10      	pop	{r4, pc}
   b9c42:	bf00      	nop
   b9c44:	000bb3f1 	.word	0x000bb3f1
   b9c48:	000bb47c 	.word	0x000bb47c

000b9c4c <__multiply>:
   b9c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9c50:	4691      	mov	r9, r2
   b9c52:	690a      	ldr	r2, [r1, #16]
   b9c54:	f8d9 3010 	ldr.w	r3, [r9, #16]
   b9c58:	429a      	cmp	r2, r3
   b9c5a:	bfb8      	it	lt
   b9c5c:	460b      	movlt	r3, r1
   b9c5e:	460c      	mov	r4, r1
   b9c60:	bfbc      	itt	lt
   b9c62:	464c      	movlt	r4, r9
   b9c64:	4699      	movlt	r9, r3
   b9c66:	6927      	ldr	r7, [r4, #16]
   b9c68:	f8d9 a010 	ldr.w	sl, [r9, #16]
   b9c6c:	68a3      	ldr	r3, [r4, #8]
   b9c6e:	6861      	ldr	r1, [r4, #4]
   b9c70:	eb07 060a 	add.w	r6, r7, sl
   b9c74:	42b3      	cmp	r3, r6
   b9c76:	b085      	sub	sp, #20
   b9c78:	bfb8      	it	lt
   b9c7a:	3101      	addlt	r1, #1
   b9c7c:	f7ff fe8e 	bl	b999c <_Balloc>
   b9c80:	b930      	cbnz	r0, b9c90 <__multiply+0x44>
   b9c82:	4602      	mov	r2, r0
   b9c84:	4b44      	ldr	r3, [pc, #272]	; (b9d98 <__multiply+0x14c>)
   b9c86:	4845      	ldr	r0, [pc, #276]	; (b9d9c <__multiply+0x150>)
   b9c88:	f240 115d 	movw	r1, #349	; 0x15d
   b9c8c:	f7fd f98a 	bl	b6fa4 <__assert_func>
   b9c90:	f100 0514 	add.w	r5, r0, #20
   b9c94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   b9c98:	462b      	mov	r3, r5
   b9c9a:	2200      	movs	r2, #0
   b9c9c:	4543      	cmp	r3, r8
   b9c9e:	d321      	bcc.n	b9ce4 <__multiply+0x98>
   b9ca0:	f104 0314 	add.w	r3, r4, #20
   b9ca4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   b9ca8:	f109 0314 	add.w	r3, r9, #20
   b9cac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   b9cb0:	9202      	str	r2, [sp, #8]
   b9cb2:	1b3a      	subs	r2, r7, r4
   b9cb4:	3a15      	subs	r2, #21
   b9cb6:	f022 0203 	bic.w	r2, r2, #3
   b9cba:	3204      	adds	r2, #4
   b9cbc:	f104 0115 	add.w	r1, r4, #21
   b9cc0:	428f      	cmp	r7, r1
   b9cc2:	bf38      	it	cc
   b9cc4:	2204      	movcc	r2, #4
   b9cc6:	9201      	str	r2, [sp, #4]
   b9cc8:	9a02      	ldr	r2, [sp, #8]
   b9cca:	9303      	str	r3, [sp, #12]
   b9ccc:	429a      	cmp	r2, r3
   b9cce:	d80c      	bhi.n	b9cea <__multiply+0x9e>
   b9cd0:	2e00      	cmp	r6, #0
   b9cd2:	dd03      	ble.n	b9cdc <__multiply+0x90>
   b9cd4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   b9cd8:	2b00      	cmp	r3, #0
   b9cda:	d05a      	beq.n	b9d92 <__multiply+0x146>
   b9cdc:	6106      	str	r6, [r0, #16]
   b9cde:	b005      	add	sp, #20
   b9ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9ce4:	f843 2b04 	str.w	r2, [r3], #4
   b9ce8:	e7d8      	b.n	b9c9c <__multiply+0x50>
   b9cea:	f8b3 a000 	ldrh.w	sl, [r3]
   b9cee:	f1ba 0f00 	cmp.w	sl, #0
   b9cf2:	d024      	beq.n	b9d3e <__multiply+0xf2>
   b9cf4:	f104 0e14 	add.w	lr, r4, #20
   b9cf8:	46a9      	mov	r9, r5
   b9cfa:	f04f 0c00 	mov.w	ip, #0
   b9cfe:	f85e 2b04 	ldr.w	r2, [lr], #4
   b9d02:	f8d9 1000 	ldr.w	r1, [r9]
   b9d06:	fa1f fb82 	uxth.w	fp, r2
   b9d0a:	b289      	uxth	r1, r1
   b9d0c:	fb0a 110b 	mla	r1, sl, fp, r1
   b9d10:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   b9d14:	f8d9 2000 	ldr.w	r2, [r9]
   b9d18:	4461      	add	r1, ip
   b9d1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   b9d1e:	fb0a c20b 	mla	r2, sl, fp, ip
   b9d22:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   b9d26:	b289      	uxth	r1, r1
   b9d28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   b9d2c:	4577      	cmp	r7, lr
   b9d2e:	f849 1b04 	str.w	r1, [r9], #4
   b9d32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   b9d36:	d8e2      	bhi.n	b9cfe <__multiply+0xb2>
   b9d38:	9a01      	ldr	r2, [sp, #4]
   b9d3a:	f845 c002 	str.w	ip, [r5, r2]
   b9d3e:	9a03      	ldr	r2, [sp, #12]
   b9d40:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   b9d44:	3304      	adds	r3, #4
   b9d46:	f1b9 0f00 	cmp.w	r9, #0
   b9d4a:	d020      	beq.n	b9d8e <__multiply+0x142>
   b9d4c:	6829      	ldr	r1, [r5, #0]
   b9d4e:	f104 0c14 	add.w	ip, r4, #20
   b9d52:	46ae      	mov	lr, r5
   b9d54:	f04f 0a00 	mov.w	sl, #0
   b9d58:	f8bc b000 	ldrh.w	fp, [ip]
   b9d5c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   b9d60:	fb09 220b 	mla	r2, r9, fp, r2
   b9d64:	4492      	add	sl, r2
   b9d66:	b289      	uxth	r1, r1
   b9d68:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   b9d6c:	f84e 1b04 	str.w	r1, [lr], #4
   b9d70:	f85c 2b04 	ldr.w	r2, [ip], #4
   b9d74:	f8be 1000 	ldrh.w	r1, [lr]
   b9d78:	0c12      	lsrs	r2, r2, #16
   b9d7a:	fb09 1102 	mla	r1, r9, r2, r1
   b9d7e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   b9d82:	4567      	cmp	r7, ip
   b9d84:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   b9d88:	d8e6      	bhi.n	b9d58 <__multiply+0x10c>
   b9d8a:	9a01      	ldr	r2, [sp, #4]
   b9d8c:	50a9      	str	r1, [r5, r2]
   b9d8e:	3504      	adds	r5, #4
   b9d90:	e79a      	b.n	b9cc8 <__multiply+0x7c>
   b9d92:	3e01      	subs	r6, #1
   b9d94:	e79c      	b.n	b9cd0 <__multiply+0x84>
   b9d96:	bf00      	nop
   b9d98:	000bb3f1 	.word	0x000bb3f1
   b9d9c:	000bb47c 	.word	0x000bb47c

000b9da0 <__pow5mult>:
   b9da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9da4:	4615      	mov	r5, r2
   b9da6:	f012 0203 	ands.w	r2, r2, #3
   b9daa:	4606      	mov	r6, r0
   b9dac:	460f      	mov	r7, r1
   b9dae:	d007      	beq.n	b9dc0 <__pow5mult+0x20>
   b9db0:	4c25      	ldr	r4, [pc, #148]	; (b9e48 <__pow5mult+0xa8>)
   b9db2:	3a01      	subs	r2, #1
   b9db4:	2300      	movs	r3, #0
   b9db6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   b9dba:	f7ff fe51 	bl	b9a60 <__multadd>
   b9dbe:	4607      	mov	r7, r0
   b9dc0:	10ad      	asrs	r5, r5, #2
   b9dc2:	d03d      	beq.n	b9e40 <__pow5mult+0xa0>
   b9dc4:	6a74      	ldr	r4, [r6, #36]	; 0x24
   b9dc6:	b97c      	cbnz	r4, b9de8 <__pow5mult+0x48>
   b9dc8:	2010      	movs	r0, #16
   b9dca:	f7fd f8bb 	bl	b6f44 <malloc>
   b9dce:	4602      	mov	r2, r0
   b9dd0:	6270      	str	r0, [r6, #36]	; 0x24
   b9dd2:	b928      	cbnz	r0, b9de0 <__pow5mult+0x40>
   b9dd4:	4b1d      	ldr	r3, [pc, #116]	; (b9e4c <__pow5mult+0xac>)
   b9dd6:	481e      	ldr	r0, [pc, #120]	; (b9e50 <__pow5mult+0xb0>)
   b9dd8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   b9ddc:	f7fd f8e2 	bl	b6fa4 <__assert_func>
   b9de0:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b9de4:	6004      	str	r4, [r0, #0]
   b9de6:	60c4      	str	r4, [r0, #12]
   b9de8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   b9dec:	f8d8 4008 	ldr.w	r4, [r8, #8]
   b9df0:	b94c      	cbnz	r4, b9e06 <__pow5mult+0x66>
   b9df2:	f240 2171 	movw	r1, #625	; 0x271
   b9df6:	4630      	mov	r0, r6
   b9df8:	f7ff ff12 	bl	b9c20 <__i2b>
   b9dfc:	2300      	movs	r3, #0
   b9dfe:	f8c8 0008 	str.w	r0, [r8, #8]
   b9e02:	4604      	mov	r4, r0
   b9e04:	6003      	str	r3, [r0, #0]
   b9e06:	f04f 0900 	mov.w	r9, #0
   b9e0a:	07eb      	lsls	r3, r5, #31
   b9e0c:	d50a      	bpl.n	b9e24 <__pow5mult+0x84>
   b9e0e:	4639      	mov	r1, r7
   b9e10:	4622      	mov	r2, r4
   b9e12:	4630      	mov	r0, r6
   b9e14:	f7ff ff1a 	bl	b9c4c <__multiply>
   b9e18:	4639      	mov	r1, r7
   b9e1a:	4680      	mov	r8, r0
   b9e1c:	4630      	mov	r0, r6
   b9e1e:	f7ff fdfd 	bl	b9a1c <_Bfree>
   b9e22:	4647      	mov	r7, r8
   b9e24:	106d      	asrs	r5, r5, #1
   b9e26:	d00b      	beq.n	b9e40 <__pow5mult+0xa0>
   b9e28:	6820      	ldr	r0, [r4, #0]
   b9e2a:	b938      	cbnz	r0, b9e3c <__pow5mult+0x9c>
   b9e2c:	4622      	mov	r2, r4
   b9e2e:	4621      	mov	r1, r4
   b9e30:	4630      	mov	r0, r6
   b9e32:	f7ff ff0b 	bl	b9c4c <__multiply>
   b9e36:	6020      	str	r0, [r4, #0]
   b9e38:	f8c0 9000 	str.w	r9, [r0]
   b9e3c:	4604      	mov	r4, r0
   b9e3e:	e7e4      	b.n	b9e0a <__pow5mult+0x6a>
   b9e40:	4638      	mov	r0, r7
   b9e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9e46:	bf00      	nop
   b9e48:	000bb5c8 	.word	0x000bb5c8
   b9e4c:	000bb221 	.word	0x000bb221
   b9e50:	000bb47c 	.word	0x000bb47c

000b9e54 <__lshift>:
   b9e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9e58:	460c      	mov	r4, r1
   b9e5a:	6849      	ldr	r1, [r1, #4]
   b9e5c:	6923      	ldr	r3, [r4, #16]
   b9e5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   b9e62:	68a3      	ldr	r3, [r4, #8]
   b9e64:	4607      	mov	r7, r0
   b9e66:	4691      	mov	r9, r2
   b9e68:	ea4f 1a62 	mov.w	sl, r2, asr #5
   b9e6c:	f108 0601 	add.w	r6, r8, #1
   b9e70:	42b3      	cmp	r3, r6
   b9e72:	db0b      	blt.n	b9e8c <__lshift+0x38>
   b9e74:	4638      	mov	r0, r7
   b9e76:	f7ff fd91 	bl	b999c <_Balloc>
   b9e7a:	4605      	mov	r5, r0
   b9e7c:	b948      	cbnz	r0, b9e92 <__lshift+0x3e>
   b9e7e:	4602      	mov	r2, r0
   b9e80:	4b2a      	ldr	r3, [pc, #168]	; (b9f2c <__lshift+0xd8>)
   b9e82:	482b      	ldr	r0, [pc, #172]	; (b9f30 <__lshift+0xdc>)
   b9e84:	f240 11d9 	movw	r1, #473	; 0x1d9
   b9e88:	f7fd f88c 	bl	b6fa4 <__assert_func>
   b9e8c:	3101      	adds	r1, #1
   b9e8e:	005b      	lsls	r3, r3, #1
   b9e90:	e7ee      	b.n	b9e70 <__lshift+0x1c>
   b9e92:	2300      	movs	r3, #0
   b9e94:	f100 0114 	add.w	r1, r0, #20
   b9e98:	f100 0210 	add.w	r2, r0, #16
   b9e9c:	4618      	mov	r0, r3
   b9e9e:	4553      	cmp	r3, sl
   b9ea0:	db37      	blt.n	b9f12 <__lshift+0xbe>
   b9ea2:	6920      	ldr	r0, [r4, #16]
   b9ea4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   b9ea8:	f104 0314 	add.w	r3, r4, #20
   b9eac:	f019 091f 	ands.w	r9, r9, #31
   b9eb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   b9eb4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b9eb8:	d02f      	beq.n	b9f1a <__lshift+0xc6>
   b9eba:	f1c9 0e20 	rsb	lr, r9, #32
   b9ebe:	468a      	mov	sl, r1
   b9ec0:	f04f 0c00 	mov.w	ip, #0
   b9ec4:	681a      	ldr	r2, [r3, #0]
   b9ec6:	fa02 f209 	lsl.w	r2, r2, r9
   b9eca:	ea42 020c 	orr.w	r2, r2, ip
   b9ece:	f84a 2b04 	str.w	r2, [sl], #4
   b9ed2:	f853 2b04 	ldr.w	r2, [r3], #4
   b9ed6:	4298      	cmp	r0, r3
   b9ed8:	fa22 fc0e 	lsr.w	ip, r2, lr
   b9edc:	d8f2      	bhi.n	b9ec4 <__lshift+0x70>
   b9ede:	1b03      	subs	r3, r0, r4
   b9ee0:	3b15      	subs	r3, #21
   b9ee2:	f023 0303 	bic.w	r3, r3, #3
   b9ee6:	3304      	adds	r3, #4
   b9ee8:	f104 0215 	add.w	r2, r4, #21
   b9eec:	4290      	cmp	r0, r2
   b9eee:	bf38      	it	cc
   b9ef0:	2304      	movcc	r3, #4
   b9ef2:	f841 c003 	str.w	ip, [r1, r3]
   b9ef6:	f1bc 0f00 	cmp.w	ip, #0
   b9efa:	d001      	beq.n	b9f00 <__lshift+0xac>
   b9efc:	f108 0602 	add.w	r6, r8, #2
   b9f00:	3e01      	subs	r6, #1
   b9f02:	4638      	mov	r0, r7
   b9f04:	612e      	str	r6, [r5, #16]
   b9f06:	4621      	mov	r1, r4
   b9f08:	f7ff fd88 	bl	b9a1c <_Bfree>
   b9f0c:	4628      	mov	r0, r5
   b9f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b9f12:	f842 0f04 	str.w	r0, [r2, #4]!
   b9f16:	3301      	adds	r3, #1
   b9f18:	e7c1      	b.n	b9e9e <__lshift+0x4a>
   b9f1a:	3904      	subs	r1, #4
   b9f1c:	f853 2b04 	ldr.w	r2, [r3], #4
   b9f20:	f841 2f04 	str.w	r2, [r1, #4]!
   b9f24:	4298      	cmp	r0, r3
   b9f26:	d8f9      	bhi.n	b9f1c <__lshift+0xc8>
   b9f28:	e7ea      	b.n	b9f00 <__lshift+0xac>
   b9f2a:	bf00      	nop
   b9f2c:	000bb3f1 	.word	0x000bb3f1
   b9f30:	000bb47c 	.word	0x000bb47c

000b9f34 <__mcmp>:
   b9f34:	b530      	push	{r4, r5, lr}
   b9f36:	6902      	ldr	r2, [r0, #16]
   b9f38:	690c      	ldr	r4, [r1, #16]
   b9f3a:	1b12      	subs	r2, r2, r4
   b9f3c:	d10e      	bne.n	b9f5c <__mcmp+0x28>
   b9f3e:	f100 0314 	add.w	r3, r0, #20
   b9f42:	3114      	adds	r1, #20
   b9f44:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   b9f48:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   b9f4c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   b9f50:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   b9f54:	42a5      	cmp	r5, r4
   b9f56:	d003      	beq.n	b9f60 <__mcmp+0x2c>
   b9f58:	d305      	bcc.n	b9f66 <__mcmp+0x32>
   b9f5a:	2201      	movs	r2, #1
   b9f5c:	4610      	mov	r0, r2
   b9f5e:	bd30      	pop	{r4, r5, pc}
   b9f60:	4283      	cmp	r3, r0
   b9f62:	d3f3      	bcc.n	b9f4c <__mcmp+0x18>
   b9f64:	e7fa      	b.n	b9f5c <__mcmp+0x28>
   b9f66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9f6a:	e7f7      	b.n	b9f5c <__mcmp+0x28>

000b9f6c <__mdiff>:
   b9f6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9f70:	460c      	mov	r4, r1
   b9f72:	4606      	mov	r6, r0
   b9f74:	4611      	mov	r1, r2
   b9f76:	4620      	mov	r0, r4
   b9f78:	4690      	mov	r8, r2
   b9f7a:	f7ff ffdb 	bl	b9f34 <__mcmp>
   b9f7e:	1e05      	subs	r5, r0, #0
   b9f80:	d110      	bne.n	b9fa4 <__mdiff+0x38>
   b9f82:	4629      	mov	r1, r5
   b9f84:	4630      	mov	r0, r6
   b9f86:	f7ff fd09 	bl	b999c <_Balloc>
   b9f8a:	b930      	cbnz	r0, b9f9a <__mdiff+0x2e>
   b9f8c:	4b3a      	ldr	r3, [pc, #232]	; (ba078 <__mdiff+0x10c>)
   b9f8e:	4602      	mov	r2, r0
   b9f90:	f240 2132 	movw	r1, #562	; 0x232
   b9f94:	4839      	ldr	r0, [pc, #228]	; (ba07c <__mdiff+0x110>)
   b9f96:	f7fd f805 	bl	b6fa4 <__assert_func>
   b9f9a:	2301      	movs	r3, #1
   b9f9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
   b9fa0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9fa4:	bfa4      	itt	ge
   b9fa6:	4643      	movge	r3, r8
   b9fa8:	46a0      	movge	r8, r4
   b9faa:	4630      	mov	r0, r6
   b9fac:	f8d8 1004 	ldr.w	r1, [r8, #4]
   b9fb0:	bfa6      	itte	ge
   b9fb2:	461c      	movge	r4, r3
   b9fb4:	2500      	movge	r5, #0
   b9fb6:	2501      	movlt	r5, #1
   b9fb8:	f7ff fcf0 	bl	b999c <_Balloc>
   b9fbc:	b920      	cbnz	r0, b9fc8 <__mdiff+0x5c>
   b9fbe:	4b2e      	ldr	r3, [pc, #184]	; (ba078 <__mdiff+0x10c>)
   b9fc0:	4602      	mov	r2, r0
   b9fc2:	f44f 7110 	mov.w	r1, #576	; 0x240
   b9fc6:	e7e5      	b.n	b9f94 <__mdiff+0x28>
   b9fc8:	f8d8 7010 	ldr.w	r7, [r8, #16]
   b9fcc:	6926      	ldr	r6, [r4, #16]
   b9fce:	60c5      	str	r5, [r0, #12]
   b9fd0:	f104 0914 	add.w	r9, r4, #20
   b9fd4:	f108 0514 	add.w	r5, r8, #20
   b9fd8:	f100 0e14 	add.w	lr, r0, #20
   b9fdc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   b9fe0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   b9fe4:	f108 0210 	add.w	r2, r8, #16
   b9fe8:	46f2      	mov	sl, lr
   b9fea:	2100      	movs	r1, #0
   b9fec:	f859 3b04 	ldr.w	r3, [r9], #4
   b9ff0:	f852 bf04 	ldr.w	fp, [r2, #4]!
   b9ff4:	fa1f f883 	uxth.w	r8, r3
   b9ff8:	fa11 f18b 	uxtah	r1, r1, fp
   b9ffc:	0c1b      	lsrs	r3, r3, #16
   b9ffe:	eba1 0808 	sub.w	r8, r1, r8
   ba002:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   ba006:	eb03 4328 	add.w	r3, r3, r8, asr #16
   ba00a:	fa1f f888 	uxth.w	r8, r8
   ba00e:	1419      	asrs	r1, r3, #16
   ba010:	454e      	cmp	r6, r9
   ba012:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   ba016:	f84a 3b04 	str.w	r3, [sl], #4
   ba01a:	d8e7      	bhi.n	b9fec <__mdiff+0x80>
   ba01c:	1b33      	subs	r3, r6, r4
   ba01e:	3b15      	subs	r3, #21
   ba020:	f023 0303 	bic.w	r3, r3, #3
   ba024:	3304      	adds	r3, #4
   ba026:	3415      	adds	r4, #21
   ba028:	42a6      	cmp	r6, r4
   ba02a:	bf38      	it	cc
   ba02c:	2304      	movcc	r3, #4
   ba02e:	441d      	add	r5, r3
   ba030:	4473      	add	r3, lr
   ba032:	469e      	mov	lr, r3
   ba034:	462e      	mov	r6, r5
   ba036:	4566      	cmp	r6, ip
   ba038:	d30e      	bcc.n	ba058 <__mdiff+0xec>
   ba03a:	f10c 0203 	add.w	r2, ip, #3
   ba03e:	1b52      	subs	r2, r2, r5
   ba040:	f022 0203 	bic.w	r2, r2, #3
   ba044:	3d03      	subs	r5, #3
   ba046:	45ac      	cmp	ip, r5
   ba048:	bf38      	it	cc
   ba04a:	2200      	movcc	r2, #0
   ba04c:	441a      	add	r2, r3
   ba04e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   ba052:	b17b      	cbz	r3, ba074 <__mdiff+0x108>
   ba054:	6107      	str	r7, [r0, #16]
   ba056:	e7a3      	b.n	b9fa0 <__mdiff+0x34>
   ba058:	f856 8b04 	ldr.w	r8, [r6], #4
   ba05c:	fa11 f288 	uxtah	r2, r1, r8
   ba060:	1414      	asrs	r4, r2, #16
   ba062:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   ba066:	b292      	uxth	r2, r2
   ba068:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   ba06c:	f84e 2b04 	str.w	r2, [lr], #4
   ba070:	1421      	asrs	r1, r4, #16
   ba072:	e7e0      	b.n	ba036 <__mdiff+0xca>
   ba074:	3f01      	subs	r7, #1
   ba076:	e7ea      	b.n	ba04e <__mdiff+0xe2>
   ba078:	000bb3f1 	.word	0x000bb3f1
   ba07c:	000bb47c 	.word	0x000bb47c

000ba080 <__ulp>:
   ba080:	b082      	sub	sp, #8
   ba082:	ed8d 0b00 	vstr	d0, [sp]
   ba086:	9b01      	ldr	r3, [sp, #4]
   ba088:	4912      	ldr	r1, [pc, #72]	; (ba0d4 <__ulp+0x54>)
   ba08a:	4019      	ands	r1, r3
   ba08c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   ba090:	2900      	cmp	r1, #0
   ba092:	dd05      	ble.n	ba0a0 <__ulp+0x20>
   ba094:	2200      	movs	r2, #0
   ba096:	460b      	mov	r3, r1
   ba098:	ec43 2b10 	vmov	d0, r2, r3
   ba09c:	b002      	add	sp, #8
   ba09e:	4770      	bx	lr
   ba0a0:	4249      	negs	r1, r1
   ba0a2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   ba0a6:	ea4f 5021 	mov.w	r0, r1, asr #20
   ba0aa:	f04f 0200 	mov.w	r2, #0
   ba0ae:	f04f 0300 	mov.w	r3, #0
   ba0b2:	da04      	bge.n	ba0be <__ulp+0x3e>
   ba0b4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   ba0b8:	fa41 f300 	asr.w	r3, r1, r0
   ba0bc:	e7ec      	b.n	ba098 <__ulp+0x18>
   ba0be:	f1a0 0114 	sub.w	r1, r0, #20
   ba0c2:	291e      	cmp	r1, #30
   ba0c4:	bfda      	itte	le
   ba0c6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   ba0ca:	fa20 f101 	lsrle.w	r1, r0, r1
   ba0ce:	2101      	movgt	r1, #1
   ba0d0:	460a      	mov	r2, r1
   ba0d2:	e7e1      	b.n	ba098 <__ulp+0x18>
   ba0d4:	7ff00000 	.word	0x7ff00000

000ba0d8 <__b2d>:
   ba0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba0da:	6905      	ldr	r5, [r0, #16]
   ba0dc:	f100 0714 	add.w	r7, r0, #20
   ba0e0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   ba0e4:	1f2e      	subs	r6, r5, #4
   ba0e6:	f855 4c04 	ldr.w	r4, [r5, #-4]
   ba0ea:	4620      	mov	r0, r4
   ba0ec:	f7ff fd48 	bl	b9b80 <__hi0bits>
   ba0f0:	f1c0 0320 	rsb	r3, r0, #32
   ba0f4:	280a      	cmp	r0, #10
   ba0f6:	f8df c07c 	ldr.w	ip, [pc, #124]	; ba174 <__b2d+0x9c>
   ba0fa:	600b      	str	r3, [r1, #0]
   ba0fc:	dc14      	bgt.n	ba128 <__b2d+0x50>
   ba0fe:	f1c0 0e0b 	rsb	lr, r0, #11
   ba102:	fa24 f10e 	lsr.w	r1, r4, lr
   ba106:	42b7      	cmp	r7, r6
   ba108:	ea41 030c 	orr.w	r3, r1, ip
   ba10c:	bf34      	ite	cc
   ba10e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   ba112:	2100      	movcs	r1, #0
   ba114:	3015      	adds	r0, #21
   ba116:	fa04 f000 	lsl.w	r0, r4, r0
   ba11a:	fa21 f10e 	lsr.w	r1, r1, lr
   ba11e:	ea40 0201 	orr.w	r2, r0, r1
   ba122:	ec43 2b10 	vmov	d0, r2, r3
   ba126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   ba128:	42b7      	cmp	r7, r6
   ba12a:	bf3a      	itte	cc
   ba12c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   ba130:	f1a5 0608 	subcc.w	r6, r5, #8
   ba134:	2100      	movcs	r1, #0
   ba136:	380b      	subs	r0, #11
   ba138:	d017      	beq.n	ba16a <__b2d+0x92>
   ba13a:	f1c0 0c20 	rsb	ip, r0, #32
   ba13e:	fa04 f500 	lsl.w	r5, r4, r0
   ba142:	42be      	cmp	r6, r7
   ba144:	fa21 f40c 	lsr.w	r4, r1, ip
   ba148:	ea45 0504 	orr.w	r5, r5, r4
   ba14c:	bf8c      	ite	hi
   ba14e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   ba152:	2400      	movls	r4, #0
   ba154:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   ba158:	fa01 f000 	lsl.w	r0, r1, r0
   ba15c:	fa24 f40c 	lsr.w	r4, r4, ip
   ba160:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   ba164:	ea40 0204 	orr.w	r2, r0, r4
   ba168:	e7db      	b.n	ba122 <__b2d+0x4a>
   ba16a:	ea44 030c 	orr.w	r3, r4, ip
   ba16e:	460a      	mov	r2, r1
   ba170:	e7d7      	b.n	ba122 <__b2d+0x4a>
   ba172:	bf00      	nop
   ba174:	3ff00000 	.word	0x3ff00000

000ba178 <__d2b>:
   ba178:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   ba17c:	4689      	mov	r9, r1
   ba17e:	2101      	movs	r1, #1
   ba180:	ec57 6b10 	vmov	r6, r7, d0
   ba184:	4690      	mov	r8, r2
   ba186:	f7ff fc09 	bl	b999c <_Balloc>
   ba18a:	4604      	mov	r4, r0
   ba18c:	b930      	cbnz	r0, ba19c <__d2b+0x24>
   ba18e:	4602      	mov	r2, r0
   ba190:	4b25      	ldr	r3, [pc, #148]	; (ba228 <__d2b+0xb0>)
   ba192:	4826      	ldr	r0, [pc, #152]	; (ba22c <__d2b+0xb4>)
   ba194:	f240 310a 	movw	r1, #778	; 0x30a
   ba198:	f7fc ff04 	bl	b6fa4 <__assert_func>
   ba19c:	f3c7 550a 	ubfx	r5, r7, #20, #11
   ba1a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
   ba1a4:	bb35      	cbnz	r5, ba1f4 <__d2b+0x7c>
   ba1a6:	2e00      	cmp	r6, #0
   ba1a8:	9301      	str	r3, [sp, #4]
   ba1aa:	d028      	beq.n	ba1fe <__d2b+0x86>
   ba1ac:	4668      	mov	r0, sp
   ba1ae:	9600      	str	r6, [sp, #0]
   ba1b0:	f7ff fd06 	bl	b9bc0 <__lo0bits>
   ba1b4:	9900      	ldr	r1, [sp, #0]
   ba1b6:	b300      	cbz	r0, ba1fa <__d2b+0x82>
   ba1b8:	9a01      	ldr	r2, [sp, #4]
   ba1ba:	f1c0 0320 	rsb	r3, r0, #32
   ba1be:	fa02 f303 	lsl.w	r3, r2, r3
   ba1c2:	430b      	orrs	r3, r1
   ba1c4:	40c2      	lsrs	r2, r0
   ba1c6:	6163      	str	r3, [r4, #20]
   ba1c8:	9201      	str	r2, [sp, #4]
   ba1ca:	9b01      	ldr	r3, [sp, #4]
   ba1cc:	61a3      	str	r3, [r4, #24]
   ba1ce:	2b00      	cmp	r3, #0
   ba1d0:	bf14      	ite	ne
   ba1d2:	2202      	movne	r2, #2
   ba1d4:	2201      	moveq	r2, #1
   ba1d6:	6122      	str	r2, [r4, #16]
   ba1d8:	b1d5      	cbz	r5, ba210 <__d2b+0x98>
   ba1da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   ba1de:	4405      	add	r5, r0
   ba1e0:	f8c9 5000 	str.w	r5, [r9]
   ba1e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   ba1e8:	f8c8 0000 	str.w	r0, [r8]
   ba1ec:	4620      	mov	r0, r4
   ba1ee:	b003      	add	sp, #12
   ba1f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   ba1f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   ba1f8:	e7d5      	b.n	ba1a6 <__d2b+0x2e>
   ba1fa:	6161      	str	r1, [r4, #20]
   ba1fc:	e7e5      	b.n	ba1ca <__d2b+0x52>
   ba1fe:	a801      	add	r0, sp, #4
   ba200:	f7ff fcde 	bl	b9bc0 <__lo0bits>
   ba204:	9b01      	ldr	r3, [sp, #4]
   ba206:	6163      	str	r3, [r4, #20]
   ba208:	2201      	movs	r2, #1
   ba20a:	6122      	str	r2, [r4, #16]
   ba20c:	3020      	adds	r0, #32
   ba20e:	e7e3      	b.n	ba1d8 <__d2b+0x60>
   ba210:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   ba214:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   ba218:	f8c9 0000 	str.w	r0, [r9]
   ba21c:	6918      	ldr	r0, [r3, #16]
   ba21e:	f7ff fcaf 	bl	b9b80 <__hi0bits>
   ba222:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   ba226:	e7df      	b.n	ba1e8 <__d2b+0x70>
   ba228:	000bb3f1 	.word	0x000bb3f1
   ba22c:	000bb47c 	.word	0x000bb47c

000ba230 <__ratio>:
   ba230:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba234:	4688      	mov	r8, r1
   ba236:	4669      	mov	r1, sp
   ba238:	4681      	mov	r9, r0
   ba23a:	f7ff ff4d 	bl	ba0d8 <__b2d>
   ba23e:	a901      	add	r1, sp, #4
   ba240:	4640      	mov	r0, r8
   ba242:	ec55 4b10 	vmov	r4, r5, d0
   ba246:	f7ff ff47 	bl	ba0d8 <__b2d>
   ba24a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   ba24e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   ba252:	eba3 0c02 	sub.w	ip, r3, r2
   ba256:	e9dd 3200 	ldrd	r3, r2, [sp]
   ba25a:	1a9b      	subs	r3, r3, r2
   ba25c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   ba260:	ec51 0b10 	vmov	r0, r1, d0
   ba264:	2b00      	cmp	r3, #0
   ba266:	bfd6      	itet	le
   ba268:	460a      	movle	r2, r1
   ba26a:	462a      	movgt	r2, r5
   ba26c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   ba270:	468b      	mov	fp, r1
   ba272:	462f      	mov	r7, r5
   ba274:	bfd4      	ite	le
   ba276:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   ba27a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   ba27e:	4620      	mov	r0, r4
   ba280:	ee10 2a10 	vmov	r2, s0
   ba284:	465b      	mov	r3, fp
   ba286:	4639      	mov	r1, r7
   ba288:	f7fa f9b0 	bl	b45ec <__aeabi_ddiv>
   ba28c:	ec41 0b10 	vmov	d0, r0, r1
   ba290:	b003      	add	sp, #12
   ba292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000ba296 <__copybits>:
   ba296:	3901      	subs	r1, #1
   ba298:	b570      	push	{r4, r5, r6, lr}
   ba29a:	1149      	asrs	r1, r1, #5
   ba29c:	6914      	ldr	r4, [r2, #16]
   ba29e:	3101      	adds	r1, #1
   ba2a0:	f102 0314 	add.w	r3, r2, #20
   ba2a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   ba2a8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   ba2ac:	1f05      	subs	r5, r0, #4
   ba2ae:	42a3      	cmp	r3, r4
   ba2b0:	d30c      	bcc.n	ba2cc <__copybits+0x36>
   ba2b2:	1aa3      	subs	r3, r4, r2
   ba2b4:	3b11      	subs	r3, #17
   ba2b6:	f023 0303 	bic.w	r3, r3, #3
   ba2ba:	3211      	adds	r2, #17
   ba2bc:	42a2      	cmp	r2, r4
   ba2be:	bf88      	it	hi
   ba2c0:	2300      	movhi	r3, #0
   ba2c2:	4418      	add	r0, r3
   ba2c4:	2300      	movs	r3, #0
   ba2c6:	4288      	cmp	r0, r1
   ba2c8:	d305      	bcc.n	ba2d6 <__copybits+0x40>
   ba2ca:	bd70      	pop	{r4, r5, r6, pc}
   ba2cc:	f853 6b04 	ldr.w	r6, [r3], #4
   ba2d0:	f845 6f04 	str.w	r6, [r5, #4]!
   ba2d4:	e7eb      	b.n	ba2ae <__copybits+0x18>
   ba2d6:	f840 3b04 	str.w	r3, [r0], #4
   ba2da:	e7f4      	b.n	ba2c6 <__copybits+0x30>

000ba2dc <__any_on>:
   ba2dc:	f100 0214 	add.w	r2, r0, #20
   ba2e0:	6900      	ldr	r0, [r0, #16]
   ba2e2:	114b      	asrs	r3, r1, #5
   ba2e4:	4298      	cmp	r0, r3
   ba2e6:	b510      	push	{r4, lr}
   ba2e8:	db11      	blt.n	ba30e <__any_on+0x32>
   ba2ea:	dd0a      	ble.n	ba302 <__any_on+0x26>
   ba2ec:	f011 011f 	ands.w	r1, r1, #31
   ba2f0:	d007      	beq.n	ba302 <__any_on+0x26>
   ba2f2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   ba2f6:	fa24 f001 	lsr.w	r0, r4, r1
   ba2fa:	fa00 f101 	lsl.w	r1, r0, r1
   ba2fe:	428c      	cmp	r4, r1
   ba300:	d10b      	bne.n	ba31a <__any_on+0x3e>
   ba302:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   ba306:	4293      	cmp	r3, r2
   ba308:	d803      	bhi.n	ba312 <__any_on+0x36>
   ba30a:	2000      	movs	r0, #0
   ba30c:	bd10      	pop	{r4, pc}
   ba30e:	4603      	mov	r3, r0
   ba310:	e7f7      	b.n	ba302 <__any_on+0x26>
   ba312:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   ba316:	2900      	cmp	r1, #0
   ba318:	d0f5      	beq.n	ba306 <__any_on+0x2a>
   ba31a:	2001      	movs	r0, #1
   ba31c:	e7f6      	b.n	ba30c <__any_on+0x30>

000ba31e <_calloc_r>:
   ba31e:	b513      	push	{r0, r1, r4, lr}
   ba320:	434a      	muls	r2, r1
   ba322:	4611      	mov	r1, r2
   ba324:	9201      	str	r2, [sp, #4]
   ba326:	f7fc fe2d 	bl	b6f84 <_malloc_r>
   ba32a:	4604      	mov	r4, r0
   ba32c:	b118      	cbz	r0, ba336 <_calloc_r+0x18>
   ba32e:	9a01      	ldr	r2, [sp, #4]
   ba330:	2100      	movs	r1, #0
   ba332:	f7fe f8d0 	bl	b84d6 <memset>
   ba336:	4620      	mov	r0, r4
   ba338:	b002      	add	sp, #8
   ba33a:	bd10      	pop	{r4, pc}
   ba33c:	0000      	movs	r0, r0
	...

000ba340 <nan>:
   ba340:	ed9f 0b01 	vldr	d0, [pc, #4]	; ba348 <nan+0x8>
   ba344:	4770      	bx	lr
   ba346:	bf00      	nop
   ba348:	00000000 	.word	0x00000000
   ba34c:	7ff80000 	.word	0x7ff80000

000ba350 <__ascii_wctomb>:
   ba350:	b149      	cbz	r1, ba366 <__ascii_wctomb+0x16>
   ba352:	2aff      	cmp	r2, #255	; 0xff
   ba354:	bf85      	ittet	hi
   ba356:	238a      	movhi	r3, #138	; 0x8a
   ba358:	6003      	strhi	r3, [r0, #0]
   ba35a:	700a      	strbls	r2, [r1, #0]
   ba35c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   ba360:	bf98      	it	ls
   ba362:	2001      	movls	r0, #1
   ba364:	4770      	bx	lr
   ba366:	4608      	mov	r0, r1
   ba368:	4770      	bx	lr

000ba36a <link_code_end>:
	...

000ba36c <link_const_data_start>:
   ba36c:	514d0400 	.word	0x514d0400
   ba370:	00045454 	.word	0x00045454
   ba374:	49514d06 	.word	0x49514d06
   ba378:	03706473 	.word	0x03706473

000ba37c <dynalib_user>:
   ba37c:	000b4a3d 000b4a79 000b4aa1 000b4aa5     =J..yJ...J...J..
   ba38c:	00000000 6c6c6143 206e6f20 65727570     ....Call on pure
   ba39c:	72697620 6c617574 00732500 32746f49      virtual.%s.Iot2
   ba3ac:	00333230 6974614c 65647574 2e25203a     023.Latitude: %.
   ba3bc:	4c0a6634 69676e6f 65647574 2e25203a     4f.Longitude: %.
   ba3cc:	30006634 6c003100 742e6261 63776568     4f.0.1.lab.thewc
   ba3dc:	6f632e6c 0000006d                       l.com...

000ba3e4 <_ZTV5Timer>:
	...
   ba3ec:	000b4c11 000b4c65 000b4af9              .L..eL...J..

000ba3f8 <_ZL4font>:
   ba3f8:	00000000 4f5b3e00 6b3e3e5b 1c3e6b4f     .....>[O[>>kOk>.
   ba408:	1c3e7c3e 3c7e3c18 7d571c18 5e1c1c57     >|>..<~<..W}W..^
   ba418:	001c5e7f 00183c18 e7c3e7ff 241800ff     .^...<.........$
   ba428:	e7ff0018 30ffe7db 0e063a48 29792926     .......0H:..&)y)
   ba438:	057f4026 7f400705 5a3f2505 5a3ce73c     &@....@..%?Z<.<Z
   ba448:	1c1c3e7f 1c1c0808 22147f3e 5f14227f     .>......>.."."._
   ba458:	5f5f005f 017f0906 8966007f 60606a95     _.__......f..j``
   ba468:	94606060 94a2ffa2 047e0408 7e201008     ```.......~... ~
   ba478:	08081020 08081c2a 08082a1c 1010101e      ...*....*......
   ba488:	0c1e0c10 38300c1e 0630383e 060e3e0e     ......08>80..>..
   ba498:	00000000 5f000000 07000000 14000700     ......._........
   ba4a8:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
   ba4b8:	00502056 00030708 41221c00 22410000     V P......."A..A"
   ba4c8:	1c2a001c 082a1c7f 08083e08 30708000     ..*...*..>....p0
   ba4d8:	08080800 00000808 20006060 02040810     ........``. ....
   ba4e8:	4549513e 7f42003e 49720040 21464949     >QIE>.B.@.rIIIF!
   ba4f8:	334d4941 7f121418 45452710 4a3c3945     AIM3.....'EEE9<J
   ba508:	41314949 07091121 49494936 49494636     II1A!...6III6FII
   ba518:	00001e29 00000014 00003440 22140800     ).......@4....."
   ba528:	14141441 41001414 02081422 06095901     A......A"....Y..
   ba538:	595d413e 11127c4e 497f7c12 3e364949     >A]YN|...|.III6>
   ba548:	22414141 4141417f 49497f3e 097f4149     AAA".AAA>.IIIA..
   ba558:	3e010909 73514141 0808087f 7f41007f     ...>AAQs......A.
   ba568:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
   ba578:	1c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
   ba588:	0909097f 51413e06 097f5e21 26462919     .....>AQ!^...)F&
   ba598:	32494949 017f0103 40403f03 201f3f40     III2.....?@@@?. 
   ba5a8:	3f1f2040 3f403840 14081463 78040363     @ .?@8@?c...c..x
   ba5b8:	59610304 00434d49 4141417f 10080402     ..aYIMC..AAA....
   ba5c8:	41410020 02047f41 40040201 40404040      .AAA......@@@@@
   ba5d8:	08070300 54542000 287f4078 38384444     ..... TTx@.(DD88
   ba5e8:	28444444 28444438 5454387f 08001854     DDD(8DD(.8TTT...
   ba5f8:	1802097e 789ca4a4 0404087f 7d440078     ~......x....x.D}
   ba608:	40200040 7f003d40 00442810 407f4100     @. @@=...(D..A.@
   ba618:	78047c00 087c7804 38780404 38444444     .|.x.x|...x8DDD8
   ba628:	242418fc 24241818 087cfc18 48080404     ..$$..$$..|....H
   ba638:	24545454 443f0404 40403c24 201c7c20     TTT$..?D$<@@ |. 
   ba648:	3c1c2040 3c403040 28102844 90904c44     @ .<@0@<D(.(DL..
   ba658:	64447c90 00444c54 00413608 00770000     .|DdTLD..6A...w.
   ba668:	36410000 01020008 3c020402 3c262326     ..A6.......<&#&<
   ba678:	61a1a11e 40403a12 54387a20 21595554     ...a.:@@ z8TTUY!
   ba688:	41795555 78545422 54552142 54204078     UUyA"TTxB!UTx@ T
   ba698:	0c407955 1272521e 55555539 54543959     Uy@..Rr.9UUUY9TT
   ba6a8:	55395954 00585454 417c4500 7d450200     TY9UTTX..E|A..E}
   ba6b8:	45010042 127d407c f07d1211 f0282528     B..E|@}...}.(%(.
   ba6c8:	4555547c 54542000 0a7c547c 32497f09     |TUE. TT|T|...I2
   ba6d8:	32494949 4444443a 484a323a 413a3048     III2:DDD:2JHH0:A
   ba6e8:	3a7a2141 78204042 a0a09d00 42423d7d     A!z:B@ x....}=BB
   ba6f8:	403d3d42 3c3d4040 2424ff24 43497e48     B==@@@=<$.$$H~IC
   ba708:	fc2f2b66 09ff2b2f c020f629 03097e88     f+/./+..). ..~..
   ba718:	79545420 44000041 4830417d 38324a48      TTyA..D}A0HHJ28
   ba728:	7a224040 0a0a7a00 190d7d72 29267d31     @@"z.z..r}..1}&)
   ba738:	26282f29 26292929 404d4830 08083820     )/(&)))&0HM@ 8..
   ba748:	08080808 2f380808 baacc810 3428102f     ......8/..../.(4
   ba758:	7b0000fa 14080000 2222142a 08142a14     ...{....*."".*..
   ba768:	00550055 aa55aa55 55ffaa55 00ff55ff     U.U.U.U.U..U.U..
   ba778:	00ff0000 ff101010 14141400 101000ff     ................
   ba788:	10ff00ff f010f010 fc141414 f7141400     ................
   ba798:	0000ff00 14ff00ff fc04f414 10171414     ................
   ba7a8:	1f10101f 14141f10 10001f14 00f01010     ................
   ba7b8:	1f000000 10101010 1010101f 0010f010     ................
   ba7c8:	10ff0000 10101010 10101010 000010ff     ................
   ba7d8:	0014ff00 ff00ff00 101f0000 fc000017     ................
   ba7e8:	1414f404 14171017 f404f414 00ff0000     ................
   ba7f8:	141414f7 14141414 14f700f7 14171414     ................
   ba808:	101f1010 1414141f 101014f4 00f010f0     ................
   ba818:	1f101f00 1f000000 00000014 000014fc     ................
   ba828:	10f010f0 ff10ff10 ff141414 10101014     ................
   ba838:	0000001f ff10f000 ffffffff f0f0f0f0     ................
   ba848:	fffffff0 00000000 0fffff00 0f0f0f0f     ................
   ba858:	38444438 4a4afc44 027e344a 02060602     8DD8D.JJJ4~.....
   ba868:	027e027e 41495563 44443863 7e40043c     ~.~.cUIAc8DD<.@~
   ba878:	06201e20 02027e02 a5e7a599 492a1c99      . ..~........*I
   ba888:	724c1c2a 304c7201 304d4d4a 48784830     *.Lr.rL0JMM00HxH
   ba898:	5a62bc30 493e3d46 7e004949 7e010101     0.bZF=>III.~...~
   ba8a8:	2a2a2a2a 5f44442a 51404444 4040444a     *****DD_DD@QJD@@
   ba8b8:	40514a44 01ff0000 ff80e003 08080000     DJQ@............
   ba8c8:	36086b6b 36243612 0f090f06 18000006     kk.6.6$6........
   ba8d8:	00000018 30001010 0101ff40 01011f00     .......0@.......
   ba8e8:	1d19001e 3c001217 003c3c3c 00000000     .......<<<<.....

000ba8f8 <_ZTV12Adafruit_GFX>:
	...
   ba908:	000b5539 000b73ad 000b4ac5 000b4f3f     9U...s...J..?O..
   ba918:	000b4f41 000b4f73 000b4f4f 000b4f61     AO..sO..OO..aO..
   ba928:	000b4e81 000b4f3f 000b516b 000b5169     .N..?O..kQ..iQ..
   ba938:	000b4f8b 000b4fc9 000b5003 000b5049     .O...O...P..IP..
   ba948:	000b5065 000b50e9 61666564 20746c75     eP...P..default 
   ba958:	42534d00 42534c00 50533c00 74655349     .MSB.LSB.<SPISet
   ba968:	676e6974 65642073 6c756166 3c003e74     tings default>.<
   ba978:	53495053 69747465 2073676e 75257325     SPISettings %s%u
   ba988:	20732520 45444f4d 003e7525               %s MODE%u>.

000ba994 <_ZTVN8particle11SPISettingsE>:
	...
   ba99c:	000b5659 000b5647 000b5649              YV..GV..IV..

000ba9a8 <_ZL12splash1_data>:
   ba9a8:	00000000 00800100 00000000 00000000     ................
   ba9b8:	00008003 00000000 07000000 000000c0     ................
   ba9c8:	00000000 c0070000 00000000 00000000     ................
   ba9d8:	00c00f00 00000000 00000000 0000e01f     ................
   ba9e8:	00000000 1f000000 000000e0 00000000     ................
   ba9f8:	e03f0000 00000000 00000000 00f03f00     ..?..........?..
	...
   baa10:	0000f07f 00000000 7ff81f00 000000f0     ................
   baa20:	00000000 f07ffe3f 00000000 3f000000     ....?..........?
   baa30:	00f07fff 00000000 ff1f0000 0000e0fb     ................
   baa40:	00000000 f9ff0f00 0000c0ff 00000000     ................
   baa50:	fff9ff0f 000000f8 07000000 fffff1ff     ................
   baa60:	00000000 fc030000 80ffff73 00000000     ........s.......
   baa70:	3ffe0100 0080ffff 00000000 0f1eff00     ...?............
   baa80:	000000ff 00000000 fc1ffe7f 00000000     ................
   baa90:	3f000000 00f8ffff 00000000 df0f0000     ...?............
   baaa0:	0000e0ff 00000000 ff191f00 000000c0     ................
   baab0:	00000000 00ff3c3f 00000000 7e000000     ....?<.........~
   baac0:	0000f87c 00000000 fe7f0000 0000007c     |...........|...
   baad0:	00000000 fcffff00 00000000 00000000     ................
   baae0:	00feffff 00000000 ff000000 0000feff     ................
   baaf0:	00000000 efff0100 000000fe 00000000     ................
   bab00:	fecfff01 00000000 03000000 00fe07ff     ................
   bab10:	00000000 fc030000 0000fe07 00000000     ................
   bab20:	03f00300 000000fe 00000000 fe008001     ................
	...
   bab38:	007e0000 00000000 00000000 00003e00     ..~..........>..
	...
   bab50:	0000000c 07000000 00fc0080 00c00300     ................
   bab60:	80070000 0000fc01 0000c003 01800700     ................
   bab70:	030000fc 000000c0 e0018007 1e000000     ................
   bab80:	07000000 00e00180 001e0000 9ff7e37f     ................
   bab90:	78e7fdf9 ffc0df7b fdbffff7 7b78fffd     ...x{.........x{
   baba0:	f7ffc0df fdfdbfff df7b78ff 87f7f0c0     .........x{.....
   babb0:	ffe13dbc 00de7b78 bc87f7f0 78f0e13d     .=..x{......=..x
   babc0:	0000de7b 3d8087f7 7b78e0e1 f77f00de     {......=..x{....
   babd0:	e1fd9f87 de7b78e0 87f7ff00 e0e1fdbf     .....x{.........
   babe0:	00de7b78 bc87f7f0 78e0e13d f000de7b     x{......=..x{...
   babf0:	3dbc87f7 7b78e0e1 f7f000de e13dbc87     ...=..x{......=.
   bac00:	de7b78e0 fff7ff00 e0e1fdbf c0dffb7f     .x{.............
   bac10:	bffff7ff 7fe0e1fd 7cc0dffb 3d9ff3f3     ...........|...=
   bac20:	7b3ee0e1 0000c0cf 00000000 00000000     ..>{............
   bac30:	ffffff00 ffffffff c0ffffff ffffffff     ................
   bac40:	11db68fd ffc0311a fdffffff 6afb5a2b     .h...1......+Z.j
   bac50:	ffffc0ef 4bfdffff 331a3b5b ffffffc0     .......K[;.3....
   bac60:	5b6bfdff c0fd6adb                       ..k[.j..

000bac68 <_ZL12splash2_data>:
   bac68:	00600000 00000000 00000000 00000000     ..`.............
   bac78:	0000e000 00000000 00000000 01000000     ................
   bac88:	000000e0 00000000 00000000 f0010000     ................
	...
   baca4:	00f00300 00000000 00000000 00000000     ................
   bacb4:	0000f007 00000000 00000000 07000000     ................
   bacc4:	000000f8 00000000 00000000 f80f0000     ................
   bacd4:	03000000 007e00c0 00e00100 00f80f7f     ......~.........
   bace4:	c0030000 0000fe00 ff00e001 0000f8ef     ................
   bacf4:	00c00300 010000fe ffff00e0 000000f8     ................
   bad04:	f000c003 0f000000 7ffe7f00 030000c0     ................
   bad14:	00f000c0 000f0000 f87ffe3f cffbf13f     ........?...?...
   bad24:	bcf3fefc 1fe0ef3d 7fff7ffe fedffffb     ....=...........
   bad34:	3dbcfffe c61fe0ef fb7fffff fefedfff     ...=............
   bad44:	ef3dbcff c7e30fe0 c37b78fe fff01ede     ..=......x{.....
   bad54:	00ef3dbc fc87ff07 dec37b78 3cf8f01e     .=......x{.....<
   bad64:	0100ef3d 00f0ffff 1ec0c37b 3d3cf0f0     =.......{.....<=
   bad74:	f30100ef fb3fe07f f0fecfc3 ef3d3cf0     ......?......<=.
   bad84:	3fe30300 c3fb7f80 f0f0fedf 00ef3d3c     ...?........<=..
   bad94:	003ce707 dec37b78 3cf0f01e 0700ef3d     ..<.x{.....<=...
   bada4:	7800beff 1edec37b 3d3cf0f0 ff0700ef     ...x{.....<=....
   badb4:	7b7800fe f01edec3 ef3d3cf0 feff0f00     ..x{.....<=.....
   badc4:	fffb7f00 f0f0fedf e0effd3f 00ffff0f     ........?.......
   badd4:	dffffb7f 3ff0f0fe 0fe0effd 3e00fff9     .......?.......>
   bade4:	9ecff979 3d1ff0f0 f11fe0e7 000000ff     y......=........
	...
   badfc:	ff801f00 ffff7f00 ffffffff e0ffffff     ................
   bae0c:	007f001c ffffff7f 886db4fe 00e0188d     ..........m.....
   bae1c:	7f001f00 feffffff b57dad95 0000e077     ..........}.w...
   bae2c:	ff7f000f a5feffff 198d9dad 060000e0     ................
   bae3c:	ffff7f00 adb5feff e07eb5ed              ..........~.

000bae48 <_ZTV16Adafruit_SSD1306>:
	...
   bae50:	000b56ad 000b56c5 000b5539 000b73ad     .V...V..9U...s..
   bae60:	000b56d9 000b4f3f 000b4f41 000b4f73     .V..?O..AO..sO..
   bae70:	000b4f4f 000b4f61 000b4e81 000b4f3f     OO..aO...N..?O..
   bae80:	000b516b 000b5877 000b5e1f 000b5dd1     kQ..wX...^...]..
   bae90:	000b5003 000b5049 000b5065 000b50e9     .P..IP..eP...P..

000baea0 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   baea0:	e0c08000 fefcf8f0                       ........

000baea8 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   baea8:	07030100 7f3f1f0f                       ......?.

000baeb0 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   baeb0:	a880d5ae                                ....

000baeb4 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   baeb4:	8d4000d3                                ..@.

000baeb8 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   baeb8:	c8a10020                                 ...

000baebc <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   baebc:	a6a440db                                 .@....

000baec2 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   baec2:	8f8102da                                ....

000baec6 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   baec6:	                                         ...

000baec9 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   baec9:	                                         ...

000baecc <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   baecc:	21ff0022 00000000                       "..!....

000baed4 <_ZTV16OledWingAdafruit>:
	...
   baedc:	000b68c9 000b68e9 000b5539 000b73ad     .h...h..9U...s..
   baeec:	000b56d9 000b4f3f 000b4f41 000b4f73     .V..?O..AO..sO..
   baefc:	000b4f4f 000b4f61 000b4e81 000b4f3f     OO..aO...N..?O..
   baf0c:	000b516b 000b5877 000b5e1f 000b5dd1     kQ..wX...^...]..
   baf1c:	000b5003 000b5049 000b5065 000b50e9     .P..IP..eP...P..

000baf2c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000baf34 <_ZTVN5spark13EthernetClassE>:
	...
   baf3c:	000b703b 000b7031 000b7027 000b701d     ;p..1p..'p...p..
   baf4c:	000b7011 000b7005 000b7289 000b7291     .p...p...r...r..
   baf5c:	000b6ff9 000b6ff1 000b6fe7 000b6fdd     .o...o...o...o..
   baf6c:	000b72c1                                .r..

000baf70 <_ZTV7TwoWire>:
	...
   baf78:	000b7059 000b70a3 000b707b 000b705b     Yp...p..{p..[p..
   baf88:	000b7083 000b708b 000b7093 000b709b     .p...p...p...p..

000baf98 <_ZTV9IPAddress>:
	...
   bafa0:	000b712d 000b711d 000b711f 00707061     -q...q...q..app.

000bafb0 <_ZTVN5spark12NetworkClassE>:
	...
   bafb8:	000b7249 000b7253 000b725d 000b7267     Ir..Sr..]r..gr..
   bafc8:	000b7271 000b727d 000b7289 000b7291     qr..}r...r...r..
   bafd8:	000b7299 000b72a5 000b72ad 000b72b7     .r...r...r...r..
   bafe8:	000b72c1                                .r..

000bafec <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bafec:	18100800 38302820 69726977 7200676e     .... (08wiring.r
   baffc:	20766365 6f727265 203d2072 00006425     ecv error = %d..

000bb00c <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bb014:	000b77bd 000b77e1 000b7d13 000b77ef     .w...w...}...w..
   bb024:	000b77c1                                .w..

000bb028 <_ZTV9TCPClient>:
	...
   bb030:	000b786d 000b78a1 000b7739 000b7753     mx...x..9w..Sw..
   bb040:	000b7ba9 000b777d 000b7a1f 000b77b1     .{..}w...z...w..
   bb050:	000b7ab1 000b78f1 000b7a4d 000b7c5d     .z...x..Mz..]|..
   bb060:	000b79ed 000b77b3 000b7765 000b77f5     .y...w..ew...w..
   bb070:	000b78d1 252d5925 64252d6d 3a482554     .x..%Y-%m-%dT%H:
   bb080:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000bb090 <_ZTV11USARTSerial>:
	...
   bb098:	000b7d2d 000b7d99 000b7d71 000b73ad     -}...}..q}...s..
   bb0a8:	000b7d41 000b7d5d 000b7d4f 000b7d6b     A}..]}..O}..k}..
   bb0b8:	000b7d2f 000b7d33                       /}..3}..

000bb0c0 <_ZTV9USBSerial>:
	...
   bb0c8:	000b7dd7 000b7e3f 000b7e15 000b73ad     .}..?~...~...s..
   bb0d8:	000b7e07 000b7dd9 000b7de9 000b7e39     .~...}...}..9~..
   bb0e8:	000b7df9 000b7dd1                       .}...}..

000bb0f0 <_ZTVN5spark9WiFiClassE>:
	...
   bb0f8:	000b7f37 000b7f2d 000b7f23 000b7ed9     7...-...#....~..
   bb108:	000b7f17 000b7f0b 000b7289 000b7291     .........r...r..
   bb118:	000b7eff 000b7ef7 000b7eed 000b7ee3     .~...~...~...~..
   bb128:	000b72c1                                .r..

000bb12c <_ZSt7nothrow>:
	...

000bb12d <_ZTSSt19_Sp_make_shared_tag>:
   bb12d:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   bb13d:	5f646572 00676174                        red_tag....

000bb148 <_ZTISt19_Sp_make_shared_tag>:
   bb148:	000bb188 000bb12d                       ....-...

000bb150 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bb150:	000bb1e8 000bb15c 000bb20c              ....\.......

000bb15c <_ZTSN10__cxxabiv117__class_type_infoE>:
   bb15c:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   bb16c:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   bb17c:	00000045                                E...

000bb180 <_ZTVN10__cxxabiv117__class_type_infoE>:
   bb180:	00000000 000bb150 000b82d1 000b82e5     ....P...........
   bb190:	000b8479 000b8479 000b834f 000b8291     y...y...O.......
   bb1a0:	000b8337 000b82f9 000b82c3              7...........

000bb1ac <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bb1ac:	000bb1e8 000bb1b8 000bb150              ........P...

000bb1b8 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bb1b8:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   bb1c8:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   bb1d8:	456f666e 00000000                       nfoE....

000bb1e0 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bb1e0:	00000000 000bb1ac 000b8379 000b838d     ........y.......
   bb1f0:	000b8479 000b8479 000b834f 000b8291     y...y...O.......
   bb200:	000b844d 000b83d9 000b83a1              M...........

000bb20c <_ZTISt9type_info>:
   bb20c:	000bb188 000bb214                       ........

000bb214 <_ZTSSt9type_info>:
   bb214:	74397453 5f657079 6f666e69 45455200     St9type_info.REE
   bb224:	6d20544e 6f6c6c61 75732063 65656363     NT malloc succee
   bb234:	00646564 706d742f 6e656a2f 736e696b     ded./tmp/jenkins
   bb244:	4343472d 2d30312d 65706970 656e696c     -GCC-10-pipeline
   bb254:	5f38342d 30323032 34323131 3036315f     -48_20201124_160
   bb264:	30383136 2f393336 2f637273 6c77656e     6180639/src/newl
   bb274:	6e2f6269 696c7765 696c2f62 732f6362     ib/newlib/libc/s
   bb284:	696c6474 61722f62 632e646e 00666e00     tdlib/rand.c.nf.
   bb294:	74696e69 6e610079 00000000              inity.an....

000bb2a0 <fpi.1>:
   bb2a0:	00000035 fffffbce 000003cb 00000001     5...............
   bb2b0:	00000000                                ....

000bb2b4 <fpinan.0>:
   bb2b4:	00000034 fffffbce 000003cb 00000001     4...............
   bb2c4:	00000000                                ....

000bb2c8 <tinytens>:
   bb2c8:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   bb2d8:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   bb2e8:	64ac6f43 11680628                       Co.d(.h.

000bb2f0 <_ctype_>:
   bb2f0:	20202000 20202020 28282020 20282828     .         ((((( 
   bb300:	20202020 20202020 20202020 20202020                     
   bb310:	10108820 10101010 10101010 10101010      ...............
   bb320:	04040410 04040404 10040404 10101010     ................
   bb330:	41411010 41414141 01010101 01010101     ..AAAAAA........
   bb340:	01010101 01010101 01010101 10101010     ................
   bb350:	42421010 42424242 02020202 02020202     ..BBBBBB........
   bb360:	02020202 02020202 02020202 10101010     ................
   bb370:	00000020 00000000 00000000 00000000      ...............
	...
   bb3f0:	6c614200 20636f6c 63637573 65646565     .Balloc succeede
   bb400:	742f0064 6a2f706d 696b6e65 472d736e     d./tmp/jenkins-G
   bb410:	312d4343 69702d30 696c6570 342d656e     CC-10-pipeline-4
   bb420:	30325f38 31313032 315f3432 31363036     8_20201124_16061
   bb430:	33363038 72732f39 656e2f63 62696c77     80639/src/newlib
   bb440:	77656e2f 2f62696c 6362696c 6474732f     /newlib/libc/std
   bb450:	2f62696c 6f746467 65672d61 78656874     lib/gdtoa-gethex
   bb460:	2e00632e 00000000                       .c......

000bb468 <_C_numeric_locale>:
   bb468:	000bb463 000ba958 2003e3f0 4f500043     c...X...... C.PO
   bb478:	00584953 706d742f 6e656a2f 736e696b     SIX./tmp/jenkins
   bb488:	4343472d 2d30312d 65706970 656e696c     -GCC-10-pipeline
   bb498:	5f38342d 30323032 34323131 3036315f     -48_20201124_160
   bb4a8:	30383136 2f393336 2f637273 6c77656e     6180639/src/newl
   bb4b8:	6e2f6269 696c7765 696c2f62 732f6362     ib/newlib/libc/s
   bb4c8:	696c6474 706d2f62 2e636572 00000063     tdlib/mprec.c...

000bb4d8 <__mprec_bigtens>:
   bb4d8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   bb4e8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   bb4f8:	7f73bf3c 75154fdd                       <.s..O.u

000bb500 <__mprec_tens>:
   bb500:	00000000 3ff00000 00000000 40240000     .......?......$@
   bb510:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   bb520:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   bb530:	00000000 412e8480 00000000 416312d0     .......A......cA
   bb540:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   bb550:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   bb560:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   bb570:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   bb580:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   bb590:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   bb5a0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   bb5b0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   bb5c0:	79d99db4 44ea7843                       ...yCx.D

000bb5c8 <p05.0>:
   bb5c8:	00000005 00000019 0000007d              ........}...

000bb5d4 <link_const_data_end>:
   bb5d4:	000b4dad 	.word	0x000b4dad
   bb5d8:	000b6fcd 	.word	0x000b6fcd
   bb5dc:	000b7045 	.word	0x000b7045
   bb5e0:	000b7239 	.word	0x000b7239
   bb5e4:	000b7399 	.word	0x000b7399
   bb5e8:	000b74c1 	.word	0x000b74c1
   bb5ec:	000b7715 	.word	0x000b7715
   bb5f0:	000b7d19 	.word	0x000b7d19
   bb5f4:	000b7f41 	.word	0x000b7f41
